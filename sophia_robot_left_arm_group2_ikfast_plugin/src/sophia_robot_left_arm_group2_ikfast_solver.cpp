/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2022-03-02 16:03:34.648029
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11;
x0=IKsin(j[1]);
x1=IKcos(j[0]);
x2=IKsin(j[0]);
x3=IKsin(j[2]);
x4=IKcos(j[2]);
x5=IKcos(j[1]);
x6=((0.965925532213041)*x3);
x7=((0.965925532213041)*x4);
x8=((0.258820142606703)*x4);
x9=((0.258820142606703)*x3);
x10=(x0*x2);
x11=(x0*x1);
eetrans[0]=((0.0036)+(((-0.005)*x11)));
eetrans[1]=((-0.005)*x10);
eetrans[2]=((-0.23)+(((-0.005)*x5)));
eerot[0]=(((x11*x6))+((x11*x8))+(((-1.0)*x2*x7))+((x2*x9)));
eerot[1]=(((x1*x7))+(((-1.0)*x1*x9))+((x10*x8))+((x10*x6)));
eerot[2]=(((x5*x6))+((x5*x8)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 3; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x23000006; }

class IKSolver {
public:
IkReal j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,j8,cj8,sj8,htj8,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij6[2], _nj6,_ij7[2], _nj7,_ij8[2], _nj8;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1;  _ij8[0] = -1; _ij8[1] = -1; _nj8 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

j8=pfree[0]; cj8=cos(pfree[0]); sj8=sin(pfree[0]);
new_px=((-0.0036)+px);
new_py=py;
new_pz=((0.23)+pz);
px = new_px; py = new_py; pz = new_pz;
pp=((px*px)+(py*py)+(pz*pz));
IkReal op[8+1], zeror[8];
int numroots;
IkReal x12=((0.00129410071303351)*sj8);
IkReal x13=((0.0048296276610652)*cj8);
IkReal x14=(pz*sj8);
IkReal x15=(cj8*pz);
IkReal x16=((0.258820142606703)*x14);
IkReal x17=((0.965925532213041)*x15);
IkReal x18=((0.965925532213041)*py*sj8);
IkReal x19=((0.258820142606703)*cj8*py);
IkReal x20=(x12+x16);
IkReal x21=(x12+x17);
IkReal x22=(x13+x17);
IkReal x23=(x13+x16);
IkReal x24=((((1.93185106442608)*px*sj8))+(((0.517640285213405)*cj8*px)));
IkReal x25=((((3.86370212885216)*x14))+(((1.03528057042681)*x15)));
IkReal x26=((-1.0)*x24);
IkReal x27=(x19+x18);
IkReal x28=(x12+x27);
IkReal x29=(x27+x22);
IkReal x30=(x27+x23);
IkReal x31=((((-1.0)*x20))+(((-1.0)*x27))+x22);
IkReal x32=((((-1.0)*x29))+x20);
IkReal x33=((((-1.0)*x20))+x29);
IkReal x34=((((-1.0)*x23))+x27+x21);
IkReal x35=((((-1.0)*x21))+x30);
IkReal x36=((((-1.0)*x30))+x21);
IkReal gconst0=x31;
IkReal gconst1=x32;
IkReal gconst2=x31;
IkReal gconst3=x24;
IkReal gconst4=x33;
IkReal gconst5=x31;
IkReal gconst6=x32;
IkReal gconst7=x31;
IkReal gconst8=x24;
IkReal gconst9=x33;
IkReal gconst10=x25;
IkReal gconst11=x25;
IkReal gconst12=x34;
IkReal gconst13=x35;
IkReal gconst14=x34;
IkReal gconst15=x26;
IkReal gconst16=x36;
IkReal gconst17=x34;
IkReal gconst18=x35;
IkReal gconst19=x34;
IkReal gconst20=x26;
IkReal gconst21=x36;
IkReal x37=(gconst0*gconst19);
IkReal x38=(gconst16*gconst18);
IkReal x39=(gconst4*gconst6);
IkReal x40=(gconst17*gconst9);
IkReal x41=(gconst13*gconst2);
IkReal x42=(gconst11*gconst3);
IkReal x43=(gconst1*gconst19);
IkReal x44=((1.0)*gconst16);
IkReal x45=(gconst21*gconst5);
IkReal x46=(gconst13*gconst7);
IkReal x47=(gconst5*gconst9);
IkReal x48=(gconst1*gconst14);
IkReal x49=(gconst12*gconst19);
IkReal x50=((1.0)*gconst14);
IkReal x51=((1.0)*gconst18);
IkReal x52=((1.0)*gconst1);
IkReal x53=(gconst17*gconst8);
IkReal x54=(gconst17*gconst21);
IkReal x55=(gconst13*gconst14);
IkReal x56=(gconst2*gconst7);
IkReal x57=(gconst15*gconst8);
IkReal x58=(gconst20*gconst3);
IkReal x59=(gconst1*gconst2);
IkReal x60=(gconst12*gconst7);
IkReal x61=(gconst17*gconst20);
IkReal x62=(gconst10*gconst4);
IkReal x63=(gconst18*gconst4);
IkReal x64=(gconst10*gconst16);
IkReal x65=(gconst20*gconst5);
IkReal x66=((1.0)*gconst13);
IkReal x67=((1.0)*gconst6);
IkReal x68=(gconst0*gconst7);
IkReal x69=(gconst5*gconst8);
IkReal x70=(gconst16*gconst6);
IkReal x71=(gconst13*gconst19);
IkReal x72=(gconst11*gconst15);
IkReal x73=((1.0)*gconst11);
IkReal x74=(gconst10*gconst11);
IkReal x75=(gconst1*gconst7);
IkReal x76=(gconst5*x66);
IkReal x77=((1.0)*gconst12*gconst4);
IkReal x78=((1.0)*gconst0*gconst4);
IkReal x79=(gconst6*gconst7*x50);
op[0]=(((x38*x49))+(((-1.0)*gconst15*x61*x66))+(((-1.0)*gconst12*x44*x54))+(((-1.0)*gconst18*x50*x71))+((x54*x55)));
op[1]=(((x61*x64))+((x71*x72)));
op[2]=((((-1.0)*gconst18*x46*x50))+(((-1.0)*gconst17*x58*x66))+((x38*x60))+((x37*x38))+(((-1.0)*x54*x77))+((x49*x70))+(((-1.0)*gconst19*x41*x51))+(((-1.0)*gconst6*x50*x71))+((x45*x55))+(((-1.0)*gconst12*x40*x44))+(((-1.0)*gconst18*x43*x50))+(((-1.0)*gconst15*x52*x61))+(((-1.0)*gconst15*x65*x66))+((x48*x54))+(((-1.0)*gconst19*x44*x74))+((x40*x55))+((x49*x63))+(((-1.0)*gconst0*x44*x54))+((x41*x54))+(((-1.0)*gconst15*x53*x66))+(((-1.0)*gconst12*x44*x45)));
op[3]=(((x42*x71))+((x43*x72))+((x46*x72))+((x61*x62))+((x53*x64))+((x64*x65)));
op[4]=((((-1.0)*gconst19*x62*x73))+((x38*x68))+(((-1.0)*gconst0*x40*x44))+((x41*x45))+(((-1.0)*x45*x77))+(((-1.0)*gconst17*x52*x58))+(((-1.0)*gconst3*x53*x66))+((x40*x48))+((x40*x41))+((x60*x63))+(((-1.0)*x54*x78))+((x37*x63))+(((-1.0)*gconst19*x41*x67))+((x39*x49))+((x60*x70))+(((-1.0)*gconst15*x52*x65))+((x45*x48))+(((-1.0)*x58*x76))+(((-1.0)*gconst15*x52*x53))+((x37*x70))+(((-1.0)*gconst7*x44*x74))+((x47*x55))+(((-1.0)*gconst6*x43*x50))+(((-1.0)*gconst7*x48*x51))+(((-1.0)*gconst2*x43*x51))+(((-1.0)*x57*x76))+(((-1.0)*gconst6*x46*x50))+(((-1.0)*gconst7*x41*x51))+(((-1.0)*gconst12*x44*x47))+(((-1.0)*gconst0*x44*x45))+(((-1.0)*x40*x77))+((x54*x59)));
op[5]=(((x62*x65))+((x42*x43))+((x42*x46))+((x53*x62))+((x72*x75))+((x64*x69)));
op[6]=((((-1.0)*gconst5*x52*x57))+(((-1.0)*gconst5*x52*x58))+((x39*x60))+(((-1.0)*gconst7*x62*x73))+(((-1.0)*gconst1*x51*x56))+((x41*x47))+(((-1.0)*x45*x78))+((x37*x39))+((x47*x48))+((x68*x70))+((x45*x59))+(((-1.0)*x47*x77))+(((-1.0)*gconst3*x52*x53))+(((-1.0)*gconst3*x66*x69))+((x63*x68))+(((-1.0)*gconst7*x48*x67))+((x40*x59))+(((-1.0)*gconst7*x41*x67))+(((-1.0)*gconst0*x44*x47))+(((-1.0)*gconst2*x43*x67))+(((-1.0)*x40*x78)));
op[7]=(((x42*x75))+((x62*x69)));
op[8]=(((x39*x68))+(((-1.0)*gconst6*x52*x56))+(((-1.0)*x47*x78))+(((-1.0)*gconst3*x52*x69))+((x47*x59)));
polyroots8(op,zeror,numroots);
IkReal j7array[8], cj7array[8], sj7array[8], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[8]={true,true,true,true,true,true,true,true};
_nj7 = 8;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j6eval[2];
IkReal x80=px*px;
IkReal x81=py*py;
IkReal x82=cj8*cj8;
IkReal x83=(cj8*sj8);
IkReal x84=((0.500001967989669)*x82);
IkReal x85=((2.0)*x82);
IkReal x86=(cj7*sj7*x80);
IkReal x87=(cj7*sj7*x81);
j6eval[0]=(x86+x87+(((-3.46408343568754)*x83*x87))+(((-3.46408343568754)*x83*x86))+(((-1.0)*x85*x86))+(((-1.0)*x85*x87)));
j6eval[1]=IKsign(((((0.250000983994834)*x87))+(((0.250000983994834)*x86))+(((-0.866024267562092)*x83*x87))+(((-0.866024267562092)*x83*x86))+(((-1.0)*x84*x87))+(((-1.0)*x84*x86))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x88=cj8*cj8;
IkReal x89=cj7*cj7;
IkReal x90=(cj8*sj8);
IkReal x91=(px*x89);
IkReal x92=(cj7*px*pz);
IkReal x93=(cj7*py*pz*sj7);
j6eval[0]=((((-400.0)*x88*x92))+(((692.816687137509)*x88*x93))+(((-3.46408343568754)*x90*x91))+x91+(((-400.0)*x90*x93))+(((-2.0)*x88*x91))+(((-746.406769183216)*x93))+(((-692.816687137509)*x90*x92))+(((200.0)*x92)));
j6eval[1]=IKsign(((((0.00125000491997417)*x91))+(((-0.933012133781046)*x93))+(((-0.500001967989669)*x88*x92))+(((0.866024267562092)*x88*x93))+(((-0.866024267562092)*x90*x92))+(((-0.00250000983994834)*x88*x91))+(((-0.00433012133781046)*x90*x91))+(((-0.500001967989669)*x90*x93))+(((0.250000983994834)*x92))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x94=cj8*cj8;
IkReal x95=cj7*cj7;
IkReal x96=(cj7*px);
IkReal x97=(cj8*sj8);
IkReal x98=(py*sj7);
IkReal x99=(cj7*x94);
IkReal x100=(px*pz*x95);
j6eval[0]=((((2985.61532541263)*pz*x98))+(((1492.81353836643)*x100*x94))+(((-746.406769183216)*x100))+(((2585.61532541263)*x100*x97))+((cj7*x98))+(((12.9280766270632)*x96*x97))+(((-3.73203384591608)*x96))+(((-7.46406769183216)*cj7*x97*x98))+(((7.46406769183216)*x94*x96))+(((12.9280766270632)*x98*x99)));
j6eval[1]=IKsign(((((-0.00125000491997417)*x96))+(((0.500001967989669)*x100*x94))+(((0.00433012133781046)*x98*x99))+((pz*x98))+(((-0.250000983994834)*x100))+(((0.000334939331094769)*cj7*x98))+(((-0.00250000983994834)*cj7*x97*x98))+(((0.00250000983994834)*x94*x96))+(((0.866024267562092)*x100*x97))+(((0.00433012133781046)*x96*x97))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j6eval[0]=14.9280766270632;
j6eval[1]=cj8;
j6eval[2]=((px*px)+(py*py));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
j6array[0]=0;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

IkReal soleval[1];
IkReal x101=(((cj6*py))+(((-1.0)*px*sj6)));
IkReal x102=((-0.005)+(((-1.0)*sj7*((((cj6*px))+((py*sj6))))))+(((-1.0)*cj7*pz)));
soleval[0]=((((0.965925532213041)*cj8*x101))+(((-0.258820142606703)*sj8*x101))+(((-0.965925532213041)*sj8*x102))+(((-0.258820142606703)*cj8*x102)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
j6array[0]=0;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

IkReal soleval[1];
IkReal x103=(((cj6*py))+(((-1.0)*px*sj6)));
IkReal x104=((-0.005)+(((-1.0)*sj7*((((cj6*px))+((py*sj6))))))+(((-1.0)*cj7*pz)));
soleval[0]=((((0.965925532213041)*cj8*x103))+(((-0.258820142606703)*sj8*x103))+(((-0.965925532213041)*sj8*x104))+(((-0.258820142606703)*cj8*x104)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
j6array[0]=0;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

IkReal soleval[1];
IkReal x105=(((cj6*py))+(((-1.0)*px*sj6)));
IkReal x106=((-0.005)+(((-1.0)*sj7*((((cj6*px))+((py*sj6))))))+(((-1.0)*cj7*pz)));
soleval[0]=((((0.965925532213041)*cj8*x105))+(((-0.258820142606703)*sj8*x105))+(((-0.965925532213041)*sj8*x106))+(((-0.258820142606703)*cj8*x106)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
j6array[0]=0;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

IkReal soleval[1];
IkReal x107=(((cj6*py))+(((-1.0)*px*sj6)));
IkReal x108=((-0.005)+(((-1.0)*sj7*((((cj6*px))+((py*sj6))))))+(((-1.0)*cj7*pz)));
soleval[0]=((((0.965925532213041)*cj8*x107))+(((-0.258820142606703)*sj8*x107))+(((-0.965925532213041)*sj8*x108))+(((-0.258820142606703)*cj8*x108)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x110 = IKatan2WithCheck(IkReal(((-3.86368692146027)*cj8*py)),IkReal(((3.86368692146027)*cj8*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x110.valid){
continue;
}
IkReal x109=x110.value;
j6array[0]=((-1.0)*x109);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x109)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x111=cj8*cj8;
IkReal x112=IKcos(j6);
IkReal x113=IKsin(j6);
IkReal x114=px*px;
IkReal x115=py*py;
IkReal x116=(px*py);
IkReal x117=x112*x112;
IkReal x118=((7.46406769183216)*x111);
IkReal x119=((0.866024267562092)*x117);
IkReal x120=(x112*x113);
IkReal x121=(x111*x114);
IkReal x122=((2.0)*x111*x117);
evalcond[0]=((1.67469665547385e-6)+(((14.9281353836643)*x111*x116*x117))+(((0.500001967989669)*x114*x120))+(((4.0)*x111*x116*x120))+((x111*x115))+((x114*x119))+(((-1.0)*x116*x118))+(((-0.0669878662189539)*x115))+(((-1.0)*x115*x122))+(((-2.5e-5)*x111))+(((-1.0)*x114*x118*x120))+(((-1.0)*x115*x119))+(((-0.933012133781046)*x114))+((x115*x118*x120))+(((-1.00000393597934)*x116*x117))+(((0.500001967989669)*x116))+(((-1.0)*x121))+(((2.0)*x117*x121))+(((1.73204853512418)*x116*x120))+(((-0.500001967989669)*x115*x120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x123=(((cj6*py))+(((-1.0)*px*sj6)));
IkReal x124=((-0.005)+(((-1.0)*sj7*((((cj6*px))+((py*sj6))))))+(((-1.0)*cj7*pz)));
soleval[0]=((((0.965925532213041)*cj8*x123))+(((-0.258820142606703)*sj8*x123))+(((-0.965925532213041)*sj8*x124))+(((-0.258820142606703)*cj8*x124)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j6eval[0]=14.9280766270632;
j6eval[1]=cj8;
j6eval[2]=((px*px)+(py*py));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
j6array[0]=0;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

IkReal soleval[1];
IkReal x125=(((cj6*py))+(((-1.0)*px*sj6)));
IkReal x126=((-0.005)+(((-1.0)*sj7*((((cj6*px))+((py*sj6))))))+(((-1.0)*cj7*pz)));
soleval[0]=((((0.965925532213041)*cj8*x125))+(((-0.258820142606703)*sj8*x125))+(((-0.965925532213041)*sj8*x126))+(((-0.258820142606703)*cj8*x126)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
j6array[0]=0;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

IkReal soleval[1];
IkReal x127=(((cj6*py))+(((-1.0)*px*sj6)));
IkReal x128=((-0.005)+(((-1.0)*sj7*((((cj6*px))+((py*sj6))))))+(((-1.0)*cj7*pz)));
soleval[0]=((((0.965925532213041)*cj8*x127))+(((-0.258820142606703)*sj8*x127))+(((-0.965925532213041)*sj8*x128))+(((-0.258820142606703)*cj8*x128)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
j6array[0]=0;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

IkReal soleval[1];
IkReal x129=(((cj6*py))+(((-1.0)*px*sj6)));
IkReal x130=((-0.005)+(((-1.0)*sj7*((((cj6*px))+((py*sj6))))))+(((-1.0)*cj7*pz)));
soleval[0]=((((-0.258820142606703)*cj8*x130))+(((0.965925532213041)*cj8*x129))+(((-0.258820142606703)*sj8*x129))+(((-0.965925532213041)*sj8*x130)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
j6array[0]=0;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

IkReal soleval[1];
IkReal x131=(((cj6*py))+(((-1.0)*px*sj6)));
IkReal x132=((-0.005)+(((-1.0)*sj7*((((cj6*px))+((py*sj6))))))+(((-1.0)*cj7*pz)));
soleval[0]=((((-0.258820142606703)*cj8*x132))+(((0.965925532213041)*cj8*x131))+(((-0.258820142606703)*sj8*x131))+(((-0.965925532213041)*sj8*x132)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x134 = IKatan2WithCheck(IkReal(((-3.86368692146027)*cj8*py)),IkReal(((3.86368692146027)*cj8*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x134.valid){
continue;
}
IkReal x133=x134.value;
j6array[0]=((-1.0)*x133);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x133)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x135=cj8*cj8;
IkReal x136=IKcos(j6);
IkReal x137=IKsin(j6);
IkReal x138=px*px;
IkReal x139=py*py;
IkReal x140=(px*py);
IkReal x141=x136*x136;
IkReal x142=(x136*x137);
IkReal x143=((0.866024267562092)*x141);
IkReal x144=(x135*x138);
IkReal x145=(x135*x139);
IkReal x146=((2.0)*x135*x141);
evalcond[0]=((1.67469665547385e-6)+(((-0.500001967989669)*x140))+(((4.0)*x135*x140*x142))+(((-0.0669878662189539)*x139))+(((1.00000393597934)*x140*x141))+(((-14.9281353836643)*x135*x140*x141))+(((-2.5e-5)*x135))+(((7.46406769183216)*x142*x144))+(((-7.46406769183216)*x142*x145))+(((2.0)*x141*x144))+((x138*x143))+(((-0.933012133781046)*x138))+(((-1.0)*x139*x143))+x145+(((-2.0)*x141*x145))+(((1.73204853512418)*x140*x142))+(((-1.0)*x144))+(((0.500001967989669)*x139*x142))+(((7.46406769183216)*x135*x140))+(((-0.500001967989669)*x138*x142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x147=(((cj6*py))+(((-1.0)*px*sj6)));
IkReal x148=((-0.005)+(((-1.0)*sj7*((((cj6*px))+((py*sj6))))))+(((-1.0)*cj7*pz)));
soleval[0]=((((-0.258820142606703)*cj8*x148))+(((0.965925532213041)*cj8*x147))+(((-0.965925532213041)*sj8*x148))+(((-0.258820142606703)*sj8*x147)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[2];
sj7=0;
cj7=1.0;
j7=0;
IkReal x149=cj8*cj8;
IkReal x150=(px*pz);
IkReal x151=(cj8*sj8);
j6eval[0]=((((2.0)*px*x149))+(((400.0)*x149*x150))+(((-1.0)*px))+(((-200.0)*x150))+(((692.816687137509)*x150*x151))+(((3.46408343568754)*px*x151)));
j6eval[1]=((((-1.0)*sj8))+(((746.406769183216)*cj8*pz))+(((-200.0)*pz*sj8))+(((3.73203384591608)*cj8)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
sj7=0;
cj7=1.0;
j7=0;
IkReal x152=pz*pz;
IkReal x153=cj8*cj8;
IkReal x154=(cj8*sj8);
j6eval[0]=((((3.73203384591608)*px*sj8))+((cj8*px)));
j6eval[1]=((1.0)+(((12.9280766270632)*x153))+(((298562.707673286)*x152*x154))+(((-517123.065082527)*x152*x153))+(((-40000.0)*x152))+(((-7.46406769183216)*x154)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x157 = px*px;
if(IKabs(x157)==0){
continue;
}
IkReal x155=pow(x157,-0.5);
IkReal x156=(px*x155);
CheckValue<IkReal> x158 = IKatan2WithCheck(IkReal(px),IkReal(((3.73203384591608)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x158.valid){
continue;
}
IkReal gconst38=((-1.0)*(x158.value));
IkReal gconst39=((-0.258820142606703)*x156);
IkReal gconst40=((0.965925532213041)*x156);
CheckValue<IkReal> x159 = IKatan2WithCheck(IkReal(px),IkReal(((3.73203384591608)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x159.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x159.value)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
IkReal x160=x155;
IkReal x161=(px*x160);
sj7=0;
cj7=1.0;
j7=0;
sj8=gconst39;
cj8=gconst40;
CheckValue<IkReal> x162 = IKatan2WithCheck(IkReal(px),IkReal(((3.73203385)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x162.valid){
continue;
}
j8=((-1.0)*(x162.value));
CheckValue<IkReal> x163 = IKatan2WithCheck(IkReal(px),IkReal(((3.73203384591608)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x163.valid){
continue;
}
IkReal gconst38=((-1.0)*(x163.value));
IkReal gconst39=((-0.258820142606703)*x161);
IkReal gconst40=((0.965925532213041)*x161);
CheckValue<IkReal> x166=IKPowWithIntegerCheck(px,-2);
if(!x166.valid){
continue;
}
if((x166.value) < -0.00001)
continue;
IkReal x164=IKsqrt(x166.value);
IkReal x165=(px*x164);
j6eval[0]=((((3.86368692146027)*x165))+(((772.737384292055)*pz*x165)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j6]

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x169=IKPowWithIntegerCheck(((((0.965925532213041)*gconst40*pz))+(((-0.00129410071303351)*gconst39))+(((-0.258820142606703)*gconst39*pz))+(((0.0048296276610652)*gconst40))),-1);
if(!x169.valid){
continue;
}
IkReal x167=x169.value;
IkReal x168=(py*x167);
cj6array[0]=((((0.965925532213041)*gconst39*x168))+(((0.258820142606703)*gconst40*x168)));
if( cj6array[0] >= -1-IKFAST_SINCOS_THRESH && cj6array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKacos(cj6array[0]);
    sj6array[0] = IKsin(j6array[0]);
    cj6array[1] = cj6array[0];
    j6array[1] = -j6array[0];
    sj6array[1] = -sj6array[0];
}
else if( isnan(cj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x170=IKsin(j6);
IkReal x171=IKcos(j6);
IkReal x172=gconst40*gconst40;
IkReal x173=pz*pz;
IkReal x174=py*py;
IkReal x175=px*px;
IkReal x176=(gconst39*gconst40);
IkReal x177=((0.258820142606703)*gconst40);
IkReal x178=((0.965925532213041)*gconst39);
IkReal x179=((0.500001967989669)*pz);
IkReal x180=((1.73204853512418)*pz);
IkReal x181=x171*x171;
IkReal x182=((0.866024267562092)*x172);
IkReal x183=(px*x170);
IkReal x184=(py*x171);
IkReal x185=((0.500001967989669)*x174);
IkReal x186=((2.16506066890523e-5)*x172);
IkReal x187=((0.500001967989669)*x175);
IkReal x188=((0.933012133781046)*x175);
IkReal x189=((1.00000393597934)*pz*x172);
IkReal x190=(x179*x184);
IkReal x191=(x173*x181);
IkReal x192=(x174*x181);
IkReal x193=(x176*x180*x184);
IkReal x194=(x184*x189);
IkReal x195=(x193+x194);
evalcond[0]=(((x177*x183))+(((-1.0)*x178*x184))+((x178*x183))+(((0.965925532213041)*gconst40*pz))+(((-0.00129410071303351)*gconst39))+(((-1.0)*x177*x184))+(((-0.258820142606703)*gconst39*pz))+(((0.0048296276610652)*gconst40)));
evalcond[1]=((((-0.933012133781046)*x174))+(((-1.25000491997417e-5)*x176*x181))+(((1.67469665547385e-6)*x181))+(((-1.0)*x190))+((x174*x182))+x195+(((-1.0)*x176*x185))+(((-0.0669878662189539)*x191))+(((0.500001967989669)*x176*x191))+(((-1.0)*x182*x191))+((x181*x186)));
evalcond[2]=((1.67469665547385e-6)+(((-1.25000491997417e-5)*x176))+(((-1.0)*x188))+((x179*x183))+(((-1.0)*x176*x181*x185))+(((-1.0)*x190))+(((1.00000393597934)*x176*x183*x184))+((x175*x182))+x195+x186+(((-1.0)*x176*x187))+(((0.500001967989669)*x173*x176))+((x176*x181*x187))+(((-1.73204853512418)*x172*x183*x184))+(((1.86602426756209)*x183*x184))+(((-1.0)*x173*x182))+(((-1.0)*x183*x189))+((x182*x192))+(((-0.0669878662189539)*x173))+(((-1.0)*x176*x180*x183))+((x181*x188))+(((-1.0)*x175*x181*x182))+(((-0.933012133781046)*x192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x196=(((cj6*py))+(((-1.0)*px*sj6)));
IkReal x197=((-0.005)+(((-1.0)*sj7*((((cj6*px))+((py*sj6))))))+(((-1.0)*cj7*pz)));
soleval[0]=((((-0.258820142606703)*cj8*x197))+(((-0.965925532213041)*sj8*x197))+(((0.965925532213041)*cj8*x196))+(((-0.258820142606703)*sj8*x196)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x200 = px*px;
if(IKabs(x200)==0){
continue;
}
IkReal x198=pow(x200,-0.5);
IkReal x199=(px*x198);
CheckValue<IkReal> x201 = IKatan2WithCheck(IkReal(px),IkReal(((3.73203384591608)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x201.valid){
continue;
}
IkReal gconst41=((3.14159265358979)+(((-1.0)*(x201.value))));
IkReal gconst42=((0.258820142606703)*x199);
IkReal gconst43=((-0.965925532213041)*x199);
CheckValue<IkReal> x202 = IKatan2WithCheck(IkReal(px),IkReal(((3.73203384591608)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x202.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x202.value)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
IkReal x203=x198;
IkReal x204=(px*x203);
sj7=0;
cj7=1.0;
j7=0;
sj8=gconst42;
cj8=gconst43;
CheckValue<IkReal> x205 = IKatan2WithCheck(IkReal(px),IkReal(((3.73203385)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x205.valid){
continue;
}
j8=((3.14159265)+(((-1.0)*(x205.value))));
CheckValue<IkReal> x206 = IKatan2WithCheck(IkReal(px),IkReal(((3.73203384591608)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x206.valid){
continue;
}
IkReal gconst41=((3.14159265358979)+(((-1.0)*(x206.value))));
IkReal gconst42=((0.258820142606703)*x204);
IkReal gconst43=((-0.965925532213041)*x204);
CheckValue<IkReal> x209=IKPowWithIntegerCheck(px,-2);
if(!x209.valid){
continue;
}
if((x209.value) < -0.00001)
continue;
IkReal x207=IKsqrt(x209.value);
IkReal x208=(px*x207);
j6eval[0]=((((-772.737384292055)*pz*x208))+(((-3.86368692146027)*x208)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j6]

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x212=IKPowWithIntegerCheck(((((-0.00129410071303351)*gconst42))+(((0.965925532213041)*gconst43*pz))+(((0.0048296276610652)*gconst43))+(((-0.258820142606703)*gconst42*pz))),-1);
if(!x212.valid){
continue;
}
IkReal x210=x212.value;
IkReal x211=(py*x210);
cj6array[0]=((((0.965925532213041)*gconst42*x211))+(((0.258820142606703)*gconst43*x211)));
if( cj6array[0] >= -1-IKFAST_SINCOS_THRESH && cj6array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKacos(cj6array[0]);
    sj6array[0] = IKsin(j6array[0]);
    cj6array[1] = cj6array[0];
    j6array[1] = -j6array[0];
    sj6array[1] = -sj6array[0];
}
else if( isnan(cj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x213=IKsin(j6);
IkReal x214=IKcos(j6);
IkReal x215=gconst43*gconst43;
IkReal x216=py*py;
IkReal x217=pz*pz;
IkReal x218=px*px;
IkReal x219=(gconst42*gconst43);
IkReal x220=((0.965925532213041)*gconst42);
IkReal x221=((0.258820142606703)*gconst43);
IkReal x222=x214*x214;
IkReal x223=((0.866024267562092)*x215);
IkReal x224=((0.500001967989669)*x217);
IkReal x225=((1.00000393597934)*x215);
IkReal x226=(px*x213);
IkReal x227=((0.0669878662189539)*x217);
IkReal x228=(py*x214);
IkReal x229=((2.16506066890523e-5)*x215);
IkReal x230=(pz*x228);
IkReal x231=((0.500001967989669)*x230);
IkReal x232=(x216*x222);
IkReal x233=(x218*x222);
IkReal x234=(x226*x228);
IkReal x235=(x225*x230);
IkReal x236=((1.73204853512418)*x219*x230);
IkReal x237=(x236+x235);
evalcond[0]=((((-0.00129410071303351)*gconst42))+((x220*x226))+(((-1.0)*x220*x228))+((x221*x226))+(((-1.0)*x221*x228))+(((0.965925532213041)*gconst43*pz))+(((0.0048296276610652)*gconst43))+(((-0.258820142606703)*gconst42*pz)));
evalcond[1]=(((x219*x222*x224))+((x216*x223))+(((-1.25000491997417e-5)*x219*x222))+((x222*x229))+(((-1.0)*x222*x227))+(((-1.0)*x231))+x237+(((-0.500001967989669)*x216*x219))+(((1.67469665547385e-6)*x222))+(((-0.933012133781046)*x216))+(((-1.0)*x217*x222*x223)));
evalcond[2]=((1.67469665547385e-6)+(((0.500001967989669)*x219*x233))+(((-1.73204853512418)*x215*x234))+(((0.933012133781046)*x233))+(((-1.73204853512418)*pz*x219*x226))+(((-0.933012133781046)*x232))+((x219*x224))+(((-1.0)*x231))+x229+x237+(((1.86602426756209)*x234))+(((-1.25000491997417e-5)*x219))+((x218*x223))+(((-0.500001967989669)*x218*x219))+(((-1.0)*x217*x223))+(((-1.0)*x223*x233))+(((-0.933012133781046)*x218))+(((-1.0)*x227))+(((0.500001967989669)*pz*x226))+((x223*x232))+(((-1.0)*pz*x225*x226))+(((1.00000393597934)*x219*x234))+(((-0.500001967989669)*x219*x232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x238=(((cj6*py))+(((-1.0)*px*sj6)));
IkReal x239=((-0.005)+(((-1.0)*sj7*((((cj6*px))+((py*sj6))))))+(((-1.0)*cj7*pz)));
soleval[0]=((((-0.258820142606703)*cj8*x239))+(((-0.965925532213041)*sj8*x239))+(((-0.258820142606703)*sj8*x238))+(((0.965925532213041)*cj8*x238)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x240=((-1.0)+(((-200.0)*pz)));
IkReal x241=((3.73203384591608)+(((746.406769183216)*pz)));
IkReal x243 = ((x240*x240)+(x241*x241));
if(IKabs(x243)==0){
continue;
}
IkReal x242=pow(x243,-0.5);
CheckValue<IkReal> x244 = IKatan2WithCheck(IkReal(x241),IkReal(x240),IKFAST_ATAN2_MAGTHRESH);
if(!x244.valid){
continue;
}
IkReal gconst44=((-1.0)*(x244.value));
IkReal gconst45=((-1.0)*x241*x242);
IkReal gconst46=(x240*x242);
IkReal x245=j8;
CheckValue<IkReal> x248 = IKatan2WithCheck(IkReal(((3.73203384591608)+(((746.406769183216)*pz)))),IkReal(((-1.0)+(((-200.0)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x248.valid){
continue;
}
IkReal x246=x248.value;
IkReal x247=x246;
if(((((j8*x245))+((j8*x247))+((x245*x246))+((x246*x247)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((j8*x245))+((j8*x247))+((x245*x246))+((x246*x247)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x249=IKPowWithIntegerCheck(((((0.258820142606703)*gconst46*px))+(((0.965925532213041)*gconst45*px))),-1);
if(!x249.valid){
continue;
}
CheckValue<IkReal> x250=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x250.valid){
continue;
}
CheckValue<IkReal> x251=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x251.valid){
continue;
}
CheckValue<IkReal> x252=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x252.valid){
continue;
}
if((((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x253=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x253.valid){
continue;
}
if((((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x254=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x254.valid){
continue;
}
CheckValue<IkReal> x255=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x255.valid){
continue;
}
CheckValue<IkReal> x256=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x256.valid){
continue;
}
CheckValue<IkReal> x257=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x257.valid){
continue;
}
CheckValue<IkReal> x258=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x258.valid){
continue;
}
CheckValue<IkReal> x259=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x259.valid){
continue;
}
if((((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x260=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x260.valid){
continue;
}
if( IKabs(((x249.value)*(((((-0.707109191469274)*gconst45*pz*(gconst46*gconst46)*(py*py)*(x250.value)))+(((0.241482333518994)*gconst45*pz*(py*py)*(x251.value)))+(((0.129410071303351)*gconst46*py*(x252.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))))))+(((-0.965925532213041)*gconst46*pz))+(((-0.0048296276610652)*gconst46))+(((0.48296276610652)*gconst45*py*(x253.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))))))+(((-0.836514951554323)*gconst46*pz*(gconst45*gconst45)*(py*py)*(x254.value)))+(((0.258820142606703)*gconst45*pz))+(((0.00129410071303351)*gconst45))+(((-0.129410580658718)*pz*(gconst46*gconst46*gconst46)*(py*py)*(x255.value)))+(((0.064705290329359)*gconst46*pz*(py*py)*(x256.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.250000983994834)*py*pz*(x257.value)))+(((-0.866024267562092)*gconst45*gconst46*py*pz*(x258.value)))+(((0.5)*(x259.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))))))+(((-0.500001967989669)*py*pz*(gconst46*gconst46)*(x260.value))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x249.value)*(((((-0.707109191469274)*gconst45*pz*(gconst46*gconst46)*(py*py)*(x250.value)))+(((0.241482333518994)*gconst45*pz*(py*py)*(x251.value)))+(((0.129410071303351)*gconst46*py*(x252.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))))))+(((-0.965925532213041)*gconst46*pz))+(((-0.0048296276610652)*gconst46))+(((0.48296276610652)*gconst45*py*(x253.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))))))+(((-0.836514951554323)*gconst46*pz*(gconst45*gconst45)*(py*py)*(x254.value)))+(((0.258820142606703)*gconst45*pz))+(((0.00129410071303351)*gconst45))+(((-0.129410580658718)*pz*(gconst46*gconst46*gconst46)*(py*py)*(x255.value)))+(((0.064705290329359)*gconst46*pz*(py*py)*(x256.value)))))))+IKsqr(((((0.250000983994834)*py*pz*(x257.value)))+(((-0.866024267562092)*gconst45*gconst46*py*pz*(x258.value)))+(((0.5)*(x259.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))))))+(((-0.500001967989669)*py*pz*(gconst46*gconst46)*(x260.value)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((x249.value)*(((((-0.707109191469274)*gconst45*pz*(gconst46*gconst46)*(py*py)*(x250.value)))+(((0.241482333518994)*gconst45*pz*(py*py)*(x251.value)))+(((0.129410071303351)*gconst46*py*(x252.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))))))+(((-0.965925532213041)*gconst46*pz))+(((-0.0048296276610652)*gconst46))+(((0.48296276610652)*gconst45*py*(x253.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))))))+(((-0.836514951554323)*gconst46*pz*(gconst45*gconst45)*(py*py)*(x254.value)))+(((0.258820142606703)*gconst45*pz))+(((0.00129410071303351)*gconst45))+(((-0.129410580658718)*pz*(gconst46*gconst46*gconst46)*(py*py)*(x255.value)))+(((0.064705290329359)*gconst46*pz*(py*py)*(x256.value)))))), ((((0.250000983994834)*py*pz*(x257.value)))+(((-0.866024267562092)*gconst45*gconst46*py*pz*(x258.value)))+(((0.5)*(x259.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))))))+(((-0.500001967989669)*py*pz*(gconst46*gconst46)*(x260.value)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
CheckValue<IkReal> x261=IKPowWithIntegerCheck(((((0.258820142606703)*gconst46*px))+(((0.965925532213041)*gconst45*px))),-1);
if(!x261.valid){
continue;
}
CheckValue<IkReal> x262=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x262.valid){
continue;
}
CheckValue<IkReal> x263=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x263.valid){
continue;
}
CheckValue<IkReal> x264=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x264.valid){
continue;
}
CheckValue<IkReal> x265=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x265.valid){
continue;
}
if((((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x266=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x266.valid){
continue;
}
CheckValue<IkReal> x267=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x267.valid){
continue;
}
CheckValue<IkReal> x268=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x268.valid){
continue;
}
if((((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x269=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x269.valid){
continue;
}
CheckValue<IkReal> x270=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x270.valid){
continue;
}
CheckValue<IkReal> x271=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x271.valid){
continue;
}
if((((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x272=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x272.valid){
continue;
}
if( IKabs(((x261.value)*(((((-0.707109191469274)*gconst45*pz*(gconst46*gconst46)*(py*py)*(x262.value)))+(((0.241482333518994)*gconst45*pz*(py*py)*(x263.value)))+(((-0.965925532213041)*gconst46*pz))+(((-0.0048296276610652)*gconst46))+(((-0.836514951554323)*gconst46*pz*(gconst45*gconst45)*(py*py)*(x264.value)))+(((0.258820142606703)*gconst45*pz))+(((-0.129410071303351)*gconst46*py*(x265.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))))))+(((0.00129410071303351)*gconst45))+(((-0.129410580658718)*pz*(gconst46*gconst46*gconst46)*(py*py)*(x266.value)))+(((0.064705290329359)*gconst46*pz*(py*py)*(x267.value)))+(((-0.48296276610652)*gconst45*py*(x268.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz)))))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.250000983994834)*py*pz*(x269.value)))+(((-0.866024267562092)*gconst45*gconst46*py*pz*(x270.value)))+(((-0.5)*(x271.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))))))+(((-0.500001967989669)*py*pz*(gconst46*gconst46)*(x272.value))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x261.value)*(((((-0.707109191469274)*gconst45*pz*(gconst46*gconst46)*(py*py)*(x262.value)))+(((0.241482333518994)*gconst45*pz*(py*py)*(x263.value)))+(((-0.965925532213041)*gconst46*pz))+(((-0.0048296276610652)*gconst46))+(((-0.836514951554323)*gconst46*pz*(gconst45*gconst45)*(py*py)*(x264.value)))+(((0.258820142606703)*gconst45*pz))+(((-0.129410071303351)*gconst46*py*(x265.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))))))+(((0.00129410071303351)*gconst45))+(((-0.129410580658718)*pz*(gconst46*gconst46*gconst46)*(py*py)*(x266.value)))+(((0.064705290329359)*gconst46*pz*(py*py)*(x267.value)))+(((-0.48296276610652)*gconst45*py*(x268.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))))))))))+IKsqr(((((0.250000983994834)*py*pz*(x269.value)))+(((-0.866024267562092)*gconst45*gconst46*py*pz*(x270.value)))+(((-0.5)*(x271.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))))))+(((-0.500001967989669)*py*pz*(gconst46*gconst46)*(x272.value)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[1]=IKatan2(((x261.value)*(((((-0.707109191469274)*gconst45*pz*(gconst46*gconst46)*(py*py)*(x262.value)))+(((0.241482333518994)*gconst45*pz*(py*py)*(x263.value)))+(((-0.965925532213041)*gconst46*pz))+(((-0.0048296276610652)*gconst46))+(((-0.836514951554323)*gconst46*pz*(gconst45*gconst45)*(py*py)*(x264.value)))+(((0.258820142606703)*gconst45*pz))+(((-0.129410071303351)*gconst46*py*(x265.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))))))+(((0.00129410071303351)*gconst45))+(((-0.129410580658718)*pz*(gconst46*gconst46*gconst46)*(py*py)*(x266.value)))+(((0.064705290329359)*gconst46*pz*(py*py)*(x267.value)))+(((-0.48296276610652)*gconst45*py*(x268.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))))))))), ((((0.250000983994834)*py*pz*(x269.value)))+(((-0.866024267562092)*gconst45*gconst46*py*pz*(x270.value)))+(((-0.5)*(x271.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))))))+(((-0.500001967989669)*py*pz*(gconst46*gconst46)*(x272.value)))));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x273=IKcos(j6);
IkReal x274=IKsin(j6);
IkReal x275=gconst46*gconst46;
IkReal x276=pz*pz;
IkReal x277=py*py;
IkReal x278=px*px;
IkReal x279=((0.258820142606703)*gconst46);
IkReal x280=(gconst45*gconst46);
IkReal x281=((1.73204853512418)*pz);
IkReal x282=((0.0048296276610652)*gconst46);
IkReal x283=((0.965925532213041)*gconst45);
IkReal x284=((0.500001967989669)*pz);
IkReal x285=((0.00129410071303351)*gconst45);
IkReal x286=x273*x273;
IkReal x287=((1.25000491997417e-5)*x280);
IkReal x288=(px*x274);
IkReal x289=(py*x273);
IkReal x290=((0.866024267562092)*x275);
IkReal x291=((0.258820142606703)*gconst45*pz);
IkReal x292=((0.965925532213041)*gconst46*pz);
IkReal x293=((2.16506066890523e-5)*x275);
IkReal x294=((1.00000393597934)*pz*x275);
IkReal x295=(x284*x289);
IkReal x296=(x276*x286);
IkReal x297=(x278*x286);
IkReal x298=(x277*x286);
IkReal x299=(x280*x281*x289);
IkReal x300=(x289*x294);
IkReal x301=(x300+x299);
evalcond[0]=(((x273*x292))+(((-1.0)*x273*x291))+((x273*x282))+(((-1.0)*py*x283))+(((-1.0)*x273*x285))+(((-1.0)*py*x279)));
evalcond[1]=(((x279*x288))+(((-1.0)*x291))+x292+x282+(((-1.0)*x285))+(((-1.0)*x279*x289))+((x283*x288))+(((-1.0)*x283*x289)));
evalcond[2]=((((0.500001967989669)*x280*x296))+(((-1.0)*x290*x296))+((x277*x290))+(((-1.0)*x295))+(((-0.500001967989669)*x277*x280))+(((1.67469665547385e-6)*x286))+x301+(((-0.933012133781046)*x277))+((x286*x293))+(((-0.0669878662189539)*x296))+(((-1.0)*x286*x287)));
evalcond[3]=((1.67469665547385e-6)+(((0.500001967989669)*x280*x297))+((x284*x288))+((x290*x298))+(((-1.0)*x280*x281*x288))+(((-1.0)*x290*x297))+(((1.00000393597934)*x280*x288*x289))+(((1.86602426756209)*x288*x289))+(((-1.0)*x295))+(((-0.933012133781046)*x298))+(((-0.500001967989669)*x278*x280))+x301+x293+(((-0.933012133781046)*x278))+((x278*x290))+(((0.500001967989669)*x276*x280))+(((-1.0)*x288*x294))+(((-1.73204853512418)*x275*x288*x289))+(((-1.0)*x287))+(((-0.500001967989669)*x280*x298))+(((-0.0669878662189539)*x276))+(((-1.0)*x276*x290))+(((0.933012133781046)*x297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x302=(((cj6*py))+(((-1.0)*px*sj6)));
IkReal x303=((-0.005)+(((-1.0)*sj7*((((cj6*px))+((py*sj6))))))+(((-1.0)*cj7*pz)));
soleval[0]=((((-0.258820142606703)*cj8*x303))+(((-0.965925532213041)*sj8*x303))+(((-0.258820142606703)*sj8*x302))+(((0.965925532213041)*cj8*x302)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x304=((-1.0)+(((-200.0)*pz)));
IkReal x305=((3.73203384591608)+(((746.406769183216)*pz)));
IkReal x307 = ((x305*x305)+(x304*x304));
if(IKabs(x307)==0){
continue;
}
IkReal x306=pow(x307,-0.5);
CheckValue<IkReal> x308 = IKatan2WithCheck(IkReal(x305),IkReal(x304),IKFAST_ATAN2_MAGTHRESH);
if(!x308.valid){
continue;
}
IkReal gconst47=((3.14159265358979)+(((-1.0)*(x308.value))));
IkReal gconst48=((1.0)*x305*x306);
IkReal gconst49=((-1.0)*x304*x306);
IkReal x309=j8;
CheckValue<IkReal> x312 = IKatan2WithCheck(IkReal(((3.73203384591608)+(((746.406769183216)*pz)))),IkReal(((-1.0)+(((-200.0)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x312.valid){
continue;
}
IkReal x310=x312.value;
IkReal x311=x310;
if((((9.86960440108936)+((x310*x311))+((j8*x311))+(((-3.14159265358979)*x310))+(((-3.14159265358979)*x311))+((j8*x309))+(((-3.14159265358979)*x309))+((x309*x310))+(((-3.14159265358979)*j8)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+((x310*x311))+((j8*x311))+(((-3.14159265358979)*x310))+(((-3.14159265358979)*x311))+((j8*x309))+(((-3.14159265358979)*x309))+((x309*x310))+(((-3.14159265358979)*j8)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x313=py*py;
IkReal x314=gconst49*gconst49;
IkReal x315=gconst48*gconst48;
IkReal x316=pz*pz;
IkReal x317=(gconst49*pz);
IkReal x318=((0.00125000491997417)*px);
IkReal x319=((0.250000983994834)*px);
IkReal x320=(gconst48*gconst49);
IkReal x321=(pz*x315);
IkReal x322=(pz*x314);
CheckValue<IkReal> x323=IKPowWithIntegerCheck(((((-1.0)*x319*x321))+(((0.00433012133781046)*px*x320))+(((-1.0)*x315*x318))+((x314*x318))+(((0.866024267562092)*gconst48*px*x317))+((x319*x322))),-1);
if(!x323.valid){
continue;
}
CheckValue<IkReal> x324=IKPowWithIntegerCheck(((((0.965925532213041)*x317))+(((-0.258820142606703)*gconst48*pz))+(((-0.00129410071303351)*gconst48))+(((0.0048296276610652)*gconst49))),-1);
if(!x324.valid){
continue;
}
if( IKabs(((x323.value)*(((((1.25000491997417e-5)*x320))+(((0.500001967989669)*x313*x320))+(((-0.933012133781046)*x314*x316))+(((0.0669878662189539)*x313*x314))+(((0.500001967989669)*x316*x320))+(((-1.67469665547385e-6)*x315))+(((0.00500001967989669)*gconst48*x317))+(((-0.000669878662189539)*x321))+(((0.933012133781046)*x313*x315))+(((-2.33253033445262e-5)*x314))+(((-0.0669878662189539)*x315*x316))+(((-0.00933012133781046)*x322)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x324.value)*(((((0.965925532213041)*gconst48*py))+(((0.258820142606703)*gconst49*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x323.value)*(((((1.25000491997417e-5)*x320))+(((0.500001967989669)*x313*x320))+(((-0.933012133781046)*x314*x316))+(((0.0669878662189539)*x313*x314))+(((0.500001967989669)*x316*x320))+(((-1.67469665547385e-6)*x315))+(((0.00500001967989669)*gconst48*x317))+(((-0.000669878662189539)*x321))+(((0.933012133781046)*x313*x315))+(((-2.33253033445262e-5)*x314))+(((-0.0669878662189539)*x315*x316))+(((-0.00933012133781046)*x322))))))+IKsqr(((x324.value)*(((((0.965925532213041)*gconst48*py))+(((0.258820142606703)*gconst49*py))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((x323.value)*(((((1.25000491997417e-5)*x320))+(((0.500001967989669)*x313*x320))+(((-0.933012133781046)*x314*x316))+(((0.0669878662189539)*x313*x314))+(((0.500001967989669)*x316*x320))+(((-1.67469665547385e-6)*x315))+(((0.00500001967989669)*gconst48*x317))+(((-0.000669878662189539)*x321))+(((0.933012133781046)*x313*x315))+(((-2.33253033445262e-5)*x314))+(((-0.0669878662189539)*x315*x316))+(((-0.00933012133781046)*x322))))), ((x324.value)*(((((0.965925532213041)*gconst48*py))+(((0.258820142606703)*gconst49*py))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x325=IKcos(j6);
IkReal x326=IKsin(j6);
IkReal x327=gconst49*gconst49;
IkReal x328=pz*pz;
IkReal x329=py*py;
IkReal x330=px*px;
IkReal x331=(gconst48*gconst49);
IkReal x332=((0.258820142606703)*gconst49);
IkReal x333=((0.0048296276610652)*gconst49);
IkReal x334=((0.965925532213041)*py);
IkReal x335=((0.258820142606703)*pz);
IkReal x336=x325*x325;
IkReal x337=((0.965925532213041)*gconst49*pz);
IkReal x338=((0.866024267562092)*x327);
IkReal x339=((0.933012133781046)*x329);
IkReal x340=((1.00000393597934)*x327);
IkReal x341=(px*x326);
IkReal x342=((0.0669878662189539)*x328);
IkReal x343=(gconst48*x325);
IkReal x344=(py*x325);
IkReal x345=((2.16506066890523e-5)*x327);
IkReal x346=((0.933012133781046)*x330);
IkReal x347=(pz*x344);
IkReal x348=((0.500001967989669)*x336);
IkReal x349=((0.500001967989669)*x347);
IkReal x350=(x336*x338);
IkReal x351=(x340*x347);
IkReal x352=((1.73204853512418)*x331*x347);
IkReal x353=(x351+x352);
evalcond[0]=((((-1.0)*x335*x343))+(((-0.00129410071303351)*x343))+(((-1.0)*gconst48*x334))+(((-1.0)*py*x332))+((x325*x337))+((x325*x333)));
evalcond[1]=((((-1.0)*x334*x343))+(((-1.0)*gconst48*x335))+(((-1.0)*x332*x344))+x333+x337+(((-0.00129410071303351)*gconst48))+((x332*x341))+(((0.965925532213041)*gconst48*x341)));
evalcond[2]=(((x336*x345))+(((-1.0)*x336*x342))+((x328*x331*x348))+x353+((x329*x338))+(((-1.25000491997417e-5)*x331*x336))+(((-1.0)*x339))+(((-1.0)*x349))+(((-0.500001967989669)*x329*x331))+(((1.67469665547385e-6)*x336))+(((-1.0)*x328*x350)));
evalcond[3]=((1.67469665547385e-6)+((x330*x331*x348))+((x336*x346))+((x330*x338))+(((-1.0)*x330*x350))+(((0.500001967989669)*pz*x341))+((x329*x350))+(((-1.0)*x328*x338))+(((1.00000393597934)*x331*x341*x344))+x353+x345+(((-0.500001967989669)*x330*x331))+(((-1.25000491997417e-5)*x331))+(((0.500001967989669)*x328*x331))+(((-1.73204853512418)*x327*x341*x344))+(((1.86602426756209)*x341*x344))+(((-1.0)*x329*x331*x348))+(((-1.0)*pz*x340*x341))+(((-1.0)*x342))+(((-1.0)*x346))+(((-1.0)*x349))+(((-1.73204853512418)*pz*x331*x341))+(((-1.0)*x336*x339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x354=(((cj6*py))+(((-1.0)*px*sj6)));
IkReal x355=((-0.005)+(((-1.0)*sj7*((((cj6*px))+((py*sj6))))))+(((-1.0)*cj7*pz)));
soleval[0]=((((-0.965925532213041)*sj8*x355))+(((-0.258820142606703)*cj8*x355))+(((-0.258820142606703)*sj8*x354))+(((0.965925532213041)*cj8*x354)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(px);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
sj7=0;
cj7=1.0;
j7=0;
px=0;
pp=((py*py)+(pz*pz));
j6eval[0]=((((-1.0)*sj8))+(((746.406769183216)*cj8*pz))+(((-200.0)*pz*sj8))+(((3.73203384591608)*cj8)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
sj7=0;
cj7=1.0;
j7=0;
px=0;
pp=((py*py)+(pz*pz));
j6eval[0]=((((-3.73203384591608)*py*sj8))+(((-1.0)*cj8*py)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
sj7=0;
cj7=1.0;
j7=0;
px=0;
pp=((py*py)+(pz*pz));
IkReal x356=py*py;
j6eval[0]=((((1.73204171784377)*x356*(cj8*cj8)))+(((-1.0)*cj8*sj8*x356))+(((-1.86601692295804)*x356)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(py);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[4], cj6array[4], sj6array[4];
bool j6valid[4]={false};
_nj6 = 4;
j6array[0]=0;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=1.5707963267949;
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
j6array[2]=3.14159265358979;
sj6array[2]=IKsin(j6array[2]);
cj6array[2]=IKcos(j6array[2]);
j6array[3]=-1.5707963267949;
sj6array[3]=IKsin(j6array[3]);
cj6array[3]=IKcos(j6array[3]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
if( j6array[2] > IKPI )
{
    j6array[2]-=IK2PI;
}
else if( j6array[2] < -IKPI )
{    j6array[2]+=IK2PI;
}
j6valid[2] = true;
if( j6array[3] > IKPI )
{
    j6array[3]-=IK2PI;
}
else if( j6array[3] < -IKPI )
{    j6array[3]+=IK2PI;
}
j6valid[3] = true;
for(int ij6 = 0; ij6 < 4; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 4; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

IkReal soleval[1];
IkReal x357=(((cj6*py))+(((-1.0)*px*sj6)));
IkReal x358=((-0.005)+(((-1.0)*sj7*((((cj6*px))+((py*sj6))))))+(((-1.0)*cj7*pz)));
soleval[0]=((((-0.965925532213041)*sj8*x358))+(((-0.258820142606703)*cj8*x358))+(((-0.258820142606703)*sj8*x357))+(((0.965925532213041)*cj8*x357)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j6array[4], cj6array[4], sj6array[4];
bool j6valid[4]={false};
_nj6 = 4;
IkReal x359=py*py;
IkReal x360=cj8*cj8;
IkReal x361=((4.99996064012917e-5)*x359);
IkReal x362=(cj8*sj8*x359);
CheckValue<IkReal> x370=IKPowWithIntegerCheck(((((-0.933012133781046)*x359))+(((0.866024267562092)*x359*x360))+(((-0.500001967989669)*x362))),-1);
if(!x370.valid){
continue;
}
IkReal x363=x370.value;
IkReal x364=(py*pz*x363);
IkReal x365=((0.250000983994834)*x364);
IkReal x366=((0.500001967989669)*x360*x364);
IkReal x367=((0.866024267562092)*cj8*sj8*x364);
IkReal x368=(x366+x367);
if((((((-1.0)*x361*(x360*x360)))+(((8.66027676215715e-5)*x362*(cj8*cj8)))+(((6.25004919983854e-6)*x359))+((x360*x361))+(((-4.33013838107857e-5)*x362)))) < -0.00001)
continue;
IkReal x369=((0.5)*x363*(IKsqrt(((((-1.0)*x361*(x360*x360)))+(((8.66027676215715e-5)*x362*(cj8*cj8)))+(((6.25004919983854e-6)*x359))+((x360*x361))+(((-4.33013838107857e-5)*x362))))));
cj6array[0]=((((-1.0)*x368))+x369+x365);
cj6array[2]=((((-1.0)*x369))+(((-1.0)*x368))+x365);
if( cj6array[0] >= -1-IKFAST_SINCOS_THRESH && cj6array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKacos(cj6array[0]);
    sj6array[0] = IKsin(j6array[0]);
    cj6array[1] = cj6array[0];
    j6array[1] = -j6array[0];
    sj6array[1] = -sj6array[0];
}
else if( isnan(cj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
if( cj6array[2] >= -1-IKFAST_SINCOS_THRESH && cj6array[2] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[2] = j6valid[3] = true;
    j6array[2] = IKacos(cj6array[2]);
    sj6array[2] = IKsin(j6array[2]);
    cj6array[3] = cj6array[2];
    j6array[3] = -j6array[2];
    sj6array[3] = -sj6array[2];
}
else if( isnan(cj6array[2]) )
{
    // probably any value will work
    j6valid[2] = true;
    cj6array[2] = 1; sj6array[2] = 0; j6array[2] = 0;
}
for(int ij6 = 0; ij6 < 4; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 4; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x371=IKcos(j6);
IkReal x372=cj8*cj8;
IkReal x373=py*py;
IkReal x374=pz*pz;
IkReal x375=((0.965925532213041)*py);
IkReal x376=((0.0048296276610652)*cj8);
IkReal x377=((0.258820142606703)*pz);
IkReal x378=x371*x371;
IkReal x379=(sj8*x371);
IkReal x380=((0.500001967989669)*cj8*sj8);
IkReal x381=((0.965925532213041)*cj8*pz);
IkReal x382=((0.258820142606703)*cj8*py);
IkReal x383=(py*pz*x371);
IkReal x384=(x372*x378);
IkReal x385=(x374*x378);
evalcond[0]=((((-1.0)*sj8*x377))+(((-0.00129410071303351)*sj8))+x381+x376+(((-1.0)*x375*x379))+(((-1.0)*x371*x382)));
evalcond[1]=((((-1.0)*sj8*x375))+(((-0.00129410071303351)*x379))+(((-1.0)*x377*x379))+((x371*x381))+(((-1.0)*x382))+((x371*x376)));
evalcond[2]=((((-1.25000491997417e-5)*cj8*sj8*x378))+(((-1.0)*x373*x380))+(((-0.933012133781046)*x373))+(((1.00000393597934)*x372*x383))+(((0.866024267562092)*x372*x373))+(((-0.0669878662189539)*x385))+(((-0.500001967989669)*x383))+(((1.67469665547385e-6)*x378))+(((-0.866024267562092)*x374*x384))+(((1.73204853512418)*cj8*py*pz*x379))+((x380*x385))+(((2.16506066890523e-5)*x384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x386=(((cj6*py))+(((-1.0)*px*sj6)));
IkReal x387=((-0.005)+(((-1.0)*sj7*((((cj6*px))+((py*sj6))))))+(((-1.0)*cj7*pz)));
soleval[0]=((((-0.258820142606703)*sj8*x386))+(((-0.258820142606703)*cj8*x387))+(((-0.965925532213041)*sj8*x387))+(((0.965925532213041)*cj8*x386)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x392=IKPowWithIntegerCheck(((((-0.258820142606703)*cj8*py))+(((-0.965925532213041)*py*sj8))),-1);
if(!x392.valid){
continue;
}
IkReal x388=x392.value;
IkReal x389=(cj8*x388);
IkReal x390=(pz*x388);
IkReal x391=(sj8*x388);
cj6array[0]=((((-0.0048296276610652)*x389))+(((0.258820142606703)*sj8*x390))+(((-0.965925532213041)*pz*x389))+(((0.00129410071303351)*x391)));
if( cj6array[0] >= -1-IKFAST_SINCOS_THRESH && cj6array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKacos(cj6array[0]);
    sj6array[0] = IKsin(j6array[0]);
    cj6array[1] = cj6array[0];
    j6array[1] = -j6array[0];
    sj6array[1] = -sj6array[0];
}
else if( isnan(cj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x393=IKcos(j6);
IkReal x394=cj8*cj8;
IkReal x395=pz*pz;
IkReal x396=py*py;
IkReal x397=(cj8*py);
IkReal x398=x393*x393;
IkReal x399=((0.500001967989669)*cj8*sj8);
IkReal x400=((0.866024267562092)*x395);
IkReal x401=((0.933012133781046)*x396);
IkReal x402=((0.0669878662189539)*x395);
IkReal x403=((1.25000491997417e-5)*cj8*sj8);
IkReal x404=(pz*x393);
IkReal x405=((0.866024267562092)*x396);
IkReal x406=((0.500001967989669)*py*x404);
IkReal x407=(x394*x398);
IkReal x408=((1.00000393597934)*py*x394*x404);
IkReal x409=((1.73204853512418)*sj8*x397*x404);
IkReal x410=(x409+x408);
evalcond[0]=((((0.965925532213041)*cj8*x404))+(((0.0048296276610652)*cj8*x393))+(((-0.258820142606703)*sj8*x404))+(((-0.258820142606703)*x397))+(((-0.965925532213041)*py*sj8))+(((-0.00129410071303351)*sj8*x393)));
evalcond[1]=((1.67469665547385e-6)+((x405*x407))+((x395*x399))+(((2.16506066890523e-5)*x394))+(((-1.0)*x394*x400))+x410+(((-1.0)*x398*x401))+(((-1.0)*x396*x398*x399))+(((-1.0)*x402))+(((-1.0)*x403))+(((-1.0)*x406)));
evalcond[2]=((((2.16506066890523e-5)*x407))+((x395*x398*x399))+(((1.67469665547385e-6)*x398))+(((-1.0)*x400*x407))+x410+(((-1.0)*x398*x402))+(((-1.0)*x398*x403))+(((-1.0)*x396*x399))+((x394*x405))+(((-1.0)*x401))+(((-1.0)*x406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x411=(((cj6*py))+(((-1.0)*px*sj6)));
IkReal x412=((-0.005)+(((-1.0)*sj7*((((cj6*px))+((py*sj6))))))+(((-1.0)*cj7*pz)));
soleval[0]=((((0.965925532213041)*cj8*x411))+(((-0.258820142606703)*sj8*x411))+(((-0.965925532213041)*sj8*x412))+(((-0.258820142606703)*cj8*x412)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x415=IKPowWithIntegerCheck(((((-0.258820142606703)*pz*sj8))+(((0.965925532213041)*cj8*pz))+(((-0.00129410071303351)*sj8))+(((0.0048296276610652)*cj8))),-1);
if(!x415.valid){
continue;
}
IkReal x413=x415.value;
IkReal x414=(py*x413);
cj6array[0]=((((0.965925532213041)*sj8*x414))+(((0.258820142606703)*cj8*x414)));
if( cj6array[0] >= -1-IKFAST_SINCOS_THRESH && cj6array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKacos(cj6array[0]);
    sj6array[0] = IKsin(j6array[0]);
    cj6array[1] = cj6array[0];
    j6array[1] = -j6array[0];
    sj6array[1] = -sj6array[0];
}
else if( isnan(cj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x416=IKcos(j6);
IkReal x417=cj8*cj8;
IkReal x418=pz*pz;
IkReal x419=py*py;
IkReal x420=(cj8*pz);
IkReal x421=x416*x416;
IkReal x422=(py*x416);
IkReal x423=((0.500001967989669)*cj8*sj8);
IkReal x424=((0.866024267562092)*x418);
IkReal x425=((0.933012133781046)*x419);
IkReal x426=((0.0669878662189539)*x418);
IkReal x427=((1.25000491997417e-5)*cj8*sj8);
IkReal x428=((0.866024267562092)*x419);
IkReal x429=((0.500001967989669)*pz*x422);
IkReal x430=(x417*x421);
IkReal x431=((1.00000393597934)*pz*x417*x422);
IkReal x432=((1.73204853512418)*sj8*x420*x422);
IkReal x433=(x431+x432);
evalcond[0]=((((-0.258820142606703)*pz*sj8))+(((0.965925532213041)*x420))+(((-0.00129410071303351)*sj8))+(((-0.965925532213041)*sj8*x422))+(((-0.258820142606703)*cj8*x422))+(((0.0048296276610652)*cj8)));
evalcond[1]=((1.67469665547385e-6)+(((-1.0)*x421*x425))+((x428*x430))+(((-1.0)*x429))+(((-1.0)*x426))+(((-1.0)*x427))+(((2.16506066890523e-5)*x417))+((x418*x423))+x433+(((-1.0)*x417*x424))+(((-1.0)*x419*x421*x423)));
evalcond[2]=((((-1.0)*x421*x426))+(((-1.0)*x421*x427))+((x418*x421*x423))+(((-1.0)*x429))+(((-1.0)*x425))+(((2.16506066890523e-5)*x430))+(((-1.0)*x424*x430))+x433+(((1.67469665547385e-6)*x421))+(((-1.0)*x419*x423))+((x417*x428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x434=(((cj6*py))+(((-1.0)*px*sj6)));
IkReal x435=((-0.005)+(((-1.0)*sj7*((((cj6*px))+((py*sj6))))))+(((-1.0)*cj7*pz)));
soleval[0]=((((-0.258820142606703)*sj8*x434))+(((-0.965925532213041)*sj8*x435))+(((-0.258820142606703)*cj8*x435))+(((0.965925532213041)*cj8*x434)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x436=IKPowWithIntegerCheck(((((0.965925532213041)*px*sj8))+(((0.258820142606703)*cj8*px))),-1);
if(!x436.valid){
continue;
}
CheckValue<IkReal> x437=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x437.valid){
continue;
}
if((((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x438=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x438.valid){
continue;
}
CheckValue<IkReal> x439=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x439.valid){
continue;
}
if((((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x440=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x440.valid){
continue;
}
CheckValue<IkReal> x441=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x441.valid){
continue;
}
CheckValue<IkReal> x442=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x442.valid){
continue;
}
CheckValue<IkReal> x443=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x443.valid){
continue;
}
if((((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x444=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x444.valid){
continue;
}
CheckValue<IkReal> x445=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x445.valid){
continue;
}
CheckValue<IkReal> x446=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x446.valid){
continue;
}
if( IKabs(((x436.value)*(((((0.129410071303351)*cj8*py*(x437.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((0.00129410071303351)*sj8))+(((-0.771809661224964)*cj8*pz*(py*py)*(x438.value)))+(((0.48296276610652)*py*sj8*(x439.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((-0.0048296276610652)*cj8))+(((-0.707109191469274)*pz*sj8*(cj8*cj8)*(py*py)*(x440.value)))+(((0.241482333518994)*pz*sj8*(py*py)*(x441.value)))+(((0.258820142606703)*pz*sj8))+(((-0.965925532213041)*cj8*pz))+(((0.707104370895605)*pz*(cj8*cj8*cj8)*(py*py)*(x442.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.5)*(x443.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((0.250000983994834)*py*pz*(x444.value)))+(((-0.866024267562092)*cj8*py*pz*sj8*(x445.value)))+(((-0.500001967989669)*py*pz*(cj8*cj8)*(x446.value))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x436.value)*(((((0.129410071303351)*cj8*py*(x437.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((0.00129410071303351)*sj8))+(((-0.771809661224964)*cj8*pz*(py*py)*(x438.value)))+(((0.48296276610652)*py*sj8*(x439.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((-0.0048296276610652)*cj8))+(((-0.707109191469274)*pz*sj8*(cj8*cj8)*(py*py)*(x440.value)))+(((0.241482333518994)*pz*sj8*(py*py)*(x441.value)))+(((0.258820142606703)*pz*sj8))+(((-0.965925532213041)*cj8*pz))+(((0.707104370895605)*pz*(cj8*cj8*cj8)*(py*py)*(x442.value)))))))+IKsqr(((((0.5)*(x443.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((0.250000983994834)*py*pz*(x444.value)))+(((-0.866024267562092)*cj8*py*pz*sj8*(x445.value)))+(((-0.500001967989669)*py*pz*(cj8*cj8)*(x446.value)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((x436.value)*(((((0.129410071303351)*cj8*py*(x437.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((0.00129410071303351)*sj8))+(((-0.771809661224964)*cj8*pz*(py*py)*(x438.value)))+(((0.48296276610652)*py*sj8*(x439.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((-0.0048296276610652)*cj8))+(((-0.707109191469274)*pz*sj8*(cj8*cj8)*(py*py)*(x440.value)))+(((0.241482333518994)*pz*sj8*(py*py)*(x441.value)))+(((0.258820142606703)*pz*sj8))+(((-0.965925532213041)*cj8*pz))+(((0.707104370895605)*pz*(cj8*cj8*cj8)*(py*py)*(x442.value)))))), ((((0.5)*(x443.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((0.250000983994834)*py*pz*(x444.value)))+(((-0.866024267562092)*cj8*py*pz*sj8*(x445.value)))+(((-0.500001967989669)*py*pz*(cj8*cj8)*(x446.value)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
CheckValue<IkReal> x447=IKPowWithIntegerCheck(((((0.965925532213041)*px*sj8))+(((0.258820142606703)*cj8*px))),-1);
if(!x447.valid){
continue;
}
CheckValue<IkReal> x448=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x448.valid){
continue;
}
if((((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x449=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x449.valid){
continue;
}
if((((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x450=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x450.valid){
continue;
}
CheckValue<IkReal> x451=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x451.valid){
continue;
}
CheckValue<IkReal> x452=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x452.valid){
continue;
}
CheckValue<IkReal> x453=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x453.valid){
continue;
}
CheckValue<IkReal> x454=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x454.valid){
continue;
}
CheckValue<IkReal> x455=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x455.valid){
continue;
}
if((((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x456=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x456.valid){
continue;
}
CheckValue<IkReal> x457=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x457.valid){
continue;
}
if( IKabs(((x447.value)*(((((-0.129410071303351)*cj8*py*(x448.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((-0.48296276610652)*py*sj8*(x449.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((0.00129410071303351)*sj8))+(((-0.771809661224964)*cj8*pz*(py*py)*(x450.value)))+(((-0.0048296276610652)*cj8))+(((-0.707109191469274)*pz*sj8*(cj8*cj8)*(py*py)*(x451.value)))+(((0.241482333518994)*pz*sj8*(py*py)*(x452.value)))+(((0.258820142606703)*pz*sj8))+(((-0.965925532213041)*cj8*pz))+(((0.707104370895605)*pz*(cj8*cj8*cj8)*(py*py)*(x453.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.250000983994834)*py*pz*(x454.value)))+(((-0.5)*(x455.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((-0.866024267562092)*cj8*py*pz*sj8*(x456.value)))+(((-0.500001967989669)*py*pz*(cj8*cj8)*(x457.value))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x447.value)*(((((-0.129410071303351)*cj8*py*(x448.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((-0.48296276610652)*py*sj8*(x449.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((0.00129410071303351)*sj8))+(((-0.771809661224964)*cj8*pz*(py*py)*(x450.value)))+(((-0.0048296276610652)*cj8))+(((-0.707109191469274)*pz*sj8*(cj8*cj8)*(py*py)*(x451.value)))+(((0.241482333518994)*pz*sj8*(py*py)*(x452.value)))+(((0.258820142606703)*pz*sj8))+(((-0.965925532213041)*cj8*pz))+(((0.707104370895605)*pz*(cj8*cj8*cj8)*(py*py)*(x453.value)))))))+IKsqr(((((0.250000983994834)*py*pz*(x454.value)))+(((-0.5)*(x455.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((-0.866024267562092)*cj8*py*pz*sj8*(x456.value)))+(((-0.500001967989669)*py*pz*(cj8*cj8)*(x457.value)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[1]=IKatan2(((x447.value)*(((((-0.129410071303351)*cj8*py*(x448.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((-0.48296276610652)*py*sj8*(x449.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((0.00129410071303351)*sj8))+(((-0.771809661224964)*cj8*pz*(py*py)*(x450.value)))+(((-0.0048296276610652)*cj8))+(((-0.707109191469274)*pz*sj8*(cj8*cj8)*(py*py)*(x451.value)))+(((0.241482333518994)*pz*sj8*(py*py)*(x452.value)))+(((0.258820142606703)*pz*sj8))+(((-0.965925532213041)*cj8*pz))+(((0.707104370895605)*pz*(cj8*cj8*cj8)*(py*py)*(x453.value)))))), ((((0.250000983994834)*py*pz*(x454.value)))+(((-0.5)*(x455.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((-0.866024267562092)*cj8*py*pz*sj8*(x456.value)))+(((-0.500001967989669)*py*pz*(cj8*cj8)*(x457.value)))));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x458=IKcos(j6);
IkReal x459=IKsin(j6);
IkReal x460=cj8*cj8;
IkReal x461=py*py;
IkReal x462=pz*pz;
IkReal x463=px*px;
IkReal x464=((0.965925532213041)*sj8);
IkReal x465=((0.258820142606703)*cj8);
IkReal x466=((0.0048296276610652)*cj8);
IkReal x467=((0.258820142606703)*pz);
IkReal x468=((0.500001967989669)*pz);
IkReal x469=(cj8*sj8);
IkReal x470=((1.73204853512418)*pz);
IkReal x471=x458*x458;
IkReal x472=(py*x458);
IkReal x473=((0.500001967989669)*x469);
IkReal x474=(px*x459);
IkReal x475=((0.866024267562092)*x460);
IkReal x476=((2.16506066890523e-5)*x460);
IkReal x477=((0.965925532213041)*cj8*pz);
IkReal x478=(sj8*x458);
IkReal x479=((1.25000491997417e-5)*x469);
IkReal x480=((1.00000393597934)*pz*x460);
IkReal x481=(x468*x472);
IkReal x482=(x463*x471);
IkReal x483=(x462*x471);
IkReal x484=(x461*x471);
IkReal x485=(x472*x480);
IkReal x486=(x469*x470*x472);
IkReal x487=(x485+x486);
evalcond[0]=((((-1.0)*x467*x478))+(((-1.0)*py*x464))+(((-1.0)*py*x465))+(((-0.00129410071303351)*x478))+((x458*x477))+((x458*x466)));
evalcond[1]=((((-1.0)*sj8*x467))+(((-0.00129410071303351)*sj8))+((x465*x474))+(((-1.0)*x464*x472))+x466+x477+((x464*x474))+(((-1.0)*x465*x472)));
evalcond[2]=(((x471*x476))+(((-0.933012133781046)*x461))+(((-1.0)*x475*x483))+(((-1.0)*x481))+x487+(((-0.0669878662189539)*x483))+(((-1.0)*x471*x479))+(((-1.0)*x461*x473))+(((1.67469665547385e-6)*x471))+((x461*x475))+((x473*x483)));
evalcond[3]=((1.67469665547385e-6)+(((-1.0)*x462*x475))+((x462*x473))+(((-0.933012133781046)*x484))+(((-0.0669878662189539)*x462))+(((-0.933012133781046)*x463))+(((-1.0)*x475*x482))+(((-1.0)*x481))+((x463*x475))+((x475*x484))+(((-1.73204853512418)*x460*x472*x474))+(((1.86602426756209)*x472*x474))+(((-1.0)*x474*x480))+(((-1.0)*x479))+(((-1.0)*x469*x470*x474))+x487+x476+(((0.933012133781046)*x482))+(((1.00000393597934)*x469*x472*x474))+((x468*x474))+((x473*x482))+(((-1.0)*x463*x473))+(((-1.0)*x473*x484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x488=(((cj6*py))+(((-1.0)*px*sj6)));
IkReal x489=((-0.005)+(((-1.0)*sj7*((((cj6*px))+((py*sj6))))))+(((-1.0)*cj7*pz)));
soleval[0]=((((-0.258820142606703)*cj8*x489))+(((-0.965925532213041)*sj8*x489))+(((-0.258820142606703)*sj8*x488))+(((0.965925532213041)*cj8*x488)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x490=py*py;
IkReal x491=pz*pz;
IkReal x492=cj8*cj8;
IkReal x493=(cj8*sj8);
IkReal x494=(px*pz);
IkReal x495=(px*x492);
IkReal x496=((0.866024267562092)*x492);
CheckValue<IkReal> x497=IKPowWithIntegerCheck(((((0.00250000983994834)*x495))+(((-0.00125000491997417)*px))+(((0.00433012133781046)*px*x493))+(((0.866024267562092)*x493*x494))+(((0.500001967989669)*x492*x494))+(((-0.250000983994834)*x494))),-1);
if(!x497.valid){
continue;
}
CheckValue<IkReal> x498=IKPowWithIntegerCheck(((((-0.258820142606703)*pz*sj8))+(((0.965925532213041)*cj8*pz))+(((-0.00129410071303351)*sj8))+(((0.0048296276610652)*cj8))),-1);
if(!x498.valid){
continue;
}
if( IKabs(((x497.value)*(((-1.67469665547385e-6)+(((0.500001967989669)*x490*x493))+(((-1.0)*x491*x496))+(((0.500001967989669)*x491*x493))+(((-1.0)*x490*x496))+(((0.933012133781046)*x490))+(((1.25000491997417e-5)*x493))+(((-0.0669878662189539)*x491))+(((-2.16506066890523e-5)*x492))+(((-0.00866024267562092)*pz*x492))+(((-0.000669878662189539)*pz))+(((0.00500001967989669)*pz*x493)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x498.value)*(((((0.965925532213041)*py*sj8))+(((0.258820142606703)*cj8*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x497.value)*(((-1.67469665547385e-6)+(((0.500001967989669)*x490*x493))+(((-1.0)*x491*x496))+(((0.500001967989669)*x491*x493))+(((-1.0)*x490*x496))+(((0.933012133781046)*x490))+(((1.25000491997417e-5)*x493))+(((-0.0669878662189539)*x491))+(((-2.16506066890523e-5)*x492))+(((-0.00866024267562092)*pz*x492))+(((-0.000669878662189539)*pz))+(((0.00500001967989669)*pz*x493))))))+IKsqr(((x498.value)*(((((0.965925532213041)*py*sj8))+(((0.258820142606703)*cj8*py))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((x497.value)*(((-1.67469665547385e-6)+(((0.500001967989669)*x490*x493))+(((-1.0)*x491*x496))+(((0.500001967989669)*x491*x493))+(((-1.0)*x490*x496))+(((0.933012133781046)*x490))+(((1.25000491997417e-5)*x493))+(((-0.0669878662189539)*x491))+(((-2.16506066890523e-5)*x492))+(((-0.00866024267562092)*pz*x492))+(((-0.000669878662189539)*pz))+(((0.00500001967989669)*pz*x493))))), ((x498.value)*(((((0.965925532213041)*py*sj8))+(((0.258820142606703)*cj8*py))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x499=IKcos(j6);
IkReal x500=IKsin(j6);
IkReal x501=cj8*cj8;
IkReal x502=py*py;
IkReal x503=pz*pz;
IkReal x504=px*px;
IkReal x505=((0.965925532213041)*sj8);
IkReal x506=((0.258820142606703)*cj8);
IkReal x507=((0.0048296276610652)*cj8);
IkReal x508=((0.258820142606703)*pz);
IkReal x509=((0.500001967989669)*pz);
IkReal x510=(cj8*sj8);
IkReal x511=((1.73204853512418)*pz);
IkReal x512=x499*x499;
IkReal x513=(py*x499);
IkReal x514=((0.500001967989669)*x510);
IkReal x515=(px*x500);
IkReal x516=((0.866024267562092)*x501);
IkReal x517=((2.16506066890523e-5)*x501);
IkReal x518=((0.965925532213041)*cj8*pz);
IkReal x519=(sj8*x499);
IkReal x520=((1.25000491997417e-5)*x510);
IkReal x521=((1.00000393597934)*pz*x501);
IkReal x522=(x509*x513);
IkReal x523=(x504*x512);
IkReal x524=(x503*x512);
IkReal x525=(x502*x512);
IkReal x526=(x513*x521);
IkReal x527=(x510*x511*x513);
IkReal x528=(x526+x527);
evalcond[0]=((((-1.0)*py*x505))+(((-1.0)*py*x506))+((x499*x518))+(((-0.00129410071303351)*x519))+((x499*x507))+(((-1.0)*x508*x519)));
evalcond[1]=((((-0.00129410071303351)*sj8))+(((-1.0)*sj8*x508))+x507+x518+(((-1.0)*x505*x513))+(((-1.0)*x506*x513))+((x506*x515))+((x505*x515)));
evalcond[2]=((((-1.0)*x502*x514))+((x502*x516))+(((-1.0)*x522))+(((-0.933012133781046)*x502))+((x512*x517))+x528+(((-1.0)*x516*x524))+(((-1.0)*x512*x520))+((x514*x524))+(((1.67469665547385e-6)*x512))+(((-0.0669878662189539)*x524)));
evalcond[3]=((1.67469665547385e-6)+(((1.86602426756209)*x513*x515))+(((-1.0)*x503*x516))+(((1.00000393597934)*x510*x513*x515))+(((-1.73204853512418)*x501*x513*x515))+(((-1.0)*x504*x514))+((x503*x514))+((x504*x516))+((x516*x525))+(((0.933012133781046)*x523))+(((-1.0)*x520))+(((-1.0)*x522))+(((-0.933012133781046)*x504))+(((-1.0)*x515*x521))+(((-0.0669878662189539)*x503))+x528+x517+(((-1.0)*x510*x511*x515))+(((-1.0)*x516*x523))+((x514*x523))+(((-0.933012133781046)*x525))+((x509*x515))+(((-1.0)*x514*x525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x529=(((cj6*py))+(((-1.0)*px*sj6)));
IkReal x530=((-0.005)+(((-1.0)*sj7*((((cj6*px))+((py*sj6))))))+(((-1.0)*cj7*pz)));
soleval[0]=((((-0.258820142606703)*cj8*x530))+(((-0.965925532213041)*sj8*x530))+(((-0.258820142606703)*sj8*x529))+(((0.965925532213041)*cj8*x529)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[2];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal x531=cj8*cj8;
IkReal x532=((200.0)*pz);
IkReal x533=(cj8*pz);
IkReal x534=(px*sj8);
IkReal x535=(px*x531);
j6eval[0]=((((-400.0)*pz*x535))+(((-1.0)*px))+((px*x532))+(((2.0)*x535))+(((3.46408343568754)*cj8*x534))+(((-692.816687137509)*x533*x534)));
j6eval[1]=((((-3.73203384591608)*cj8))+sj8+(((746.406769183216)*x533))+(((-1.0)*sj8*x532)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal x536=pz*pz;
IkReal x537=cj8*cj8;
IkReal x538=(cj8*sj8);
j6eval[0]=((((-1.0)*cj8*px))+(((-3.73203384591608)*px*sj8)));
j6eval[1]=((1.0)+(((-40000.0)*x536))+(((-517123.065082527)*x536*x537))+(((-7.46406769183216)*x538))+(((298562.707673286)*x536*x538))+(((12.9280766270632)*x537)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x541 = px*px;
if(IKabs(x541)==0){
continue;
}
IkReal x539=pow(x541,-0.5);
IkReal x540=(px*x539);
CheckValue<IkReal> x542 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(((-3.73203384591608)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x542.valid){
continue;
}
IkReal gconst50=((-1.0)*(x542.value));
IkReal gconst51=((0.258820142606703)*x540);
IkReal gconst52=((-0.965925532213041)*x540);
CheckValue<IkReal> x543 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(((-3.73203384591608)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x543.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x543.value)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
IkReal x544=((-1.0)*px);
IkReal x545=x539;
IkReal x546=(px*x545);
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj8=gconst51;
cj8=gconst52;
CheckValue<IkReal> x547 = IKatan2WithCheck(IkReal(x544),IkReal(((-3.73203385)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x547.valid){
continue;
}
j8=((-1.0)*(x547.value));
CheckValue<IkReal> x548 = IKatan2WithCheck(IkReal(x544),IkReal(((-3.73203384591608)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x548.valid){
continue;
}
IkReal gconst50=((-1.0)*(x548.value));
IkReal gconst51=((0.258820142606703)*x546);
IkReal gconst52=((-0.965925532213041)*x546);
CheckValue<IkReal> x551=IKPowWithIntegerCheck(px,-2);
if(!x551.valid){
continue;
}
if((x551.value) < -0.00001)
continue;
IkReal x549=IKsqrt(x551.value);
IkReal x550=(px*x549);
j6eval[0]=((((3.86368692146027)*x550))+(((-772.737384292055)*pz*x550)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j6]

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x554=IKPowWithIntegerCheck(((((-0.0048296276610652)*gconst52))+(((0.00129410071303351)*gconst51))+(((-0.258820142606703)*gconst51*pz))+(((0.965925532213041)*gconst52*pz))),-1);
if(!x554.valid){
continue;
}
IkReal x552=x554.value;
IkReal x553=(py*x552);
cj6array[0]=((((-0.258820142606703)*gconst52*x553))+(((-0.965925532213041)*gconst51*x553)));
if( cj6array[0] >= -1-IKFAST_SINCOS_THRESH && cj6array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKacos(cj6array[0]);
    sj6array[0] = IKsin(j6array[0]);
    cj6array[1] = cj6array[0];
    j6array[1] = -j6array[0];
    sj6array[1] = -sj6array[0];
}
else if( isnan(cj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x555=IKcos(j6);
IkReal x556=IKsin(j6);
IkReal x557=gconst52*gconst52;
IkReal x558=pz*pz;
IkReal x559=py*py;
IkReal x560=px*px;
IkReal x561=(gconst51*pz);
IkReal x562=((1.73204853512418)*gconst52);
IkReal x563=((0.258820142606703)*gconst52);
IkReal x564=((0.500001967989669)*pz);
IkReal x565=(gconst51*gconst52);
IkReal x566=((0.965925532213041)*gconst51);
IkReal x567=x555*x555;
IkReal x568=((0.500001967989669)*x565);
IkReal x569=(py*x555);
IkReal x570=(px*x556);
IkReal x571=((0.0669878662189539)*x558);
IkReal x572=((2.16506066890523e-5)*x557);
IkReal x573=((0.866024267562092)*x557);
IkReal x574=((1.00000393597934)*pz*x557);
IkReal x575=(x564*x569);
IkReal x576=(x559*x567);
IkReal x577=(x560*x567);
IkReal x578=(x567*x573);
IkReal x579=(x569*x574);
IkReal x580=(x561*x562*x569);
IkReal x581=(x579+x580);
evalcond[0]=(((x566*x569))+(((-1.0)*x566*x570))+(((-0.258820142606703)*x561))+((x563*x569))+(((-1.0)*x563*x570))+(((-0.0048296276610652)*gconst52))+(((0.00129410071303351)*gconst51))+(((0.965925532213041)*gconst52*pz)));
evalcond[1]=(((x559*x573))+(((-1.25000491997417e-5)*x565*x567))+((x558*x567*x568))+((x567*x572))+(((1.67469665547385e-6)*x567))+(((-1.0)*x558*x578))+(((-1.0)*x559*x568))+x575+(((-1.0)*x567*x571))+(((-0.933012133781046)*x559))+(((-1.0)*x581)));
evalcond[2]=((1.67469665547385e-6)+(((-0.933012133781046)*x576))+((x558*x568))+((x560*x573))+((x561*x562*x570))+(((-0.933012133781046)*x560))+(((-1.0)*x573*x577))+(((-1.73204853512418)*x557*x569*x570))+((x573*x576))+(((-1.0)*x558*x573))+(((1.00000393597934)*x565*x569*x570))+(((-1.0)*x564*x570))+(((-1.0)*x571))+(((-1.0)*x560*x568))+x575+x572+(((0.933012133781046)*x577))+(((-1.25000491997417e-5)*x565))+((x568*x577))+(((-1.0)*x568*x576))+(((-1.0)*x581))+(((1.86602426756209)*x569*x570))+((x570*x574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x582=(((cj6*py))+(((-1.0)*px*sj6)));
IkReal x583=((-0.005)+(((-1.0)*sj7*((((cj6*px))+((py*sj6))))))+(((-1.0)*cj7*pz)));
soleval[0]=((((-0.965925532213041)*sj8*x583))+(((-0.258820142606703)*cj8*x583))+(((0.965925532213041)*cj8*x582))+(((-0.258820142606703)*sj8*x582)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x586 = px*px;
if(IKabs(x586)==0){
continue;
}
IkReal x584=pow(x586,-0.5);
IkReal x585=(px*x584);
CheckValue<IkReal> x587 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(((-3.73203384591608)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x587.valid){
continue;
}
IkReal gconst53=((3.14159265358979)+(((-1.0)*(x587.value))));
IkReal gconst54=((-0.258820142606703)*x585);
IkReal gconst55=((0.965925532213041)*x585);
CheckValue<IkReal> x588 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(((-3.73203384591608)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x588.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x588.value)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
IkReal x589=((-1.0)*px);
IkReal x590=x584;
IkReal x591=(px*x590);
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj8=gconst54;
cj8=gconst55;
CheckValue<IkReal> x592 = IKatan2WithCheck(IkReal(x589),IkReal(((-3.73203385)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x592.valid){
continue;
}
j8=((3.14159265)+(((-1.0)*(x592.value))));
CheckValue<IkReal> x593 = IKatan2WithCheck(IkReal(x589),IkReal(((-3.73203384591608)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x593.valid){
continue;
}
IkReal gconst53=((3.14159265358979)+(((-1.0)*(x593.value))));
IkReal gconst54=((-0.258820142606703)*x591);
IkReal gconst55=((0.965925532213041)*x591);
CheckValue<IkReal> x596=IKPowWithIntegerCheck(px,-2);
if(!x596.valid){
continue;
}
if((x596.value) < -0.00001)
continue;
IkReal x594=IKsqrt(x596.value);
IkReal x595=(px*x594);
j6eval[0]=((((-3.86368692146027)*x595))+(((772.737384292055)*pz*x595)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j6]

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x599=IKPowWithIntegerCheck(((((0.965925532213041)*gconst55*pz))+(((-0.258820142606703)*gconst54*pz))+(((-0.0048296276610652)*gconst55))+(((0.00129410071303351)*gconst54))),-1);
if(!x599.valid){
continue;
}
IkReal x597=x599.value;
IkReal x598=(py*x597);
cj6array[0]=((((-0.258820142606703)*gconst55*x598))+(((-0.965925532213041)*gconst54*x598)));
if( cj6array[0] >= -1-IKFAST_SINCOS_THRESH && cj6array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKacos(cj6array[0]);
    sj6array[0] = IKsin(j6array[0]);
    cj6array[1] = cj6array[0];
    j6array[1] = -j6array[0];
    sj6array[1] = -sj6array[0];
}
else if( isnan(cj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x600=IKcos(j6);
IkReal x601=IKsin(j6);
IkReal x602=gconst55*gconst55;
IkReal x603=pz*pz;
IkReal x604=py*py;
IkReal x605=px*px;
IkReal x606=(gconst54*gconst55);
IkReal x607=((0.965925532213041)*gconst54);
IkReal x608=((0.258820142606703)*gconst55);
IkReal x609=x600*x600;
IkReal x610=((2.16506066890523e-5)*x602);
IkReal x611=((0.0669878662189539)*x603);
IkReal x612=(px*x601);
IkReal x613=((1.00000393597934)*x602);
IkReal x614=(py*x600);
IkReal x615=((0.933012133781046)*x609);
IkReal x616=(pz*x614);
IkReal x617=((0.500001967989669)*x616);
IkReal x618=((0.866024267562092)*x602*x604);
IkReal x619=((0.866024267562092)*x602*x603);
IkReal x620=((0.866024267562092)*x602*x605);
IkReal x621=(x612*x614);
IkReal x622=((0.500001967989669)*x606*x609);
IkReal x623=(x613*x616);
IkReal x624=((1.73204853512418)*x606*x616);
IkReal x625=(x624+x623);
evalcond[0]=(((x608*x614))+(((0.965925532213041)*gconst55*pz))+(((-0.258820142606703)*gconst54*pz))+(((-0.0048296276610652)*gconst55))+(((-1.0)*x607*x612))+(((0.00129410071303351)*gconst54))+((x607*x614))+(((-1.0)*x608*x612)));
evalcond[1]=(((x603*x622))+(((-1.0)*x609*x611))+(((-1.0)*x609*x619))+(((-1.0)*x625))+(((-0.933012133781046)*x604))+(((-0.500001967989669)*x604*x606))+(((-1.25000491997417e-5)*x606*x609))+x618+x617+((x609*x610))+(((1.67469665547385e-6)*x609)));
evalcond[2]=((1.67469665547385e-6)+(((-1.0)*x604*x622))+(((1.00000393597934)*x606*x621))+(((0.500001967989669)*x603*x606))+((x605*x615))+((pz*x612*x613))+(((-1.25000491997417e-5)*x606))+(((1.86602426756209)*x621))+(((-0.500001967989669)*pz*x612))+(((-1.0)*x625))+(((-1.0)*x604*x615))+((x605*x622))+(((-0.933012133781046)*x605))+(((-1.0)*x611))+(((-1.0)*x619))+x617+x610+x620+((x609*x618))+(((-0.500001967989669)*x605*x606))+(((-1.0)*x609*x620))+(((-1.73204853512418)*x602*x621))+(((1.73204853512418)*pz*x606*x612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x626=(((cj6*py))+(((-1.0)*px*sj6)));
IkReal x627=((-0.005)+(((-1.0)*sj7*((((cj6*px))+((py*sj6))))))+(((-1.0)*cj7*pz)));
soleval[0]=((((0.965925532213041)*cj8*x626))+(((-0.965925532213041)*sj8*x627))+(((-0.258820142606703)*cj8*x627))+(((-0.258820142606703)*sj8*x626)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x628=((1.0)+(((-200.0)*pz)));
IkReal x629=((-3.73203384591608)+(((746.406769183216)*pz)));
IkReal x631 = ((x629*x629)+(x628*x628));
if(IKabs(x631)==0){
continue;
}
IkReal x630=pow(x631,-0.5);
CheckValue<IkReal> x632 = IKatan2WithCheck(IkReal(x629),IkReal(x628),IKFAST_ATAN2_MAGTHRESH);
if(!x632.valid){
continue;
}
IkReal gconst56=((-1.0)*(x632.value));
IkReal gconst57=((-1.0)*x629*x630);
IkReal gconst58=(x628*x630);
IkReal x633=j8;
CheckValue<IkReal> x636 = IKatan2WithCheck(IkReal(((-3.73203384591608)+(((746.406769183216)*pz)))),IkReal(((1.0)+(((-200.0)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x636.valid){
continue;
}
IkReal x634=x636.value;
IkReal x635=x634;
if(((((x634*x635))+((j8*x633))+((j8*x635))+((x633*x634)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((x634*x635))+((j8*x633))+((j8*x635))+((x633*x634)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x637=IKPowWithIntegerCheck(((((-0.258820142606703)*gconst58*px))+(((-0.965925532213041)*gconst57*px))),-1);
if(!x637.valid){
continue;
}
CheckValue<IkReal> x638=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x638.valid){
continue;
}
if((((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x639=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x639.valid){
continue;
}
CheckValue<IkReal> x640=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x640.valid){
continue;
}
CheckValue<IkReal> x641=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x641.valid){
continue;
}
CheckValue<IkReal> x642=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x642.valid){
continue;
}
CheckValue<IkReal> x643=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x643.valid){
continue;
}
if((((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x644=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x644.valid){
continue;
}
CheckValue<IkReal> x645=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x645.valid){
continue;
}
if((((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x646=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x646.valid){
continue;
}
CheckValue<IkReal> x647=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x647.valid){
continue;
}
CheckValue<IkReal> x648=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x648.valid){
continue;
}
if( IKabs(((x637.value)*(((((-0.48296276610652)*gconst57*py*(x638.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))))))+(((0.064705290329359)*gconst58*pz*(py*py)*(x639.value)))+(((-0.707109191469274)*gconst57*pz*(gconst58*gconst58)*(py*py)*(x640.value)))+(((-0.836514951554323)*gconst58*pz*(gconst57*gconst57)*(py*py)*(x641.value)))+(((0.241482333518994)*gconst57*pz*(py*py)*(x642.value)))+(((-0.00129410071303351)*gconst57))+(((0.258820142606703)*gconst57*pz))+(((-0.965925532213041)*gconst58*pz))+(((0.0048296276610652)*gconst58))+(((-0.129410071303351)*gconst58*py*(x643.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))))))+(((-0.129410580658718)*pz*(gconst58*gconst58*gconst58)*(py*py)*(x644.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.5)*(x645.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))))))+(((0.866024267562092)*gconst57*gconst58*py*pz*(x646.value)))+(((-0.250000983994834)*py*pz*(x647.value)))+(((0.500001967989669)*py*pz*(gconst58*gconst58)*(x648.value))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x637.value)*(((((-0.48296276610652)*gconst57*py*(x638.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))))))+(((0.064705290329359)*gconst58*pz*(py*py)*(x639.value)))+(((-0.707109191469274)*gconst57*pz*(gconst58*gconst58)*(py*py)*(x640.value)))+(((-0.836514951554323)*gconst58*pz*(gconst57*gconst57)*(py*py)*(x641.value)))+(((0.241482333518994)*gconst57*pz*(py*py)*(x642.value)))+(((-0.00129410071303351)*gconst57))+(((0.258820142606703)*gconst57*pz))+(((-0.965925532213041)*gconst58*pz))+(((0.0048296276610652)*gconst58))+(((-0.129410071303351)*gconst58*py*(x643.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))))))+(((-0.129410580658718)*pz*(gconst58*gconst58*gconst58)*(py*py)*(x644.value)))))))+IKsqr(((((0.5)*(x645.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))))))+(((0.866024267562092)*gconst57*gconst58*py*pz*(x646.value)))+(((-0.250000983994834)*py*pz*(x647.value)))+(((0.500001967989669)*py*pz*(gconst58*gconst58)*(x648.value)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((x637.value)*(((((-0.48296276610652)*gconst57*py*(x638.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))))))+(((0.064705290329359)*gconst58*pz*(py*py)*(x639.value)))+(((-0.707109191469274)*gconst57*pz*(gconst58*gconst58)*(py*py)*(x640.value)))+(((-0.836514951554323)*gconst58*pz*(gconst57*gconst57)*(py*py)*(x641.value)))+(((0.241482333518994)*gconst57*pz*(py*py)*(x642.value)))+(((-0.00129410071303351)*gconst57))+(((0.258820142606703)*gconst57*pz))+(((-0.965925532213041)*gconst58*pz))+(((0.0048296276610652)*gconst58))+(((-0.129410071303351)*gconst58*py*(x643.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))))))+(((-0.129410580658718)*pz*(gconst58*gconst58*gconst58)*(py*py)*(x644.value)))))), ((((0.5)*(x645.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))))))+(((0.866024267562092)*gconst57*gconst58*py*pz*(x646.value)))+(((-0.250000983994834)*py*pz*(x647.value)))+(((0.500001967989669)*py*pz*(gconst58*gconst58)*(x648.value)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
CheckValue<IkReal> x649=IKPowWithIntegerCheck(((((-0.258820142606703)*gconst58*px))+(((-0.965925532213041)*gconst57*px))),-1);
if(!x649.valid){
continue;
}
CheckValue<IkReal> x650=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x650.valid){
continue;
}
CheckValue<IkReal> x651=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x651.valid){
continue;
}
CheckValue<IkReal> x652=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x652.valid){
continue;
}
CheckValue<IkReal> x653=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x653.valid){
continue;
}
CheckValue<IkReal> x654=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x654.valid){
continue;
}
CheckValue<IkReal> x655=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x655.valid){
continue;
}
if((((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x656=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x656.valid){
continue;
}
if((((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x657=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x657.valid){
continue;
}
if((((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x658=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x658.valid){
continue;
}
CheckValue<IkReal> x659=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x659.valid){
continue;
}
CheckValue<IkReal> x660=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x660.valid){
continue;
}
if( IKabs(((x649.value)*(((((0.064705290329359)*gconst58*pz*(py*py)*(x650.value)))+(((-0.707109191469274)*gconst57*pz*(gconst58*gconst58)*(py*py)*(x651.value)))+(((-0.836514951554323)*gconst58*pz*(gconst57*gconst57)*(py*py)*(x652.value)))+(((0.241482333518994)*gconst57*pz*(py*py)*(x653.value)))+(((-0.00129410071303351)*gconst57))+(((0.258820142606703)*gconst57*pz))+(((-0.965925532213041)*gconst58*pz))+(((0.0048296276610652)*gconst58))+(((-0.129410580658718)*pz*(gconst58*gconst58*gconst58)*(py*py)*(x654.value)))+(((0.129410071303351)*gconst58*py*(x655.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))))))+(((0.48296276610652)*gconst57*py*(x656.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)))))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.5)*(x657.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))))))+(((0.866024267562092)*gconst57*gconst58*py*pz*(x658.value)))+(((-0.250000983994834)*py*pz*(x659.value)))+(((0.500001967989669)*py*pz*(gconst58*gconst58)*(x660.value))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x649.value)*(((((0.064705290329359)*gconst58*pz*(py*py)*(x650.value)))+(((-0.707109191469274)*gconst57*pz*(gconst58*gconst58)*(py*py)*(x651.value)))+(((-0.836514951554323)*gconst58*pz*(gconst57*gconst57)*(py*py)*(x652.value)))+(((0.241482333518994)*gconst57*pz*(py*py)*(x653.value)))+(((-0.00129410071303351)*gconst57))+(((0.258820142606703)*gconst57*pz))+(((-0.965925532213041)*gconst58*pz))+(((0.0048296276610652)*gconst58))+(((-0.129410580658718)*pz*(gconst58*gconst58*gconst58)*(py*py)*(x654.value)))+(((0.129410071303351)*gconst58*py*(x655.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))))))+(((0.48296276610652)*gconst57*py*(x656.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))))))))))+IKsqr(((((-0.5)*(x657.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))))))+(((0.866024267562092)*gconst57*gconst58*py*pz*(x658.value)))+(((-0.250000983994834)*py*pz*(x659.value)))+(((0.500001967989669)*py*pz*(gconst58*gconst58)*(x660.value)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[1]=IKatan2(((x649.value)*(((((0.064705290329359)*gconst58*pz*(py*py)*(x650.value)))+(((-0.707109191469274)*gconst57*pz*(gconst58*gconst58)*(py*py)*(x651.value)))+(((-0.836514951554323)*gconst58*pz*(gconst57*gconst57)*(py*py)*(x652.value)))+(((0.241482333518994)*gconst57*pz*(py*py)*(x653.value)))+(((-0.00129410071303351)*gconst57))+(((0.258820142606703)*gconst57*pz))+(((-0.965925532213041)*gconst58*pz))+(((0.0048296276610652)*gconst58))+(((-0.129410580658718)*pz*(gconst58*gconst58*gconst58)*(py*py)*(x654.value)))+(((0.129410071303351)*gconst58*py*(x655.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))))))+(((0.48296276610652)*gconst57*py*(x656.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))))))))), ((((-0.5)*(x657.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))))))+(((0.866024267562092)*gconst57*gconst58*py*pz*(x658.value)))+(((-0.250000983994834)*py*pz*(x659.value)))+(((0.500001967989669)*py*pz*(gconst58*gconst58)*(x660.value)))));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x661=IKcos(j6);
IkReal x662=IKsin(j6);
IkReal x663=gconst58*gconst58;
IkReal x664=py*py;
IkReal x665=pz*pz;
IkReal x666=px*px;
IkReal x667=((0.965925532213041)*pz);
IkReal x668=(gconst57*pz);
IkReal x669=((0.258820142606703)*gconst58);
IkReal x670=(gconst57*gconst58);
IkReal x671=((0.00129410071303351)*gconst57);
IkReal x672=((0.965925532213041)*gconst57);
IkReal x673=((0.500001967989669)*pz);
IkReal x674=((1.73204853512418)*gconst58);
IkReal x675=x661*x661;
IkReal x676=(py*x661);
IkReal x677=(px*x662);
IkReal x678=((2.16506066890523e-5)*x663);
IkReal x679=((0.866024267562092)*x663);
IkReal x680=(gconst58*x661);
IkReal x681=((0.500001967989669)*x666);
IkReal x682=((0.933012133781046)*x666);
IkReal x683=((1.00000393597934)*pz*x663);
IkReal x684=(x673*x676);
IkReal x685=(x665*x675);
IkReal x686=(x664*x675);
IkReal x687=(x668*x674*x676);
IkReal x688=(x676*x683);
IkReal x689=(x688+x687);
evalcond[0]=(((py*x672))+((x661*x671))+((x667*x680))+((py*x669))+(((-0.0048296276610652)*x680))+(((-0.258820142606703)*x661*x668)));
evalcond[1]=(((x672*x676))+(((-0.258820142606703)*x668))+((x669*x676))+((gconst58*x667))+(((-0.0048296276610652)*gconst58))+(((-1.0)*x669*x677))+x671+(((-1.0)*x672*x677)));
evalcond[2]=((((-1.25000491997417e-5)*x670*x675))+(((-1.0)*x689))+(((1.67469665547385e-6)*x675))+((x664*x679))+(((-1.0)*x679*x685))+(((0.500001967989669)*x670*x685))+(((-0.0669878662189539)*x685))+x684+(((-0.933012133781046)*x664))+(((-0.500001967989669)*x664*x670))+((x675*x678)));
evalcond[3]=((1.67469665547385e-6)+(((-1.25000491997417e-5)*x670))+(((-0.500001967989669)*x670*x686))+(((-1.0)*x670*x681))+(((1.00000393597934)*x670*x676*x677))+(((-1.0)*x666*x675*x679))+(((-0.0669878662189539)*x665))+(((-1.0)*x689))+(((-1.0)*x682))+(((-0.933012133781046)*x686))+((x670*x675*x681))+(((1.86602426756209)*x676*x677))+((x668*x674*x677))+((x677*x683))+(((-1.0)*x665*x679))+((x666*x679))+((x679*x686))+x678+x684+(((0.500001967989669)*x665*x670))+(((-1.73204853512418)*x663*x676*x677))+((x675*x682))+(((-1.0)*x673*x677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x690=(((cj6*py))+(((-1.0)*px*sj6)));
IkReal x691=((-0.005)+(((-1.0)*sj7*((((cj6*px))+((py*sj6))))))+(((-1.0)*cj7*pz)));
soleval[0]=((((-0.258820142606703)*sj8*x690))+(((-0.258820142606703)*cj8*x691))+(((0.965925532213041)*cj8*x690))+(((-0.965925532213041)*sj8*x691)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x692=((1.0)+(((-200.0)*pz)));
IkReal x693=((-3.73203384591608)+(((746.406769183216)*pz)));
IkReal x695 = ((x692*x692)+(x693*x693));
if(IKabs(x695)==0){
continue;
}
IkReal x694=pow(x695,-0.5);
CheckValue<IkReal> x696 = IKatan2WithCheck(IkReal(x693),IkReal(x692),IKFAST_ATAN2_MAGTHRESH);
if(!x696.valid){
continue;
}
IkReal gconst59=((3.14159265358979)+(((-1.0)*(x696.value))));
IkReal gconst60=((1.0)*x693*x694);
IkReal gconst61=((-1.0)*x692*x694);
IkReal x697=j8;
CheckValue<IkReal> x700 = IKatan2WithCheck(IkReal(((-3.73203384591608)+(((746.406769183216)*pz)))),IkReal(((1.0)+(((-200.0)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x700.valid){
continue;
}
IkReal x698=x700.value;
IkReal x699=x698;
if((((9.86960440108936)+((x697*x698))+((j8*x699))+((j8*x697))+(((-3.14159265358979)*j8))+(((-3.14159265358979)*x697))+(((-3.14159265358979)*x698))+(((-3.14159265358979)*x699))+((x698*x699)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+((x697*x698))+((j8*x699))+((j8*x697))+(((-3.14159265358979)*j8))+(((-3.14159265358979)*x697))+(((-3.14159265358979)*x698))+(((-3.14159265358979)*x699))+((x698*x699)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x701=py*py;
IkReal x702=gconst61*gconst61;
IkReal x703=gconst60*gconst60;
IkReal x704=pz*pz;
IkReal x705=(gconst60*gconst61);
IkReal x706=((0.250000983994834)*pz);
IkReal x707=(px*x702);
IkReal x708=(px*x703);
CheckValue<IkReal> x709=IKPowWithIntegerCheck(((((0.00433012133781046)*px*x705))+(((-1.0)*x706*x707))+((x706*x708))+(((0.00125000491997417)*x707))+(((-0.00125000491997417)*x708))+(((-0.866024267562092)*px*pz*x705))),-1);
if(!x709.valid){
continue;
}
CheckValue<IkReal> x710=IKPowWithIntegerCheck(((((-0.258820142606703)*gconst60*pz))+(((-0.0048296276610652)*gconst61))+(((0.00129410071303351)*gconst60))+(((0.965925532213041)*gconst61*pz))),-1);
if(!x710.valid){
continue;
}
if( IKabs(((x709.value)*(((((-0.00500001967989669)*pz*x705))+(((0.500001967989669)*x704*x705))+(((0.500001967989669)*x701*x705))+(((0.00933012133781046)*pz*x702))+(((0.0669878662189539)*x701*x702))+(((0.000669878662189539)*pz*x703))+(((0.933012133781046)*x701*x703))+(((-0.0669878662189539)*x703*x704))+(((1.25000491997417e-5)*x705))+(((-0.933012133781046)*x702*x704))+(((-2.33253033445262e-5)*x702))+(((-1.67469665547385e-6)*x703)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x710.value)*(((((-0.258820142606703)*gconst61*py))+(((-0.965925532213041)*gconst60*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x709.value)*(((((-0.00500001967989669)*pz*x705))+(((0.500001967989669)*x704*x705))+(((0.500001967989669)*x701*x705))+(((0.00933012133781046)*pz*x702))+(((0.0669878662189539)*x701*x702))+(((0.000669878662189539)*pz*x703))+(((0.933012133781046)*x701*x703))+(((-0.0669878662189539)*x703*x704))+(((1.25000491997417e-5)*x705))+(((-0.933012133781046)*x702*x704))+(((-2.33253033445262e-5)*x702))+(((-1.67469665547385e-6)*x703))))))+IKsqr(((x710.value)*(((((-0.258820142606703)*gconst61*py))+(((-0.965925532213041)*gconst60*py))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((x709.value)*(((((-0.00500001967989669)*pz*x705))+(((0.500001967989669)*x704*x705))+(((0.500001967989669)*x701*x705))+(((0.00933012133781046)*pz*x702))+(((0.0669878662189539)*x701*x702))+(((0.000669878662189539)*pz*x703))+(((0.933012133781046)*x701*x703))+(((-0.0669878662189539)*x703*x704))+(((1.25000491997417e-5)*x705))+(((-0.933012133781046)*x702*x704))+(((-2.33253033445262e-5)*x702))+(((-1.67469665547385e-6)*x703))))), ((x710.value)*(((((-0.258820142606703)*gconst61*py))+(((-0.965925532213041)*gconst60*py))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x711=IKcos(j6);
IkReal x712=IKsin(j6);
IkReal x713=gconst61*gconst61;
IkReal x714=pz*pz;
IkReal x715=py*py;
IkReal x716=px*px;
IkReal x717=(gconst60*gconst61);
IkReal x718=((0.965925532213041)*gconst61);
IkReal x719=((0.0048296276610652)*gconst61);
IkReal x720=((0.258820142606703)*gconst60);
IkReal x721=((0.965925532213041)*gconst60);
IkReal x722=((0.00129410071303351)*gconst60);
IkReal x723=x711*x711;
IkReal x724=(pz*x711);
IkReal x725=((0.258820142606703)*gconst61*py);
IkReal x726=((0.500001967989669)*x716);
IkReal x727=(px*x712);
IkReal x728=((1.00000393597934)*x713);
IkReal x729=((0.866024267562092)*x716);
IkReal x730=((0.866024267562092)*x713);
IkReal x731=((0.500001967989669)*x715);
IkReal x732=((0.933012133781046)*x723);
IkReal x733=((0.500001967989669)*py*x724);
IkReal x734=(x714*x723);
IkReal x735=(x713*x723);
IkReal x736=(py*x711*x727);
IkReal x737=((1.73204853512418)*py*x717*x724);
IkReal x738=(py*x724*x728);
IkReal x739=(x737+x738);
evalcond[0]=((((-1.0)*x711*x719))+((x711*x722))+((x718*x724))+((py*x721))+(((-1.0)*x720*x724))+x725);
evalcond[1]=((((-0.258820142606703)*gconst61*x727))+((x711*x725))+((py*x711*x721))+(((-1.0)*x719))+(((-1.0)*x721*x727))+x722+((pz*x718))+(((-1.0)*pz*x720)));
evalcond[2]=((((1.67469665547385e-6)*x723))+(((-1.0)*x717*x731))+(((0.500001967989669)*x717*x734))+(((-0.933012133781046)*x715))+(((-1.0)*x739))+(((2.16506066890523e-5)*x735))+(((-1.0)*x730*x734))+x733+(((-1.25000491997417e-5)*x717*x723))+((x715*x730))+(((-0.0669878662189539)*x734)));
evalcond[3]=((1.67469665547385e-6)+(((1.00000393597934)*x717*x736))+((x713*x729))+((x717*x723*x726))+((pz*x727*x728))+((x715*x723*x730))+(((-1.0)*x717*x723*x731))+(((-1.0)*x717*x726))+(((1.86602426756209)*x736))+(((-0.933012133781046)*x716))+(((-1.0)*x739))+(((2.16506066890523e-5)*x713))+(((1.73204853512418)*pz*x717*x727))+(((0.500001967989669)*x714*x717))+(((-0.500001967989669)*pz*x727))+(((-1.0)*x715*x732))+(((-1.0)*x714*x730))+x733+(((-1.25000491997417e-5)*x717))+((x716*x732))+(((-1.73204853512418)*x713*x736))+(((-0.0669878662189539)*x714))+(((-1.0)*x729*x735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x740=(((cj6*py))+(((-1.0)*px*sj6)));
IkReal x741=((-0.005)+(((-1.0)*sj7*((((cj6*px))+((py*sj6))))))+(((-1.0)*cj7*pz)));
soleval[0]=((((-0.258820142606703)*sj8*x740))+(((-0.258820142606703)*cj8*x741))+(((-0.965925532213041)*sj8*x741))+(((0.965925532213041)*cj8*x740)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(px);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
px=0;
pp=((py*py)+(pz*pz));
j6eval[0]=((((-3.73203384591608)*cj8))+sj8+(((746.406769183216)*cj8*pz))+(((-200.0)*pz*sj8)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
px=0;
pp=((py*py)+(pz*pz));
j6eval[0]=(((cj8*py))+(((3.73203384591608)*py*sj8)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
px=0;
pp=((py*py)+(pz*pz));
IkReal x742=py*py;
j6eval[0]=((((-1.86601692295804)*x742))+(((-1.0)*cj8*sj8*x742))+(((1.73204171784377)*x742*(cj8*cj8))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(py);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[4], cj6array[4], sj6array[4];
bool j6valid[4]={false};
_nj6 = 4;
j6array[0]=0;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=1.5707963267949;
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
j6array[2]=3.14159265358979;
sj6array[2]=IKsin(j6array[2]);
cj6array[2]=IKcos(j6array[2]);
j6array[3]=-1.5707963267949;
sj6array[3]=IKsin(j6array[3]);
cj6array[3]=IKcos(j6array[3]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
if( j6array[2] > IKPI )
{
    j6array[2]-=IK2PI;
}
else if( j6array[2] < -IKPI )
{    j6array[2]+=IK2PI;
}
j6valid[2] = true;
if( j6array[3] > IKPI )
{
    j6array[3]-=IK2PI;
}
else if( j6array[3] < -IKPI )
{    j6array[3]+=IK2PI;
}
j6valid[3] = true;
for(int ij6 = 0; ij6 < 4; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 4; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

IkReal soleval[1];
IkReal x743=(((cj6*py))+(((-1.0)*px*sj6)));
IkReal x744=((-0.005)+(((-1.0)*sj7*((((cj6*px))+((py*sj6))))))+(((-1.0)*cj7*pz)));
soleval[0]=((((-0.258820142606703)*sj8*x743))+(((-0.258820142606703)*cj8*x744))+(((-0.965925532213041)*sj8*x744))+(((0.965925532213041)*cj8*x743)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j6array[4], cj6array[4], sj6array[4];
bool j6valid[4]={false};
_nj6 = 4;
IkReal x745=cj8*cj8;
IkReal x746=py*py;
IkReal x747=((4.99996064012917e-5)*x746);
IkReal x748=(cj8*sj8*x746);
CheckValue<IkReal> x756=IKPowWithIntegerCheck(((((-0.500001967989669)*x748))+(((0.866024267562092)*x745*x746))+(((-0.933012133781046)*x746))),-1);
if(!x756.valid){
continue;
}
IkReal x749=x756.value;
IkReal x750=(py*pz*x749);
IkReal x751=((0.250000983994834)*x750);
IkReal x752=((0.500001967989669)*x745*x750);
IkReal x753=((0.866024267562092)*cj8*sj8*x750);
IkReal x754=(x753+x752);
if(((((x745*x747))+(((-4.33013838107857e-5)*x748))+(((8.66027676215715e-5)*x748*(cj8*cj8)))+(((6.25004919983854e-6)*x746))+(((-1.0)*x747*(x745*x745))))) < -0.00001)
continue;
IkReal x755=((0.5)*x749*(IKsqrt((((x745*x747))+(((-4.33013838107857e-5)*x748))+(((8.66027676215715e-5)*x748*(cj8*cj8)))+(((6.25004919983854e-6)*x746))+(((-1.0)*x747*(x745*x745)))))));
cj6array[0]=(x755+x754+(((-1.0)*x751)));
cj6array[2]=(x754+(((-1.0)*x751))+(((-1.0)*x755)));
if( cj6array[0] >= -1-IKFAST_SINCOS_THRESH && cj6array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKacos(cj6array[0]);
    sj6array[0] = IKsin(j6array[0]);
    cj6array[1] = cj6array[0];
    j6array[1] = -j6array[0];
    sj6array[1] = -sj6array[0];
}
else if( isnan(cj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
if( cj6array[2] >= -1-IKFAST_SINCOS_THRESH && cj6array[2] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[2] = j6valid[3] = true;
    j6array[2] = IKacos(cj6array[2]);
    sj6array[2] = IKsin(j6array[2]);
    cj6array[3] = cj6array[2];
    j6array[3] = -j6array[2];
    sj6array[3] = -sj6array[2];
}
else if( isnan(cj6array[2]) )
{
    // probably any value will work
    j6valid[2] = true;
    cj6array[2] = 1; sj6array[2] = 0; j6array[2] = 0;
}
for(int ij6 = 0; ij6 < 4; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 4; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x757=IKcos(j6);
IkReal x758=cj8*cj8;
IkReal x759=py*py;
IkReal x760=pz*pz;
IkReal x761=((0.965925532213041)*py);
IkReal x762=((0.0048296276610652)*cj8);
IkReal x763=((0.258820142606703)*pz);
IkReal x764=x757*x757;
IkReal x765=(sj8*x757);
IkReal x766=((0.500001967989669)*cj8*sj8);
IkReal x767=((0.965925532213041)*cj8*pz);
IkReal x768=((0.258820142606703)*cj8*py);
IkReal x769=(py*pz*x757);
IkReal x770=(x758*x764);
IkReal x771=(x760*x764);
evalcond[0]=(((x757*x768))+(((0.00129410071303351)*sj8))+(((-1.0)*sj8*x763))+(((-1.0)*x762))+((x761*x765))+x767);
evalcond[1]=(((x757*x767))+(((-1.0)*x763*x765))+((sj8*x761))+(((-1.0)*x757*x762))+x768+(((0.00129410071303351)*x765)));
evalcond[2]=((((-1.25000491997417e-5)*cj8*sj8*x764))+(((-0.0669878662189539)*x771))+(((-1.73204853512418)*cj8*py*pz*x765))+(((-0.866024267562092)*x760*x770))+(((1.67469665547385e-6)*x764))+((x766*x771))+(((0.500001967989669)*x769))+(((-1.00000393597934)*x758*x769))+(((0.866024267562092)*x758*x759))+(((-0.933012133781046)*x759))+(((2.16506066890523e-5)*x770))+(((-1.0)*x759*x766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x772=(((cj6*py))+(((-1.0)*px*sj6)));
IkReal x773=((-0.005)+(((-1.0)*sj7*((((cj6*px))+((py*sj6))))))+(((-1.0)*cj7*pz)));
soleval[0]=((((0.965925532213041)*cj8*x772))+(((-0.258820142606703)*sj8*x772))+(((-0.258820142606703)*cj8*x773))+(((-0.965925532213041)*sj8*x773)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x777=IKPowWithIntegerCheck(((((0.965925532213041)*py*sj8))+(((0.258820142606703)*cj8*py))),-1);
if(!x777.valid){
continue;
}
IkReal x774=x777.value;
IkReal x775=(sj8*x774);
IkReal x776=(cj8*x774);
cj6array[0]=((((0.258820142606703)*pz*x775))+(((-0.965925532213041)*pz*x776))+(((-0.00129410071303351)*x775))+(((0.0048296276610652)*x776)));
if( cj6array[0] >= -1-IKFAST_SINCOS_THRESH && cj6array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKacos(cj6array[0]);
    sj6array[0] = IKsin(j6array[0]);
    cj6array[1] = cj6array[0];
    j6array[1] = -j6array[0];
    sj6array[1] = -sj6array[0];
}
else if( isnan(cj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x778=IKcos(j6);
IkReal x779=cj8*cj8;
IkReal x780=pz*pz;
IkReal x781=py*py;
IkReal x782=(cj8*py);
IkReal x783=x778*x778;
IkReal x784=((0.500001967989669)*cj8*sj8);
IkReal x785=((0.866024267562092)*x780);
IkReal x786=((0.933012133781046)*x781);
IkReal x787=((0.0669878662189539)*x780);
IkReal x788=((1.25000491997417e-5)*cj8*sj8);
IkReal x789=(pz*x778);
IkReal x790=((0.866024267562092)*x781);
IkReal x791=((0.500001967989669)*py*x789);
IkReal x792=(x779*x783);
IkReal x793=((1.00000393597934)*py*x779*x789);
IkReal x794=((1.73204853512418)*sj8*x782*x789);
IkReal x795=(x793+x794);
evalcond[0]=((((0.965925532213041)*cj8*x789))+(((0.258820142606703)*x782))+(((-0.0048296276610652)*cj8*x778))+(((-0.258820142606703)*sj8*x789))+(((0.965925532213041)*py*sj8))+(((0.00129410071303351)*sj8*x778)));
evalcond[1]=((1.67469665547385e-6)+(((-1.0)*x795))+(((-1.0)*x787))+(((-1.0)*x788))+((x790*x792))+(((-1.0)*x781*x783*x784))+((x780*x784))+(((2.16506066890523e-5)*x779))+x791+(((-1.0)*x783*x786))+(((-1.0)*x779*x785)));
evalcond[2]=((((-1.0)*x795))+(((-1.0)*x786))+(((-1.0)*x781*x784))+((x779*x790))+(((1.67469665547385e-6)*x783))+(((2.16506066890523e-5)*x792))+((x780*x783*x784))+(((-1.0)*x785*x792))+x791+(((-1.0)*x783*x787))+(((-1.0)*x783*x788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x796=(((cj6*py))+(((-1.0)*px*sj6)));
IkReal x797=((-0.005)+(((-1.0)*sj7*((((cj6*px))+((py*sj6))))))+(((-1.0)*cj7*pz)));
soleval[0]=((((-0.965925532213041)*sj8*x797))+(((0.965925532213041)*cj8*x796))+(((-0.258820142606703)*sj8*x796))+(((-0.258820142606703)*cj8*x797)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x800=IKPowWithIntegerCheck(((((-0.258820142606703)*pz*sj8))+(((0.965925532213041)*cj8*pz))+(((0.00129410071303351)*sj8))+(((-0.0048296276610652)*cj8))),-1);
if(!x800.valid){
continue;
}
IkReal x798=x800.value;
IkReal x799=(py*x798);
cj6array[0]=((((-0.965925532213041)*sj8*x799))+(((-0.258820142606703)*cj8*x799)));
if( cj6array[0] >= -1-IKFAST_SINCOS_THRESH && cj6array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKacos(cj6array[0]);
    sj6array[0] = IKsin(j6array[0]);
    cj6array[1] = cj6array[0];
    j6array[1] = -j6array[0];
    sj6array[1] = -sj6array[0];
}
else if( isnan(cj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x801=IKcos(j6);
IkReal x802=cj8*cj8;
IkReal x803=pz*pz;
IkReal x804=py*py;
IkReal x805=(cj8*pz);
IkReal x806=x801*x801;
IkReal x807=(py*x801);
IkReal x808=((0.500001967989669)*cj8*sj8);
IkReal x809=((0.866024267562092)*x803);
IkReal x810=((0.933012133781046)*x804);
IkReal x811=((0.0669878662189539)*x803);
IkReal x812=((1.25000491997417e-5)*cj8*sj8);
IkReal x813=((0.866024267562092)*x804);
IkReal x814=((0.500001967989669)*pz*x807);
IkReal x815=(x802*x806);
IkReal x816=((1.00000393597934)*pz*x802*x807);
IkReal x817=((1.73204853512418)*sj8*x805*x807);
IkReal x818=(x816+x817);
evalcond[0]=((((-0.258820142606703)*pz*sj8))+(((0.965925532213041)*sj8*x807))+(((0.00129410071303351)*sj8))+(((0.965925532213041)*x805))+(((-0.0048296276610652)*cj8))+(((0.258820142606703)*cj8*x807)));
evalcond[1]=((1.67469665547385e-6)+(((2.16506066890523e-5)*x802))+(((-1.0)*x804*x806*x808))+(((-1.0)*x818))+(((-1.0)*x811))+(((-1.0)*x812))+((x813*x815))+((x803*x808))+x814+(((-1.0)*x806*x810))+(((-1.0)*x802*x809)));
evalcond[2]=((((-1.0)*x804*x808))+(((-1.0)*x809*x815))+(((-1.0)*x818))+(((-1.0)*x810))+((x802*x813))+((x803*x806*x808))+(((2.16506066890523e-5)*x815))+(((1.67469665547385e-6)*x806))+x814+(((-1.0)*x806*x811))+(((-1.0)*x806*x812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x819=(((cj6*py))+(((-1.0)*px*sj6)));
IkReal x820=((-0.005)+(((-1.0)*sj7*((((cj6*px))+((py*sj6))))))+(((-1.0)*cj7*pz)));
soleval[0]=((((-0.258820142606703)*cj8*x820))+(((-0.965925532213041)*sj8*x820))+(((-0.258820142606703)*sj8*x819))+(((0.965925532213041)*cj8*x819)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x821=IKPowWithIntegerCheck(((((-0.965925532213041)*px*sj8))+(((-0.258820142606703)*cj8*px))),-1);
if(!x821.valid){
continue;
}
CheckValue<IkReal> x822=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x822.valid){
continue;
}
if((((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x823=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x823.valid){
continue;
}
if((((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x824=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x824.valid){
continue;
}
CheckValue<IkReal> x825=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x825.valid){
continue;
}
CheckValue<IkReal> x826=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x826.valid){
continue;
}
CheckValue<IkReal> x827=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x827.valid){
continue;
}
CheckValue<IkReal> x828=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x828.valid){
continue;
}
CheckValue<IkReal> x829=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x829.valid){
continue;
}
if((((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x830=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x830.valid){
continue;
}
CheckValue<IkReal> x831=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x831.valid){
continue;
}
if( IKabs(((x821.value)*(((((-0.129410071303351)*cj8*py*(x822.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((-0.48296276610652)*py*sj8*(x823.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((-0.00129410071303351)*sj8))+(((-0.771809661224964)*cj8*pz*(py*py)*(x824.value)))+(((-0.707109191469274)*pz*sj8*(cj8*cj8)*(py*py)*(x825.value)))+(((0.241482333518994)*pz*sj8*(py*py)*(x826.value)))+(((0.258820142606703)*pz*sj8))+(((-0.965925532213041)*cj8*pz))+(((0.707104370895605)*pz*(cj8*cj8*cj8)*(py*py)*(x827.value)))+(((0.0048296276610652)*cj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.866024267562092)*cj8*py*pz*sj8*(x828.value)))+(((0.5)*(x829.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((-0.250000983994834)*py*pz*(x830.value)))+(((0.500001967989669)*py*pz*(cj8*cj8)*(x831.value))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x821.value)*(((((-0.129410071303351)*cj8*py*(x822.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((-0.48296276610652)*py*sj8*(x823.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((-0.00129410071303351)*sj8))+(((-0.771809661224964)*cj8*pz*(py*py)*(x824.value)))+(((-0.707109191469274)*pz*sj8*(cj8*cj8)*(py*py)*(x825.value)))+(((0.241482333518994)*pz*sj8*(py*py)*(x826.value)))+(((0.258820142606703)*pz*sj8))+(((-0.965925532213041)*cj8*pz))+(((0.707104370895605)*pz*(cj8*cj8*cj8)*(py*py)*(x827.value)))+(((0.0048296276610652)*cj8))))))+IKsqr(((((0.866024267562092)*cj8*py*pz*sj8*(x828.value)))+(((0.5)*(x829.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((-0.250000983994834)*py*pz*(x830.value)))+(((0.500001967989669)*py*pz*(cj8*cj8)*(x831.value)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((x821.value)*(((((-0.129410071303351)*cj8*py*(x822.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((-0.48296276610652)*py*sj8*(x823.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((-0.00129410071303351)*sj8))+(((-0.771809661224964)*cj8*pz*(py*py)*(x824.value)))+(((-0.707109191469274)*pz*sj8*(cj8*cj8)*(py*py)*(x825.value)))+(((0.241482333518994)*pz*sj8*(py*py)*(x826.value)))+(((0.258820142606703)*pz*sj8))+(((-0.965925532213041)*cj8*pz))+(((0.707104370895605)*pz*(cj8*cj8*cj8)*(py*py)*(x827.value)))+(((0.0048296276610652)*cj8))))), ((((0.866024267562092)*cj8*py*pz*sj8*(x828.value)))+(((0.5)*(x829.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((-0.250000983994834)*py*pz*(x830.value)))+(((0.500001967989669)*py*pz*(cj8*cj8)*(x831.value)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
CheckValue<IkReal> x832=IKPowWithIntegerCheck(((((-0.965925532213041)*px*sj8))+(((-0.258820142606703)*cj8*px))),-1);
if(!x832.valid){
continue;
}
CheckValue<IkReal> x833=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x833.valid){
continue;
}
if((((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x834=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x834.valid){
continue;
}
CheckValue<IkReal> x835=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x835.valid){
continue;
}
if((((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x836=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x836.valid){
continue;
}
CheckValue<IkReal> x837=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x837.valid){
continue;
}
CheckValue<IkReal> x838=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x838.valid){
continue;
}
CheckValue<IkReal> x839=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x839.valid){
continue;
}
CheckValue<IkReal> x840=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x840.valid){
continue;
}
if((((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x841=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x841.valid){
continue;
}
CheckValue<IkReal> x842=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*cj8*sj8*(pz*pz)))+(((-0.866024267562092)*(cj8*cj8)*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((2.16506066890523e-5)*(cj8*cj8)))),-1);
if(!x842.valid){
continue;
}
if( IKabs(((x832.value)*(((((0.129410071303351)*cj8*py*(x833.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((-0.00129410071303351)*sj8))+(((-0.771809661224964)*cj8*pz*(py*py)*(x834.value)))+(((0.48296276610652)*py*sj8*(x835.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((-0.707109191469274)*pz*sj8*(cj8*cj8)*(py*py)*(x836.value)))+(((0.241482333518994)*pz*sj8*(py*py)*(x837.value)))+(((0.258820142606703)*pz*sj8))+(((-0.965925532213041)*cj8*pz))+(((0.707104370895605)*pz*(cj8*cj8*cj8)*(py*py)*(x838.value)))+(((0.0048296276610652)*cj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.866024267562092)*cj8*py*pz*sj8*(x839.value)))+(((-0.5)*(x840.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((-0.250000983994834)*py*pz*(x841.value)))+(((0.500001967989669)*py*pz*(cj8*cj8)*(x842.value))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x832.value)*(((((0.129410071303351)*cj8*py*(x833.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((-0.00129410071303351)*sj8))+(((-0.771809661224964)*cj8*pz*(py*py)*(x834.value)))+(((0.48296276610652)*py*sj8*(x835.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((-0.707109191469274)*pz*sj8*(cj8*cj8)*(py*py)*(x836.value)))+(((0.241482333518994)*pz*sj8*(py*py)*(x837.value)))+(((0.258820142606703)*pz*sj8))+(((-0.965925532213041)*cj8*pz))+(((0.707104370895605)*pz*(cj8*cj8*cj8)*(py*py)*(x838.value)))+(((0.0048296276610652)*cj8))))))+IKsqr(((((0.866024267562092)*cj8*py*pz*sj8*(x839.value)))+(((-0.5)*(x840.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((-0.250000983994834)*py*pz*(x841.value)))+(((0.500001967989669)*py*pz*(cj8*cj8)*(x842.value)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[1]=IKatan2(((x832.value)*(((((0.129410071303351)*cj8*py*(x833.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((-0.00129410071303351)*sj8))+(((-0.771809661224964)*cj8*pz*(py*py)*(x834.value)))+(((0.48296276610652)*py*sj8*(x835.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((-0.707109191469274)*pz*sj8*(cj8*cj8)*(py*py)*(x836.value)))+(((0.241482333518994)*pz*sj8*(py*py)*(x837.value)))+(((0.258820142606703)*pz*sj8))+(((-0.965925532213041)*cj8*pz))+(((0.707104370895605)*pz*(cj8*cj8*cj8)*(py*py)*(x838.value)))+(((0.0048296276610652)*cj8))))), ((((0.866024267562092)*cj8*py*pz*sj8*(x839.value)))+(((-0.5)*(x840.value)*(IKsqrt(((((8.66027676215715e-5)*sj8*(cj8*cj8*cj8)*(py*py)))+(((4.99996064012917e-5)*(cj8*cj8)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.33013838107857e-5)*cj8*sj8*(py*py)))+(((-4.99996064012917e-5)*(cj8*cj8*cj8*cj8)*(py*py))))))))+(((-0.250000983994834)*py*pz*(x841.value)))+(((0.500001967989669)*py*pz*(cj8*cj8)*(x842.value)))));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x843=IKcos(j6);
IkReal x844=IKsin(j6);
IkReal x845=cj8*cj8;
IkReal x846=py*py;
IkReal x847=pz*pz;
IkReal x848=px*px;
IkReal x849=((0.965925532213041)*sj8);
IkReal x850=((0.258820142606703)*cj8);
IkReal x851=((0.0048296276610652)*cj8);
IkReal x852=((0.258820142606703)*pz);
IkReal x853=((0.500001967989669)*pz);
IkReal x854=(cj8*sj8);
IkReal x855=((1.73204853512418)*pz);
IkReal x856=x843*x843;
IkReal x857=(py*x843);
IkReal x858=((0.500001967989669)*x854);
IkReal x859=(px*x844);
IkReal x860=((0.866024267562092)*x845);
IkReal x861=((2.16506066890523e-5)*x845);
IkReal x862=((0.965925532213041)*cj8*pz);
IkReal x863=(sj8*x843);
IkReal x864=((1.25000491997417e-5)*x854);
IkReal x865=((1.00000393597934)*pz*x845);
IkReal x866=(x853*x857);
IkReal x867=(x848*x856);
IkReal x868=(x847*x856);
IkReal x869=(x846*x856);
IkReal x870=(x857*x865);
IkReal x871=(x854*x855*x857);
IkReal x872=(x870+x871);
evalcond[0]=((((0.00129410071303351)*x863))+(((-1.0)*x852*x863))+((py*x849))+((x843*x862))+((py*x850))+(((-1.0)*x843*x851)));
evalcond[1]=(((x850*x857))+(((-1.0)*x851))+(((0.00129410071303351)*sj8))+(((-1.0)*x850*x859))+(((-1.0)*x849*x859))+x862+((x849*x857))+(((-1.0)*sj8*x852)));
evalcond[2]=((((-1.0)*x846*x858))+(((-0.0669878662189539)*x868))+(((-1.0)*x860*x868))+((x856*x861))+((x858*x868))+(((-1.0)*x856*x864))+x866+(((1.67469665547385e-6)*x856))+((x846*x860))+(((-0.933012133781046)*x846))+(((-1.0)*x872)));
evalcond[3]=((1.67469665547385e-6)+(((-1.0)*x864))+(((-1.0)*x853*x859))+(((1.00000393597934)*x854*x857*x859))+((x848*x860))+(((-1.0)*x860*x867))+(((0.933012133781046)*x867))+((x854*x855*x859))+((x847*x858))+(((-1.0)*x848*x858))+((x858*x867))+(((-1.0)*x847*x860))+(((1.86602426756209)*x857*x859))+(((-1.73204853512418)*x845*x857*x859))+((x859*x865))+(((-0.0669878662189539)*x847))+(((-1.0)*x858*x869))+(((-0.933012133781046)*x869))+((x860*x869))+x866+x861+(((-0.933012133781046)*x848))+(((-1.0)*x872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x873=(((cj6*py))+(((-1.0)*px*sj6)));
IkReal x874=((-0.005)+(((-1.0)*sj7*((((cj6*px))+((py*sj6))))))+(((-1.0)*cj7*pz)));
soleval[0]=((((-0.258820142606703)*cj8*x874))+(((-0.965925532213041)*sj8*x874))+(((0.965925532213041)*cj8*x873))+(((-0.258820142606703)*sj8*x873)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x875=py*py;
IkReal x876=pz*pz;
IkReal x877=cj8*cj8;
IkReal x878=(cj8*pz);
IkReal x879=(cj8*sj8);
IkReal x880=((0.500001967989669)*x879);
IkReal x881=(px*x877);
IkReal x882=((0.866024267562092)*x877);
CheckValue<IkReal> x883=IKPowWithIntegerCheck(((((-0.00125000491997417)*px))+(((-0.866024267562092)*px*sj8*x878))+(((0.00250000983994834)*x881))+(((0.250000983994834)*px*pz))+(((0.00433012133781046)*px*x879))+(((-0.500001967989669)*pz*x881))),-1);
if(!x883.valid){
continue;
}
CheckValue<IkReal> x884=IKPowWithIntegerCheck(((((-0.258820142606703)*pz*sj8))+(((0.965925532213041)*x878))+(((0.00129410071303351)*sj8))+(((-0.0048296276610652)*cj8))),-1);
if(!x884.valid){
continue;
}
if( IKabs(((x883.value)*(((-1.67469665547385e-6)+(((-0.00500001967989669)*sj8*x878))+(((1.25000491997417e-5)*x879))+(((-0.0669878662189539)*x876))+((x876*x880))+(((-1.0)*x876*x882))+(((0.000669878662189539)*pz))+(((0.933012133781046)*x875))+(((-2.16506066890523e-5)*x877))+(((0.00866024267562092)*pz*x877))+((x875*x880))+(((-1.0)*x875*x882)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x884.value)*(((((-0.258820142606703)*cj8*py))+(((-0.965925532213041)*py*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x883.value)*(((-1.67469665547385e-6)+(((-0.00500001967989669)*sj8*x878))+(((1.25000491997417e-5)*x879))+(((-0.0669878662189539)*x876))+((x876*x880))+(((-1.0)*x876*x882))+(((0.000669878662189539)*pz))+(((0.933012133781046)*x875))+(((-2.16506066890523e-5)*x877))+(((0.00866024267562092)*pz*x877))+((x875*x880))+(((-1.0)*x875*x882))))))+IKsqr(((x884.value)*(((((-0.258820142606703)*cj8*py))+(((-0.965925532213041)*py*sj8))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((x883.value)*(((-1.67469665547385e-6)+(((-0.00500001967989669)*sj8*x878))+(((1.25000491997417e-5)*x879))+(((-0.0669878662189539)*x876))+((x876*x880))+(((-1.0)*x876*x882))+(((0.000669878662189539)*pz))+(((0.933012133781046)*x875))+(((-2.16506066890523e-5)*x877))+(((0.00866024267562092)*pz*x877))+((x875*x880))+(((-1.0)*x875*x882))))), ((x884.value)*(((((-0.258820142606703)*cj8*py))+(((-0.965925532213041)*py*sj8))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x885=IKcos(j6);
IkReal x886=IKsin(j6);
IkReal x887=cj8*cj8;
IkReal x888=py*py;
IkReal x889=pz*pz;
IkReal x890=px*px;
IkReal x891=((0.965925532213041)*sj8);
IkReal x892=((0.258820142606703)*cj8);
IkReal x893=((0.0048296276610652)*cj8);
IkReal x894=((0.258820142606703)*pz);
IkReal x895=((0.500001967989669)*pz);
IkReal x896=(cj8*sj8);
IkReal x897=((1.73204853512418)*pz);
IkReal x898=x885*x885;
IkReal x899=(py*x885);
IkReal x900=((0.500001967989669)*x896);
IkReal x901=(px*x886);
IkReal x902=((0.866024267562092)*x887);
IkReal x903=((2.16506066890523e-5)*x887);
IkReal x904=((0.965925532213041)*cj8*pz);
IkReal x905=(sj8*x885);
IkReal x906=((1.25000491997417e-5)*x896);
IkReal x907=((1.00000393597934)*pz*x887);
IkReal x908=(x895*x899);
IkReal x909=(x890*x898);
IkReal x910=(x889*x898);
IkReal x911=(x888*x898);
IkReal x912=(x899*x907);
IkReal x913=(x896*x897*x899);
IkReal x914=(x913+x912);
evalcond[0]=(((py*x892))+((py*x891))+(((-1.0)*x894*x905))+((x885*x904))+(((-1.0)*x885*x893))+(((0.00129410071303351)*x905)));
evalcond[1]=((((-1.0)*x891*x901))+(((0.00129410071303351)*sj8))+(((-1.0)*x893))+(((-1.0)*sj8*x894))+(((-1.0)*x892*x901))+((x892*x899))+((x891*x899))+x904);
evalcond[2]=((((-1.0)*x888*x900))+(((1.67469665547385e-6)*x898))+(((-0.0669878662189539)*x910))+(((-1.0)*x914))+(((-1.0)*x902*x910))+(((-1.0)*x898*x906))+((x900*x910))+((x888*x902))+((x898*x903))+x908+(((-0.933012133781046)*x888)));
evalcond[3]=((1.67469665547385e-6)+(((-0.933012133781046)*x911))+(((-1.0)*x890*x900))+(((-1.73204853512418)*x887*x899*x901))+((x902*x911))+(((-1.0)*x895*x901))+(((-1.0)*x902*x909))+((x890*x902))+((x901*x907))+(((-1.0)*x889*x902))+(((-1.0)*x906))+(((-0.0669878662189539)*x889))+((x896*x897*x901))+(((-1.0)*x914))+((x900*x909))+(((0.933012133781046)*x909))+(((1.00000393597934)*x896*x899*x901))+(((-1.0)*x900*x911))+(((-0.933012133781046)*x890))+x903+x908+(((1.86602426756209)*x899*x901))+((x889*x900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x915=(((cj6*py))+(((-1.0)*px*sj6)));
IkReal x916=((-0.005)+(((-1.0)*sj7*((((cj6*px))+((py*sj6))))))+(((-1.0)*cj7*pz)));
soleval[0]=((((0.965925532213041)*cj8*x915))+(((-0.258820142606703)*cj8*x916))+(((-0.258820142606703)*sj8*x915))+(((-0.965925532213041)*sj8*x916)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
j6array[0]=0;
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

IkReal soleval[1];
IkReal x917=(((cj6*py))+(((-1.0)*px*sj6)));
IkReal x918=((-0.005)+(((-1.0)*sj7*((((cj6*px))+((py*sj6))))))+(((-1.0)*cj7*pz)));
soleval[0]=((((0.965925532213041)*cj8*x917))+(((-0.258820142606703)*cj8*x918))+(((-0.258820142606703)*sj8*x917))+(((-0.965925532213041)*sj8*x918)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x919=py*py;
IkReal x920=cj8*cj8;
IkReal x921=cj7*cj7;
IkReal x922=pz*pz;
IkReal x923=((0.00433012133781046)*pz);
IkReal x924=(cj8*sj8);
IkReal x925=(pz*sj7);
IkReal x926=(cj7*px);
IkReal x927=(py*sj7);
IkReal x928=((0.866024267562092)*px);
IkReal x929=((0.250000983994834)*sj7);
IkReal x930=(cj7*x919);
IkReal x931=(sj7*x924);
IkReal x932=(pz*x921);
IkReal x933=(cj7*x922);
IkReal x934=((0.00250000983994834)*x920);
IkReal x935=(cj7*x920);
IkReal x936=((0.866024267562092)*x933);
IkReal x937=((0.500001967989669)*sj7*x920);
CheckValue<IkReal> x938 = IKatan2WithCheck(IkReal(((((0.00250000983994834)*pz*x924))+(((-0.0669878662189539)*x933))+(((-2.16506066890523e-5)*x935))+(((-0.000334939331094769)*x932))+(((0.00250000983994834)*x924*x932))+(((0.933012133781046)*x930))+(((-1.0)*x920*x923))+(((-1.0)*x920*x936))+(((-0.000334939331094769)*pz))+(((-0.866024267562092)*x920*x930))+(((0.250000983994834)*x926*x927))+(((-0.866024267562092)*x924*x926*x927))+(((-1.0)*x920*x921*x923))+(((0.500001967989669)*x924*x930))+(((0.500001967989669)*x924*x933))+(((-1.67469665547385e-6)*cj7))+(((-0.500001967989669)*x920*x926*x927))+(((1.25000491997417e-5)*cj7*x924)))),IkReal(((((-0.866024267562092)*py*x920*x926))+((x930*x937))+((x931*x936))+(((-1.0)*x929*x933))+(((-1.0)*x929*x930))+((x923*x931))+(((0.500001967989669)*py*x924*x926))+((x925*x934))+(((0.866024267562092)*x930*x931))+(((0.933012133781046)*py*x926))+(((-0.00125000491997417)*x925))+((x933*x937)))),IKFAST_ATAN2_MAGTHRESH);
if(!x938.valid){
continue;
}
CheckValue<IkReal> x939=IKPowWithIntegerCheck(IKsign(((((0.00433012133781046)*x924*x926))+(((0.00433012133781046)*x927*x935))+(((-0.00250000983994834)*cj7*x924*x927))+((x924*x928*x932))+((py*x925))+(((0.500001967989669)*px*x920*x932))+(((0.000334939331094769)*cj7*x927))+((x926*x934))+(((-0.00125000491997417)*x926))+(((-0.250000983994834)*px*x932)))),-1);
if(!x939.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x938.value)+(((1.5707963267949)*(x939.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x940=IKsin(j6);
IkReal x941=IKcos(j6);
IkReal x942=cj7*cj7;
IkReal x943=cj8*cj8;
IkReal x944=px*px;
IkReal x945=py*py;
IkReal x946=pz*pz;
IkReal x947=((0.965925532213041)*sj8);
IkReal x948=(py*sj7);
IkReal x949=((1.73204853512418)*pz);
IkReal x950=((0.258820142606703)*cj8);
IkReal x951=((0.258820142606703)*sj8);
IkReal x952=((0.965925532213041)*cj8);
IkReal x953=(cj8*sj8);
IkReal x954=((0.0048296276610652)*cj8);
IkReal x955=(cj7*pz);
IkReal x956=(px*pz);
IkReal x957=((0.00129410071303351)*sj8);
IkReal x958=(cj7*py);
IkReal x959=x941*x941;
IkReal x960=(py*x941);
IkReal x961=((0.866024267562092)*x943);
IkReal x962=(cj7*x940);
IkReal x963=((0.933012133781046)*x946);
IkReal x964=(px*x940);
IkReal x965=((0.500001967989669)*x946);
IkReal x966=(cj7*x941);
IkReal x967=((2.16506066890523e-5)*x943);
IkReal x968=((1.00000393597934)*x943);
IkReal x969=(sj7*x940);
IkReal x970=((1.73204853512418)*x943);
IkReal x971=(pz*x941);
IkReal x972=(x942*x944);
IkReal x973=(x942*x945);
IkReal x974=(x941*x946);
IkReal x975=(px*sj7*x941);
IkReal x976=(x946*x961);
IkReal x977=(x953*x965);
IkReal x978=(x942*x959);
IkReal x979=(x946*x959);
IkReal x980=((0.500001967989669)*x955*x960);
IkReal x981=(x941*x949*x953*x958);
IkReal x982=(x955*x960*x968);
IkReal x983=(x981+x982);
evalcond[0]=((((-1.0)*pz*x951))+((px*x947*x962))+(((-1.0)*cj7*x957))+((px*x950*x962))+((pz*x952))+(((-1.0)*x941*x950*x958))+(((-1.0)*x941*x947*x958))+((cj7*x954)));
evalcond[1]=(((x954*x966))+((pz*x947*x969))+((pz*x950*x969))+(((-1.0)*x947*x958))+(((-1.0)*x957*x966))+(((-1.0)*x951*x971))+(((-1.0)*x950*x958))+((x952*x971)));
evalcond[2]=(((x952*x955))+((x940*x948*x952))+(((-1.0)*x940*x948*x951))+(((-1.0)*x950*x960))+((x947*x964))+(((-1.0)*x951*x975))+(((-1.0)*x947*x960))+(((-1.0)*x951*x955))+(((-1.0)*x957))+x954+((x950*x964))+((x952*x975)));
evalcond[3]=((((-1.0)*x980))+(((-0.933012133781046)*x959*x973))+(((0.933012133781046)*x959*x972))+(((-1.0)*x959*x961*x972))+(((0.500001967989669)*x955*x964))+(((-0.0669878662189539)*x946))+((x961*x972))+(((-1.25000491997417e-5)*x942*x953))+(((-1.0)*x955*x964*x968))+((x942*x967))+(((1.67469665547385e-6)*x942))+(((-0.500001967989669)*x953*x972))+(((1.86602426756209)*x942*x960*x964))+(((-0.500001967989669)*x953*x959*x973))+(((-0.933012133781046)*x972))+(((1.00000393597934)*x942*x953*x960*x964))+((x959*x961*x973))+(((-1.0)*px*x949*x953*x962))+(((0.500001967989669)*x953*x959*x972))+x983+x977+(((-1.0)*x976))+(((-1.0)*x942*x960*x964*x970)));
evalcond[4]=((((-1.0)*x980))+(((-1.25000491997417e-5)*x953*x978))+(((-1.0)*x963*x978))+(((-1.0)*x943*x948*x949*x962))+(((1.00000393597934)*x953*x979))+(((1.86602426756209)*x940*x948*x955))+((x961*x973))+(((0.866024267562092)*x979))+(((1.67469665547385e-6)*x978))+(((-1.0)*x942*x976))+((x941*x965*x969))+((x942*x977))+((x942*x963))+((x976*x978))+(((1.00000393597934)*x940*x948*x953*x955))+(((-1.73204853512418)*x953*x969*x974))+(((-0.500001967989669)*x953*x973))+(((-1.0)*x970*x979))+(((-0.933012133781046)*x973))+((x967*x978))+(((-1.0)*x977*x978))+x983+x976+(((-1.0)*x963))+(((-1.0)*x968*x969*x974))+(((-1.0)*x977)));
IkReal x984=IKcos(j6);
IkReal x985=IKcos(j6);
IkReal x986=IKcos(j6);
IkReal x987=IKcos(j6);
IkReal x988=IKcos(j6);
IkReal x989=IKcos(j6);
IkReal x990=IKcos(j6);
IkReal x991=IKcos(j6);
IkReal x992=IKcos(j6);
IkReal x993=IKcos(j6);
IkReal x994=IKcos(j6);
IkReal x995=IKcos(j6);
IkReal x996=IKcos(j6);
IkReal x997=IKcos(j6);
IkReal x998=IKcos(j6);
evalcond[5]=((1.67469665547385e-6)+(((0.0669878662189539)*(cj7*cj7)*(py*py)))+(((0.866024267562092)*(cj7*cj7)*(cj8*cj8)*(px*px)*(x984*x984)))+(((1.00000393597934)*cj8*sj8*(px*px)*(x985*x985)))+(((-1.73204853512418)*cj7*cj8*px*pz*sj8*(IKsin(j6))))+(((-0.866024267562092)*(cj7*cj7)*(cj8*cj8)*(py*py)*(x986*x986)))+(((1.73204853512418)*px*py*(cj7*cj7)*(cj8*cj8)*(IKcos(j6))*(IKsin(j6))))+(((3.46409707024837)*cj8*px*py*sj7*sj8*(x987*x987)))+(((-1.00000393597934)*px*py*sj7*(x988*x988)))+(((0.500001967989669)*cj8*sj8*(cj7*cj7)*(py*py)*(x989*x989)))+(((0.500001967989669)*cj8*sj8*(py*py)))+(((-0.500001967989669)*cj8*sj8*(cj7*cj7)*(px*px)*(x990*x990)))+(((1.73204853512418)*cj7*cj8*py*pz*sj8*(IKcos(j6))))+(((-0.133975732437908)*cj7*py*pz*sj7*(IKsin(j6))))+(((-1.00000393597934)*cj7*px*pz*(cj8*cj8)*(IKsin(j6))))+(((1.00000393597934)*cj7*cj8*px*pz*sj7*sj8*(IKcos(j6))))+(((-0.933012133781046)*(px*px)))+(((-0.0669878662189539)*(py*py)))+(((1.73204853512418)*(cj8*cj8)*(py*py)*(x991*x991)))+(((-0.500001967989669)*cj8*sj8*(px*px)))+(((-1.00000393597934)*cj8*px*py*sj8*(cj7*cj7)*(IKcos(j6))*(IKsin(j6))))+(((-0.0669878662189539)*(cj7*cj7)*(py*py)*(x992*x992)))+(((1.00000393597934)*cj7*py*pz*(cj8*cj8)*(IKcos(j6))))+(((2.00000787195867)*px*py*sj7*(cj8*cj8)*(x993*x993)))+(((0.866024267562092)*(px*px)*(x994*x994)))+(((-1.73204853512418)*cj7*px*pz*sj7*(cj8*cj8)*(IKcos(j6))))+(((1.73204853512418)*cj8*sj7*sj8*(py*py)*(IKcos(j6))*(IKsin(j6))))+(((-3.46409707024837)*px*py*(cj8*cj8)*(IKcos(j6))*(IKsin(j6))))+(((0.500001967989669)*px*py*sj7))+(((-0.500001967989669)*cj7*py*pz*(IKcos(j6))))+(((-0.866024267562092)*(cj8*cj8)*(py*py)))+(((-1.73204853512418)*cj7*py*pz*sj7*(cj8*cj8)*(IKsin(j6))))+(((1.73204853512418)*px*py*(IKcos(j6))*(IKsin(j6))))+(((-1.73204853512418)*cj8*px*py*sj7*sj8))+(((0.866024267562092)*(cj8*cj8)*(px*px)))+(((0.500001967989669)*cj7*px*pz*(IKsin(j6))))+(((1.00000393597934)*cj7*cj8*py*pz*sj7*sj8*(IKsin(j6))))+(((-0.133975732437908)*cj7*px*pz*sj7*(IKcos(j6))))+(((0.133975732437908)*px*py*(cj7*cj7)*(IKcos(j6))*(IKsin(j6))))+(((2.00000787195867)*cj8*px*py*sj8*(IKcos(j6))*(IKsin(j6))))+(((-1.00000393597934)*sj7*(cj8*cj8)*(px*px)*(IKcos(j6))*(IKsin(j6))))+(((0.866024267562092)*(cj7*cj7)*(cj8*cj8)*(py*py)))+(((-1.73204853512418)*cj8*sj7*sj8*(px*px)*(IKcos(j6))*(IKsin(j6))))+(((-0.0669878662189539)*(cj7*cj7)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((-0.866024267562092)*(cj7*cj7)*(cj8*cj8)*(pz*pz)))+(((-0.866024267562092)*(py*py)*(x995*x995)))+(((0.500001967989669)*sj7*(px*px)*(IKcos(j6))*(IKsin(j6))))+(((0.500001967989669)*cj8*sj8*(cj7*cj7)*(pz*pz)))+(((-1.00000393597934)*cj8*sj8*(py*py)*(x996*x996)))+(((-0.500001967989669)*sj7*(py*py)*(IKcos(j6))*(IKsin(j6))))+(((0.0669878662189539)*(cj7*cj7)*(px*px)*(x997*x997)))+(((1.00000393597934)*sj7*(cj8*cj8)*(py*py)*(IKcos(j6))*(IKsin(j6))))+(((-1.00000393597934)*px*py*sj7*(cj8*cj8)))+(((2.16506066890523e-5)*(cj8*cj8)))+(((-0.500001967989669)*cj8*sj8*(cj7*cj7)*(py*py)))+(((-1.73204853512418)*(cj8*cj8)*(px*px)*(x998*x998))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x999=(((cj6*py))+(((-1.0)*px*sj6)));
IkReal x1000=((-0.005)+(((-1.0)*sj7*((((cj6*px))+((py*sj6))))))+(((-1.0)*cj7*pz)));
soleval[0]=((((0.965925532213041)*cj8*x999))+(((-0.965925532213041)*sj8*x1000))+(((-0.258820142606703)*cj8*x1000))+(((-0.258820142606703)*sj8*x999)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1001=cj8*cj8;
IkReal x1002=pz*pz;
IkReal x1003=cj7*cj7;
IkReal x1004=py*py;
IkReal x1005=(cj7*pz);
IkReal x1006=((0.933012133781046)*py);
IkReal x1007=((0.866024267562092)*py);
IkReal x1008=(cj8*sj8);
IkReal x1009=(px*x1003);
IkReal x1010=((0.500001967989669)*x1001);
IkReal x1011=(sj7*x1002);
IkReal x1012=(sj7*x1001);
IkReal x1013=((0.500001967989669)*x1008);
IkReal x1014=((0.866024267562092)*x1001);
IkReal x1015=(x1003*x1004);
CheckValue<IkReal> x1016 = IKatan2WithCheck(IkReal((((x1014*x1015))+(((0.00866024267562092)*x1001*x1005))+(((0.0669878662189539)*x1002))+(((0.000669878662189539)*x1005))+(((1.67469665547385e-6)*x1003))+(((-0.933012133781046)*x1015))+(((-1.25000491997417e-5)*x1003*x1008))+(((2.16506066890523e-5)*x1001*x1003))+(((-1.0)*x1013*x1015))+((x1002*x1014))+(((-1.0)*x1002*x1013))+(((-0.00500001967989669)*x1005*x1008)))),IkReal(((((-1.0)*x1010*x1011))+((x1001*x1007*x1009))+(((-1.0)*py*x1009*x1013))+(((-0.00433012133781046)*sj7*x1005*x1008))+(((-1.0)*x1006*x1009))+(((0.250000983994834)*x1011))+(((0.00125000491997417)*sj7*x1005))+(((-0.00250000983994834)*x1005*x1012))+(((-0.866024267562092)*x1008*x1011)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1016.valid){
continue;
}
CheckValue<IkReal> x1017=IKPowWithIntegerCheck(IKsign(((((-0.00250000983994834)*x1001*x1009))+(((0.250000983994834)*px*x1005))+(((0.00125000491997417)*x1009))+((x1005*x1007*x1012))+(((-1.0)*px*x1005*x1010))+(((-0.00433012133781046)*x1008*x1009))+(((-0.866024267562092)*px*x1005*x1008))+(((-1.0)*sj7*x1005*x1006))+(((-1.0)*py*sj7*x1005*x1013)))),-1);
if(!x1017.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x1016.value)+(((1.5707963267949)*(x1017.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1018=IKsin(j6);
IkReal x1019=IKcos(j6);
IkReal x1020=cj7*cj7;
IkReal x1021=cj8*cj8;
IkReal x1022=px*px;
IkReal x1023=py*py;
IkReal x1024=pz*pz;
IkReal x1025=((0.965925532213041)*sj8);
IkReal x1026=(py*sj7);
IkReal x1027=((1.73204853512418)*pz);
IkReal x1028=((0.258820142606703)*cj8);
IkReal x1029=((0.258820142606703)*sj8);
IkReal x1030=((0.965925532213041)*cj8);
IkReal x1031=(cj8*sj8);
IkReal x1032=((0.0048296276610652)*cj8);
IkReal x1033=(cj7*pz);
IkReal x1034=(px*pz);
IkReal x1035=((0.00129410071303351)*sj8);
IkReal x1036=(cj7*py);
IkReal x1037=x1019*x1019;
IkReal x1038=(py*x1019);
IkReal x1039=((0.866024267562092)*x1021);
IkReal x1040=(cj7*x1018);
IkReal x1041=((0.933012133781046)*x1024);
IkReal x1042=(px*x1018);
IkReal x1043=((0.500001967989669)*x1024);
IkReal x1044=(cj7*x1019);
IkReal x1045=((2.16506066890523e-5)*x1021);
IkReal x1046=((1.00000393597934)*x1021);
IkReal x1047=(sj7*x1018);
IkReal x1048=((1.73204853512418)*x1021);
IkReal x1049=(pz*x1019);
IkReal x1050=(x1020*x1022);
IkReal x1051=(x1020*x1023);
IkReal x1052=(x1019*x1024);
IkReal x1053=(px*sj7*x1019);
IkReal x1054=(x1024*x1039);
IkReal x1055=(x1031*x1043);
IkReal x1056=(x1020*x1037);
IkReal x1057=(x1024*x1037);
IkReal x1058=((0.500001967989669)*x1033*x1038);
IkReal x1059=(x1019*x1027*x1031*x1036);
IkReal x1060=(x1033*x1038*x1046);
IkReal x1061=(x1059+x1060);
evalcond[0]=((((-1.0)*x1019*x1025*x1036))+(((-1.0)*x1019*x1028*x1036))+(((-1.0)*pz*x1029))+((px*x1025*x1040))+((cj7*x1032))+((px*x1028*x1040))+((pz*x1030))+(((-1.0)*cj7*x1035)));
evalcond[1]=(((pz*x1025*x1047))+(((-1.0)*x1025*x1036))+(((-1.0)*x1028*x1036))+(((-1.0)*x1029*x1049))+((x1030*x1049))+((x1032*x1044))+(((-1.0)*x1035*x1044))+((pz*x1028*x1047)));
evalcond[2]=(((x1030*x1033))+(((-1.0)*x1035))+(((-1.0)*x1025*x1038))+(((-1.0)*x1028*x1038))+x1032+(((-1.0)*x1029*x1033))+(((-1.0)*x1029*x1053))+((x1025*x1042))+((x1018*x1026*x1030))+((x1030*x1053))+(((-1.0)*x1018*x1026*x1029))+((x1028*x1042)));
evalcond[3]=((((-1.0)*x1058))+(((-1.0)*x1054))+(((0.500001967989669)*x1031*x1037*x1050))+(((-1.0)*x1033*x1042*x1046))+x1055+x1061+(((0.500001967989669)*x1033*x1042))+((x1020*x1045))+((x1039*x1050))+(((-0.933012133781046)*x1050))+(((1.86602426756209)*x1020*x1038*x1042))+(((-1.0)*x1020*x1038*x1042*x1048))+(((-0.500001967989669)*x1031*x1050))+(((-1.25000491997417e-5)*x1020*x1031))+(((0.933012133781046)*x1037*x1050))+(((1.00000393597934)*x1020*x1031*x1038*x1042))+(((-0.500001967989669)*x1031*x1037*x1051))+((x1037*x1039*x1051))+(((-1.0)*px*x1027*x1031*x1040))+(((1.67469665547385e-6)*x1020))+(((-1.0)*x1037*x1039*x1050))+(((-0.0669878662189539)*x1024))+(((-0.933012133781046)*x1037*x1051)));
evalcond[4]=((((-1.0)*x1058))+(((-1.0)*x1055))+(((-1.0)*x1020*x1054))+((x1054*x1056))+((x1020*x1055))+x1054+x1061+(((-1.73204853512418)*x1031*x1047*x1052))+((x1020*x1041))+(((1.67469665547385e-6)*x1056))+((x1039*x1051))+(((-0.933012133781046)*x1051))+(((1.86602426756209)*x1018*x1026*x1033))+(((-1.25000491997417e-5)*x1031*x1056))+(((-1.0)*x1046*x1047*x1052))+(((-1.0)*x1041*x1056))+(((1.00000393597934)*x1018*x1026*x1031*x1033))+(((-0.500001967989669)*x1031*x1051))+(((-1.0)*x1055*x1056))+(((1.00000393597934)*x1031*x1057))+(((-1.0)*x1048*x1057))+((x1019*x1043*x1047))+(((-1.0)*x1021*x1026*x1027*x1040))+(((0.866024267562092)*x1057))+((x1045*x1056))+(((-1.0)*x1041)));
IkReal x1062=IKcos(j6);
IkReal x1063=IKcos(j6);
IkReal x1064=IKcos(j6);
IkReal x1065=IKcos(j6);
IkReal x1066=IKcos(j6);
IkReal x1067=IKcos(j6);
IkReal x1068=IKcos(j6);
IkReal x1069=IKcos(j6);
IkReal x1070=IKcos(j6);
IkReal x1071=IKcos(j6);
IkReal x1072=IKcos(j6);
IkReal x1073=IKcos(j6);
IkReal x1074=IKcos(j6);
IkReal x1075=IKcos(j6);
IkReal x1076=IKcos(j6);
evalcond[5]=((1.67469665547385e-6)+(((0.0669878662189539)*(cj7*cj7)*(py*py)))+(((0.866024267562092)*(cj7*cj7)*(cj8*cj8)*(px*px)*(x1062*x1062)))+(((1.00000393597934)*cj8*sj8*(px*px)*(x1063*x1063)))+(((-1.73204853512418)*cj7*cj8*px*pz*sj8*(IKsin(j6))))+(((-0.866024267562092)*(cj7*cj7)*(cj8*cj8)*(py*py)*(x1064*x1064)))+(((1.73204853512418)*px*py*(cj7*cj7)*(cj8*cj8)*(IKcos(j6))*(IKsin(j6))))+(((3.46409707024837)*cj8*px*py*sj7*sj8*(x1065*x1065)))+(((-1.00000393597934)*px*py*sj7*(x1066*x1066)))+(((0.500001967989669)*cj8*sj8*(cj7*cj7)*(py*py)*(x1067*x1067)))+(((0.500001967989669)*cj8*sj8*(py*py)))+(((-0.500001967989669)*cj8*sj8*(cj7*cj7)*(px*px)*(x1068*x1068)))+(((1.73204853512418)*cj7*cj8*py*pz*sj8*(IKcos(j6))))+(((-0.133975732437908)*cj7*py*pz*sj7*(IKsin(j6))))+(((-1.00000393597934)*cj7*px*pz*(cj8*cj8)*(IKsin(j6))))+(((1.00000393597934)*cj7*cj8*px*pz*sj7*sj8*(IKcos(j6))))+(((-0.933012133781046)*(px*px)))+(((-0.0669878662189539)*(py*py)))+(((1.73204853512418)*(cj8*cj8)*(py*py)*(x1069*x1069)))+(((-0.500001967989669)*cj8*sj8*(px*px)))+(((-1.00000393597934)*cj8*px*py*sj8*(cj7*cj7)*(IKcos(j6))*(IKsin(j6))))+(((-0.0669878662189539)*(cj7*cj7)*(py*py)*(x1070*x1070)))+(((1.00000393597934)*cj7*py*pz*(cj8*cj8)*(IKcos(j6))))+(((2.00000787195867)*px*py*sj7*(cj8*cj8)*(x1071*x1071)))+(((0.866024267562092)*(px*px)*(x1072*x1072)))+(((-1.73204853512418)*cj7*px*pz*sj7*(cj8*cj8)*(IKcos(j6))))+(((1.73204853512418)*cj8*sj7*sj8*(py*py)*(IKcos(j6))*(IKsin(j6))))+(((-3.46409707024837)*px*py*(cj8*cj8)*(IKcos(j6))*(IKsin(j6))))+(((0.500001967989669)*px*py*sj7))+(((-0.500001967989669)*cj7*py*pz*(IKcos(j6))))+(((-0.866024267562092)*(cj8*cj8)*(py*py)))+(((-1.73204853512418)*cj7*py*pz*sj7*(cj8*cj8)*(IKsin(j6))))+(((1.73204853512418)*px*py*(IKcos(j6))*(IKsin(j6))))+(((-1.73204853512418)*cj8*px*py*sj7*sj8))+(((0.866024267562092)*(cj8*cj8)*(px*px)))+(((0.500001967989669)*cj7*px*pz*(IKsin(j6))))+(((1.00000393597934)*cj7*cj8*py*pz*sj7*sj8*(IKsin(j6))))+(((-0.133975732437908)*cj7*px*pz*sj7*(IKcos(j6))))+(((0.133975732437908)*px*py*(cj7*cj7)*(IKcos(j6))*(IKsin(j6))))+(((2.00000787195867)*cj8*px*py*sj8*(IKcos(j6))*(IKsin(j6))))+(((-1.00000393597934)*sj7*(cj8*cj8)*(px*px)*(IKcos(j6))*(IKsin(j6))))+(((0.866024267562092)*(cj7*cj7)*(cj8*cj8)*(py*py)))+(((-1.73204853512418)*cj8*sj7*sj8*(px*px)*(IKcos(j6))*(IKsin(j6))))+(((-0.0669878662189539)*(cj7*cj7)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((-0.866024267562092)*(cj7*cj7)*(cj8*cj8)*(pz*pz)))+(((-0.866024267562092)*(py*py)*(x1073*x1073)))+(((0.500001967989669)*sj7*(px*px)*(IKcos(j6))*(IKsin(j6))))+(((0.500001967989669)*cj8*sj8*(cj7*cj7)*(pz*pz)))+(((-1.00000393597934)*cj8*sj8*(py*py)*(x1074*x1074)))+(((-0.500001967989669)*sj7*(py*py)*(IKcos(j6))*(IKsin(j6))))+(((0.0669878662189539)*(cj7*cj7)*(px*px)*(x1075*x1075)))+(((1.00000393597934)*sj7*(cj8*cj8)*(py*py)*(IKcos(j6))*(IKsin(j6))))+(((-1.00000393597934)*px*py*sj7*(cj8*cj8)))+(((2.16506066890523e-5)*(cj8*cj8)))+(((-0.500001967989669)*cj8*sj8*(cj7*cj7)*(py*py)))+(((-1.73204853512418)*(cj8*cj8)*(px*px)*(x1076*x1076))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x1077=(((cj6*py))+(((-1.0)*px*sj6)));
IkReal x1078=((-0.005)+(((-1.0)*sj7*((((cj6*px))+((py*sj6))))))+(((-1.0)*cj7*pz)));
soleval[0]=((((-0.965925532213041)*sj8*x1078))+(((0.965925532213041)*cj8*x1077))+(((-0.258820142606703)*sj8*x1077))+(((-0.258820142606703)*cj8*x1078)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1079=px*px;
IkReal x1080=cj8*cj8;
IkReal x1081=py*py;
IkReal x1082=cj7*cj7;
IkReal x1083=(cj8*sj8);
IkReal x1084=(cj7*sj7);
IkReal x1085=(px*pz);
IkReal x1086=((0.0669878662189539)*sj7);
IkReal x1087=((0.500001967989669)*sj7);
IkReal x1088=(py*pz);
IkReal x1089=(px*x1084);
IkReal x1090=((0.500001967989669)*x1080);
IkReal x1091=((0.250000983994834)*x1082);
IkReal x1092=((0.00433012133781046)*x1080);
IkReal x1093=((0.866024267562092)*sj7*x1080);
IkReal x1094=(x1082*x1088);
CheckValue<IkReal> x1095=IKPowWithIntegerCheck(IKsign(((((-0.866024267562092)*x1081*x1083*x1084))+(((0.250000983994834)*x1079*x1084))+(((-1.0)*x1081*x1084*x1090))+(((-1.0)*x1079*x1084*x1090))+(((0.250000983994834)*x1081*x1084))+(((-0.866024267562092)*x1079*x1083*x1084)))),-1);
if(!x1095.valid){
continue;
}
CheckValue<IkReal> x1096 = IKatan2WithCheck(IkReal(((((-1.0)*x1083*x1085*x1087))+(((0.250000983994834)*x1088))+(((-0.866024267562092)*x1083*x1088))+(((0.866024267562092)*x1083*x1094))+(((-1.0)*x1088*x1090))+(((-1.0)*x1088*x1091))+((x1085*x1093))+((x1089*x1092))+((x1085*x1086))+(((0.000334939331094769)*x1089))+((x1090*x1094))+(((-0.00250000983994834)*x1083*x1089)))),IkReal(((((0.250000983994834)*x1085))+(((0.866024267562092)*x1082*x1083*x1085))+(((-0.866024267562092)*x1083*x1085))+(((-1.0)*py*x1084*x1092))+(((-1.0)*x1088*x1093))+((x1082*x1085*x1090))+((x1083*x1087*x1088))+(((-1.0)*x1085*x1091))+(((-1.0)*x1085*x1090))+(((0.00250000983994834)*py*x1083*x1084))+(((-0.000334939331094769)*py*x1084))+(((-1.0)*x1086*x1088)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1096.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1095.value)))+(x1096.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1097=IKsin(j6);
IkReal x1098=IKcos(j6);
IkReal x1099=cj7*cj7;
IkReal x1100=cj8*cj8;
IkReal x1101=px*px;
IkReal x1102=py*py;
IkReal x1103=pz*pz;
IkReal x1104=((0.965925532213041)*sj8);
IkReal x1105=(py*sj7);
IkReal x1106=((1.73204853512418)*pz);
IkReal x1107=((0.258820142606703)*cj8);
IkReal x1108=((0.258820142606703)*sj8);
IkReal x1109=((0.965925532213041)*cj8);
IkReal x1110=(cj8*sj8);
IkReal x1111=((0.0048296276610652)*cj8);
IkReal x1112=(cj7*pz);
IkReal x1113=(px*pz);
IkReal x1114=((0.00129410071303351)*sj8);
IkReal x1115=(cj7*py);
IkReal x1116=x1098*x1098;
IkReal x1117=(py*x1098);
IkReal x1118=((0.866024267562092)*x1100);
IkReal x1119=(cj7*x1097);
IkReal x1120=((0.933012133781046)*x1103);
IkReal x1121=(px*x1097);
IkReal x1122=((0.500001967989669)*x1103);
IkReal x1123=(cj7*x1098);
IkReal x1124=((2.16506066890523e-5)*x1100);
IkReal x1125=((1.00000393597934)*x1100);
IkReal x1126=(sj7*x1097);
IkReal x1127=((1.73204853512418)*x1100);
IkReal x1128=(pz*x1098);
IkReal x1129=(x1099*x1101);
IkReal x1130=(x1099*x1102);
IkReal x1131=(x1098*x1103);
IkReal x1132=(px*sj7*x1098);
IkReal x1133=(x1103*x1118);
IkReal x1134=(x1110*x1122);
IkReal x1135=(x1099*x1116);
IkReal x1136=(x1103*x1116);
IkReal x1137=((0.500001967989669)*x1112*x1117);
IkReal x1138=(x1098*x1106*x1110*x1115);
IkReal x1139=(x1112*x1117*x1125);
IkReal x1140=(x1139+x1138);
evalcond[0]=(((cj7*x1111))+(((-1.0)*cj7*x1114))+(((-1.0)*x1098*x1107*x1115))+((px*x1104*x1119))+(((-1.0)*pz*x1108))+((pz*x1109))+((px*x1107*x1119))+(((-1.0)*x1098*x1104*x1115)));
evalcond[1]=((((-1.0)*x1114*x1123))+((x1111*x1123))+((pz*x1107*x1126))+(((-1.0)*x1107*x1115))+((x1109*x1128))+((pz*x1104*x1126))+(((-1.0)*x1108*x1128))+(((-1.0)*x1104*x1115)));
evalcond[2]=(((x1109*x1112))+x1111+((x1104*x1121))+(((-1.0)*x1097*x1105*x1108))+((x1097*x1105*x1109))+((x1109*x1132))+(((-1.0)*x1107*x1117))+(((-1.0)*x1108*x1112))+(((-1.0)*x1108*x1132))+((x1107*x1121))+(((-1.0)*x1104*x1117))+(((-1.0)*x1114)));
evalcond[3]=((((-0.500001967989669)*x1110*x1129))+(((1.86602426756209)*x1099*x1117*x1121))+x1140+x1134+(((0.933012133781046)*x1116*x1129))+(((-1.25000491997417e-5)*x1099*x1110))+(((-0.933012133781046)*x1129))+(((-0.933012133781046)*x1116*x1130))+(((0.500001967989669)*x1110*x1116*x1129))+(((-1.0)*x1116*x1118*x1129))+((x1099*x1124))+(((-0.0669878662189539)*x1103))+(((0.500001967989669)*x1112*x1121))+(((-1.0)*x1112*x1121*x1125))+(((-1.0)*x1099*x1117*x1121*x1127))+(((1.67469665547385e-6)*x1099))+(((-1.0)*x1133))+(((-1.0)*x1137))+(((-1.0)*px*x1106*x1110*x1119))+(((1.00000393597934)*x1099*x1110*x1117*x1121))+(((-0.500001967989669)*x1110*x1116*x1130))+((x1118*x1129))+((x1116*x1118*x1130)));
evalcond[4]=(((x1098*x1122*x1126))+x1140+x1133+(((1.00000393597934)*x1110*x1136))+(((-1.25000491997417e-5)*x1110*x1135))+(((-0.933012133781046)*x1130))+(((-1.0)*x1099*x1133))+(((-1.0)*x1100*x1105*x1106*x1119))+(((-1.0)*x1127*x1136))+((x1099*x1134))+(((-1.73204853512418)*x1110*x1126*x1131))+(((1.00000393597934)*x1097*x1105*x1110*x1112))+((x1099*x1120))+((x1124*x1135))+(((-1.0)*x1134*x1135))+(((-1.0)*x1134))+(((-1.0)*x1137))+(((-1.0)*x1120))+(((-1.0)*x1125*x1126*x1131))+(((1.86602426756209)*x1097*x1105*x1112))+((x1133*x1135))+(((0.866024267562092)*x1136))+(((-1.0)*x1120*x1135))+(((1.67469665547385e-6)*x1135))+(((-0.500001967989669)*x1110*x1130))+((x1118*x1130)));
IkReal x1141=IKcos(j6);
IkReal x1142=IKcos(j6);
IkReal x1143=IKcos(j6);
IkReal x1144=IKcos(j6);
IkReal x1145=IKcos(j6);
IkReal x1146=IKcos(j6);
IkReal x1147=IKcos(j6);
IkReal x1148=IKcos(j6);
IkReal x1149=IKcos(j6);
IkReal x1150=IKcos(j6);
IkReal x1151=IKcos(j6);
IkReal x1152=IKcos(j6);
IkReal x1153=IKcos(j6);
IkReal x1154=IKcos(j6);
IkReal x1155=IKcos(j6);
evalcond[5]=((1.67469665547385e-6)+(((0.0669878662189539)*(cj7*cj7)*(py*py)))+(((0.866024267562092)*(cj7*cj7)*(cj8*cj8)*(px*px)*(x1141*x1141)))+(((1.00000393597934)*cj8*sj8*(px*px)*(x1142*x1142)))+(((-1.73204853512418)*cj7*cj8*px*pz*sj8*(IKsin(j6))))+(((-0.866024267562092)*(cj7*cj7)*(cj8*cj8)*(py*py)*(x1143*x1143)))+(((1.73204853512418)*px*py*(cj7*cj7)*(cj8*cj8)*(IKcos(j6))*(IKsin(j6))))+(((3.46409707024837)*cj8*px*py*sj7*sj8*(x1144*x1144)))+(((-1.00000393597934)*px*py*sj7*(x1145*x1145)))+(((0.500001967989669)*cj8*sj8*(cj7*cj7)*(py*py)*(x1146*x1146)))+(((0.500001967989669)*cj8*sj8*(py*py)))+(((-0.500001967989669)*cj8*sj8*(cj7*cj7)*(px*px)*(x1147*x1147)))+(((1.73204853512418)*cj7*cj8*py*pz*sj8*(IKcos(j6))))+(((-0.133975732437908)*cj7*py*pz*sj7*(IKsin(j6))))+(((-1.00000393597934)*cj7*px*pz*(cj8*cj8)*(IKsin(j6))))+(((1.00000393597934)*cj7*cj8*px*pz*sj7*sj8*(IKcos(j6))))+(((-0.933012133781046)*(px*px)))+(((-0.0669878662189539)*(py*py)))+(((1.73204853512418)*(cj8*cj8)*(py*py)*(x1148*x1148)))+(((-0.500001967989669)*cj8*sj8*(px*px)))+(((-1.00000393597934)*cj8*px*py*sj8*(cj7*cj7)*(IKcos(j6))*(IKsin(j6))))+(((-0.0669878662189539)*(cj7*cj7)*(py*py)*(x1149*x1149)))+(((1.00000393597934)*cj7*py*pz*(cj8*cj8)*(IKcos(j6))))+(((2.00000787195867)*px*py*sj7*(cj8*cj8)*(x1150*x1150)))+(((0.866024267562092)*(px*px)*(x1151*x1151)))+(((-1.73204853512418)*cj7*px*pz*sj7*(cj8*cj8)*(IKcos(j6))))+(((1.73204853512418)*cj8*sj7*sj8*(py*py)*(IKcos(j6))*(IKsin(j6))))+(((-3.46409707024837)*px*py*(cj8*cj8)*(IKcos(j6))*(IKsin(j6))))+(((0.500001967989669)*px*py*sj7))+(((-0.500001967989669)*cj7*py*pz*(IKcos(j6))))+(((-0.866024267562092)*(cj8*cj8)*(py*py)))+(((-1.73204853512418)*cj7*py*pz*sj7*(cj8*cj8)*(IKsin(j6))))+(((1.73204853512418)*px*py*(IKcos(j6))*(IKsin(j6))))+(((-1.73204853512418)*cj8*px*py*sj7*sj8))+(((0.866024267562092)*(cj8*cj8)*(px*px)))+(((0.500001967989669)*cj7*px*pz*(IKsin(j6))))+(((1.00000393597934)*cj7*cj8*py*pz*sj7*sj8*(IKsin(j6))))+(((-0.133975732437908)*cj7*px*pz*sj7*(IKcos(j6))))+(((0.133975732437908)*px*py*(cj7*cj7)*(IKcos(j6))*(IKsin(j6))))+(((2.00000787195867)*cj8*px*py*sj8*(IKcos(j6))*(IKsin(j6))))+(((-1.00000393597934)*sj7*(cj8*cj8)*(px*px)*(IKcos(j6))*(IKsin(j6))))+(((0.866024267562092)*(cj7*cj7)*(cj8*cj8)*(py*py)))+(((-1.73204853512418)*cj8*sj7*sj8*(px*px)*(IKcos(j6))*(IKsin(j6))))+(((-0.0669878662189539)*(cj7*cj7)*(pz*pz)))+(((-1.25000491997417e-5)*cj8*sj8))+(((-0.866024267562092)*(cj7*cj7)*(cj8*cj8)*(pz*pz)))+(((-0.866024267562092)*(py*py)*(x1152*x1152)))+(((0.500001967989669)*sj7*(px*px)*(IKcos(j6))*(IKsin(j6))))+(((0.500001967989669)*cj8*sj8*(cj7*cj7)*(pz*pz)))+(((-1.00000393597934)*cj8*sj8*(py*py)*(x1153*x1153)))+(((-0.500001967989669)*sj7*(py*py)*(IKcos(j6))*(IKsin(j6))))+(((0.0669878662189539)*(cj7*cj7)*(px*px)*(x1154*x1154)))+(((1.00000393597934)*sj7*(cj8*cj8)*(py*py)*(IKcos(j6))*(IKsin(j6))))+(((-1.00000393597934)*px*py*sj7*(cj8*cj8)))+(((2.16506066890523e-5)*(cj8*cj8)))+(((-0.500001967989669)*cj8*sj8*(cj7*cj7)*(py*py)))+(((-1.73204853512418)*(cj8*cj8)*(px*px)*(x1155*x1155))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x1156=(((cj6*py))+(((-1.0)*px*sj6)));
IkReal x1157=((-0.005)+(((-1.0)*sj7*((((cj6*px))+((py*sj6))))))+(((-1.0)*cj7*pz)));
soleval[0]=((((-0.258820142606703)*sj8*x1156))+(((-0.965925532213041)*sj8*x1157))+(((-0.258820142606703)*cj8*x1157))+(((0.965925532213041)*cj8*x1156)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}

static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "796eb6054f47e79735d385b982e983c3"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
