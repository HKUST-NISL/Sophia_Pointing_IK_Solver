/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2022-03-03 04:45:32.657927
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11;
x0=IKsin(j[1]);
x1=IKsin(j[0]);
x2=IKcos(j[0]);
x3=IKsin(j[2]);
x4=IKcos(j[2]);
x5=IKcos(j[1]);
x6=((0.965925532213041)*x1);
x7=((0.258820142606703)*x4);
x8=((0.005)*x0);
x9=((0.258820142606703)*x3);
x10=(x0*x3);
x11=(x2*x4);
eetrans[0]=((0.0036)+((x2*x8)));
eetrans[1]=(x1*x8);
eetrans[2]=((-0.23)+(((-0.005)*x5)));
eerot[0]=(((x1*x9))+(((-1.0)*x4*x6))+(((-0.965925532213041)*x10*x2))+(((-1.0)*x0*x2*x7)));
eerot[1]=((((0.965925532213041)*x11))+(((-1.0)*x10*x6))+(((-1.0)*x2*x9))+(((-1.0)*x0*x1*x7)));
eerot[2]=(((x5*x7))+(((0.965925532213041)*x3*x5)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 3; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x23000006; }

class IKSolver {
public:
IkReal j15,cj15,sj15,htj15,j15mul,j16,cj16,sj16,htj16,j16mul,j17,cj17,sj17,htj17,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij15[2], _nj15,_ij16[2], _nj16,_ij17[2], _nj17;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j15=numeric_limits<IkReal>::quiet_NaN(); _ij15[0] = -1; _ij15[1] = -1; _nj15 = -1; j16=numeric_limits<IkReal>::quiet_NaN(); _ij16[0] = -1; _ij16[1] = -1; _nj16 = -1;  _ij17[0] = -1; _ij17[1] = -1; _nj17 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

j17=pfree[0]; cj17=cos(pfree[0]); sj17=sin(pfree[0]);
new_px=((-0.0036)+px);
new_py=py;
new_pz=((0.23)+pz);
px = new_px; py = new_py; pz = new_pz;
pp=((px*px)+(py*py)+(pz*pz));
IkReal op[8+1], zeror[8];
int numroots;
IkReal x12=((0.00129410071303351)*sj17);
IkReal x13=((0.0048296276610652)*cj17);
IkReal x14=(pz*sj17);
IkReal x15=(cj17*pz);
IkReal x16=((0.258820142606703)*x14);
IkReal x17=((0.965925532213041)*x15);
IkReal x18=((0.965925532213041)*py*sj17);
IkReal x19=((0.258820142606703)*cj17*py);
IkReal x20=(x12+x16);
IkReal x21=(x12+x17);
IkReal x22=(x13+x16);
IkReal x23=(x13+x17);
IkReal x24=((((1.93185106442608)*px*sj17))+(((0.517640285213405)*cj17*px)));
IkReal x25=((((-1.03528057042681)*x15))+(((-3.86370212885216)*x14)));
IkReal x26=((-1.0)*x24);
IkReal x27=(x19+x18);
IkReal x28=(x27+x23);
IkReal x29=(x27+x22);
IkReal x30=((((-1.0)*x20))+(((-1.0)*x27))+x23);
IkReal x31=((((-1.0)*x28))+x20);
IkReal x32=((((-1.0)*x20))+x28);
IkReal x33=((((-1.0)*x22))+x27+x21);
IkReal x34=((((-1.0)*x21))+x29);
IkReal x35=((((-1.0)*x29))+x21);
IkReal gconst0=x30;
IkReal gconst1=x31;
IkReal gconst2=x30;
IkReal gconst3=x24;
IkReal gconst4=x32;
IkReal gconst5=x30;
IkReal gconst6=x31;
IkReal gconst7=x30;
IkReal gconst8=x24;
IkReal gconst9=x32;
IkReal gconst10=x25;
IkReal gconst11=x25;
IkReal gconst12=x33;
IkReal gconst13=x34;
IkReal gconst14=x33;
IkReal gconst15=x26;
IkReal gconst16=x35;
IkReal gconst17=x33;
IkReal gconst18=x34;
IkReal gconst19=x33;
IkReal gconst20=x26;
IkReal gconst21=x35;
IkReal x36=(gconst0*gconst19);
IkReal x37=(gconst16*gconst18);
IkReal x38=(gconst4*gconst6);
IkReal x39=(gconst17*gconst9);
IkReal x40=(gconst13*gconst2);
IkReal x41=(gconst11*gconst3);
IkReal x42=(gconst1*gconst19);
IkReal x43=((1.0)*gconst16);
IkReal x44=(gconst21*gconst5);
IkReal x45=(gconst13*gconst7);
IkReal x46=(gconst5*gconst9);
IkReal x47=(gconst1*gconst14);
IkReal x48=(gconst12*gconst19);
IkReal x49=((1.0)*gconst14);
IkReal x50=((1.0)*gconst18);
IkReal x51=((1.0)*gconst1);
IkReal x52=(gconst17*gconst8);
IkReal x53=(gconst17*gconst21);
IkReal x54=(gconst13*gconst14);
IkReal x55=(gconst2*gconst7);
IkReal x56=(gconst15*gconst8);
IkReal x57=(gconst20*gconst3);
IkReal x58=(gconst1*gconst2);
IkReal x59=(gconst12*gconst7);
IkReal x60=(gconst17*gconst20);
IkReal x61=(gconst10*gconst4);
IkReal x62=(gconst18*gconst4);
IkReal x63=(gconst10*gconst16);
IkReal x64=(gconst20*gconst5);
IkReal x65=((1.0)*gconst13);
IkReal x66=((1.0)*gconst6);
IkReal x67=(gconst0*gconst7);
IkReal x68=(gconst5*gconst8);
IkReal x69=(gconst16*gconst6);
IkReal x70=(gconst13*gconst19);
IkReal x71=(gconst11*gconst15);
IkReal x72=((1.0)*gconst11);
IkReal x73=(gconst10*gconst11);
IkReal x74=(gconst1*gconst7);
IkReal x75=(gconst5*x65);
IkReal x76=((1.0)*gconst12*gconst4);
IkReal x77=((1.0)*gconst0*gconst4);
IkReal x78=(gconst6*gconst7*x49);
op[0]=((((-1.0)*gconst12*x43*x53))+((x37*x48))+((x53*x54))+(((-1.0)*gconst15*x60*x65))+(((-1.0)*gconst18*x49*x70)));
op[1]=(((x60*x63))+((x70*x71)));
op[2]=(((x39*x54))+((x37*x59))+((x36*x37))+(((-1.0)*gconst19*x43*x73))+(((-1.0)*gconst6*x49*x70))+((x44*x54))+(((-1.0)*gconst15*x51*x60))+(((-1.0)*gconst0*x43*x53))+(((-1.0)*gconst19*x40*x50))+(((-1.0)*gconst12*x43*x44))+(((-1.0)*gconst15*x52*x65))+(((-1.0)*gconst18*x45*x49))+(((-1.0)*gconst15*x64*x65))+((x48*x62))+((x48*x69))+((x40*x53))+(((-1.0)*x53*x76))+(((-1.0)*gconst18*x42*x49))+((x47*x53))+(((-1.0)*gconst12*x39*x43))+(((-1.0)*gconst17*x57*x65)));
op[3]=(((x45*x71))+((x42*x71))+((x60*x61))+((x41*x70))+((x63*x64))+((x52*x63)));
op[4]=((((-1.0)*x44*x76))+(((-1.0)*x39*x76))+((x59*x69))+((x59*x62))+(((-1.0)*gconst0*x43*x44))+(((-1.0)*gconst17*x51*x57))+((x36*x69))+((x36*x62))+((x40*x44))+(((-1.0)*gconst6*x42*x49))+((x37*x67))+(((-1.0)*gconst15*x51*x64))+((x38*x48))+((x39*x47))+((x39*x40))+(((-1.0)*gconst0*x39*x43))+(((-1.0)*gconst15*x51*x52))+(((-1.0)*gconst6*x45*x49))+(((-1.0)*gconst3*x52*x65))+(((-1.0)*gconst12*x43*x46))+(((-1.0)*gconst19*x40*x66))+(((-1.0)*gconst7*x47*x50))+(((-1.0)*gconst2*x42*x50))+((x53*x58))+(((-1.0)*x53*x77))+((x46*x54))+((x44*x47))+(((-1.0)*x56*x75))+(((-1.0)*x57*x75))+(((-1.0)*gconst7*x43*x73))+(((-1.0)*gconst7*x40*x50))+(((-1.0)*gconst19*x61*x72)));
op[5]=(((x41*x42))+((x41*x45))+((x61*x64))+((x63*x68))+((x52*x61))+((x71*x74)));
op[6]=((((-1.0)*gconst7*x61*x72))+((x38*x59))+((x39*x58))+(((-1.0)*gconst7*x40*x66))+(((-1.0)*x44*x77))+(((-1.0)*x39*x77))+(((-1.0)*gconst0*x43*x46))+((x40*x46))+((x36*x38))+(((-1.0)*gconst5*x51*x56))+(((-1.0)*gconst5*x51*x57))+((x44*x58))+((x46*x47))+(((-1.0)*gconst3*x51*x52))+((x62*x67))+(((-1.0)*gconst2*x42*x66))+((x67*x69))+(((-1.0)*x46*x76))+(((-1.0)*gconst7*x47*x66))+(((-1.0)*gconst3*x65*x68))+(((-1.0)*gconst1*x50*x55)));
op[7]=(((x41*x74))+((x61*x68)));
op[8]=(((x38*x67))+(((-1.0)*gconst6*x51*x55))+(((-1.0)*gconst3*x51*x68))+(((-1.0)*x46*x77))+((x46*x58)));
polyroots8(op,zeror,numroots);
IkReal j16array[8], cj16array[8], sj16array[8], tempj16array[1];
int numsolutions = 0;
for(int ij16 = 0; ij16 < numroots; ++ij16)
{
IkReal htj16 = zeror[ij16];
tempj16array[0]=((2.0)*(atan(htj16)));
for(int kj16 = 0; kj16 < 1; ++kj16)
{
j16array[numsolutions] = tempj16array[kj16];
if( j16array[numsolutions] > IKPI )
{
    j16array[numsolutions]-=IK2PI;
}
else if( j16array[numsolutions] < -IKPI )
{
    j16array[numsolutions]+=IK2PI;
}
sj16array[numsolutions] = IKsin(j16array[numsolutions]);
cj16array[numsolutions] = IKcos(j16array[numsolutions]);
numsolutions++;
}
}
bool j16valid[8]={true,true,true,true,true,true,true,true};
_nj16 = 8;
for(int ij16 = 0; ij16 < numsolutions; ++ij16)
    {
if( !j16valid[ij16] )
{
    continue;
}
    j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
htj16 = IKtan(j16/2);

_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < numsolutions; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
{
IkReal j15eval[2];
IkReal x79=cj17*cj17;
IkReal x80=py*py;
IkReal x81=px*px;
IkReal x82=(cj16*sj16);
IkReal x83=((0.866024267562092)*cj17*sj17);
IkReal x84=((3.46408343568754)*cj17*sj17);
IkReal x85=(x79*x81);
IkReal x86=(x79*x80);
j15eval[0]=(((x81*x82*x84))+(((-1.0)*x80*x82))+(((-1.0)*x81*x82))+(((2.0)*x82*x86))+(((2.0)*x82*x85))+((x80*x82*x84)));
j15eval[1]=IKsign(((((0.500001967989669)*x82*x86))+(((0.500001967989669)*x82*x85))+((x81*x82*x83))+(((-0.250000983994834)*x80*x82))+(((-0.250000983994834)*x81*x82))+((x80*x82*x83))));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
{
IkReal j15eval[2];
IkReal x87=cj16*cj16;
IkReal x88=cj17*cj17;
IkReal x89=(cj17*sj17);
IkReal x90=(px*x87);
IkReal x91=(cj16*px*pz);
IkReal x92=(cj16*py*pz*sj16);
j15eval[0]=((((400.0)*x89*x92))+(((-400.0)*x88*x91))+(((-692.816687137509)*x89*x91))+(((-692.816687137509)*x88*x92))+(((-3.46408343568754)*x89*x90))+x90+(((-2.0)*x88*x90))+(((746.406769183216)*x92))+(((200.0)*x91)));
j15eval[1]=IKsign(((((0.00125000491997417)*x90))+(((-0.00433012133781046)*x89*x90))+(((0.500001967989669)*x89*x92))+(((0.933012133781046)*x92))+(((-0.500001967989669)*x88*x91))+(((-0.00250000983994834)*x88*x90))+(((-0.866024267562092)*x89*x91))+(((0.250000983994834)*x91))+(((-0.866024267562092)*x88*x92))));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
{
IkReal j15eval[2];
IkReal x93=cj16*cj16;
IkReal x94=cj17*cj17;
IkReal x95=(py*sj16);
IkReal x96=(cj17*sj17);
IkReal x97=(cj16*px);
IkReal x98=(cj16*x94);
IkReal x99=(cj16*x96);
IkReal x100=(px*pz*x93);
j15eval[0]=((((1492.81353836643)*x100*x94))+(((-746.406769183216)*x100))+(((-2985.61532541263)*pz*x95))+(((2585.61532541263)*x100*x96))+(((-12.9280766270632)*x95*x98))+(((-1.0)*cj16*x95))+(((7.46406769183216)*x95*x99))+(((12.9280766270632)*x96*x97))+(((-3.73203384591608)*x97))+(((7.46406769183216)*x94*x97)));
j15eval[1]=IKsign(((((-0.00125000491997417)*x97))+(((-0.00433012133781046)*x95*x98))+(((-1.0)*pz*x95))+(((0.500001967989669)*x100*x94))+(((0.00250000983994834)*x95*x99))+(((-0.000334939331094769)*cj16*x95))+(((-0.250000983994834)*x100))+(((0.00250000983994834)*x94*x97))+(((0.866024267562092)*x100*x96))+(((0.00433012133781046)*x96*x97))));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j16)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[3];
sj16=1.0;
cj16=0;
j16=1.5707963267949;
j15eval[0]=14.9280766270632;
j15eval[1]=cj17;
j15eval[2]=((px*px)+(py*py));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
j15array[0]=0;
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

IkReal soleval[1];
IkReal x101=(((cj15*py))+(((-1.0)*px*sj15)));
IkReal x102=((-0.005)+((sj16*((((py*sj15))+((cj15*px))))))+(((-1.0)*cj16*pz)));
soleval[0]=((((-0.258820142606703)*cj17*x102))+(((-0.965925532213041)*sj17*x102))+(((-0.258820142606703)*sj17*x101))+(((0.965925532213041)*cj17*x101)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
j15array[0]=0;
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

IkReal soleval[1];
IkReal x103=(((cj15*py))+(((-1.0)*px*sj15)));
IkReal x104=((-0.005)+((sj16*((((py*sj15))+((cj15*px))))))+(((-1.0)*cj16*pz)));
soleval[0]=((((-0.258820142606703)*cj17*x104))+(((-0.965925532213041)*sj17*x104))+(((-0.258820142606703)*sj17*x103))+(((0.965925532213041)*cj17*x103)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
j15array[0]=0;
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

IkReal soleval[1];
IkReal x105=(((cj15*py))+(((-1.0)*px*sj15)));
IkReal x106=((-0.005)+((sj16*((((py*sj15))+((cj15*px))))))+(((-1.0)*cj16*pz)));
soleval[0]=((((-0.258820142606703)*cj17*x106))+(((-0.965925532213041)*sj17*x106))+(((-0.258820142606703)*sj17*x105))+(((0.965925532213041)*cj17*x105)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
j15array[0]=0;
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

IkReal soleval[1];
IkReal x107=(((cj15*py))+(((-1.0)*px*sj15)));
IkReal x108=((-0.005)+((sj16*((((py*sj15))+((cj15*px))))))+(((-1.0)*cj16*pz)));
soleval[0]=((((-0.258820142606703)*cj17*x108))+(((-0.965925532213041)*sj17*x108))+(((-0.258820142606703)*sj17*x107))+(((0.965925532213041)*cj17*x107)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x110 = IKatan2WithCheck(IkReal(((-3.86368692146027)*cj17*py)),IkReal(((3.86368692146027)*cj17*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x110.valid){
continue;
}
IkReal x109=x110.value;
j15array[0]=((-1.0)*x109);
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
j15array[1]=((3.14159265358979)+(((-1.0)*x109)));
sj15array[1]=IKsin(j15array[1]);
cj15array[1]=IKcos(j15array[1]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
if( j15array[1] > IKPI )
{
    j15array[1]-=IK2PI;
}
else if( j15array[1] < -IKPI )
{    j15array[1]+=IK2PI;
}
j15valid[1] = true;
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[1];
IkReal x111=cj17*cj17;
IkReal x112=px*px;
IkReal x113=IKcos(j15);
IkReal x114=IKsin(j15);
IkReal x115=py*py;
IkReal x116=(px*py);
IkReal x117=x113*x113;
IkReal x118=((7.46406769183216)*x111);
IkReal x119=(x111*x115);
IkReal x120=((2.0)*x117);
IkReal x121=(x111*x112);
IkReal x122=((0.866024267562092)*x117);
IkReal x123=(x113*x114);
IkReal x124=(x115*x123);
evalcond[0]=((1.67469665547385e-6)+(((-1.0)*x119*x120))+(((-1.0)*x118*x124))+(((4.0)*x111*x116*x123))+((x112*x122))+(((-0.0669878662189539)*x115))+(((-1.0)*x115*x122))+(((-2.5e-5)*x111))+(((-0.500001967989669)*x116))+(((1.00000393597934)*x116*x117))+x119+(((-0.500001967989669)*x112*x123))+(((-0.933012133781046)*x112))+((x120*x121))+(((0.500001967989669)*x124))+(((-14.9281353836643)*x111*x116*x117))+((x116*x118))+(((-1.0)*x121))+((x112*x118*x123))+(((1.73204853512418)*x116*x123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x125=(((cj15*py))+(((-1.0)*px*sj15)));
IkReal x126=((-0.005)+((sj16*((((py*sj15))+((cj15*px))))))+(((-1.0)*cj16*pz)));
soleval[0]=((((-0.965925532213041)*sj17*x126))+(((-0.258820142606703)*sj17*x125))+(((0.965925532213041)*cj17*x125))+(((-0.258820142606703)*cj17*x126)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j16)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[3];
sj16=-1.0;
cj16=0;
j16=-1.5707963267949;
j15eval[0]=14.9280766270632;
j15eval[1]=cj17;
j15eval[2]=((px*px)+(py*py));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
j15array[0]=0;
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

IkReal soleval[1];
IkReal x127=(((cj15*py))+(((-1.0)*px*sj15)));
IkReal x128=((-0.005)+((sj16*((((py*sj15))+((cj15*px))))))+(((-1.0)*cj16*pz)));
soleval[0]=((((-0.965925532213041)*sj17*x128))+(((-0.258820142606703)*sj17*x127))+(((0.965925532213041)*cj17*x127))+(((-0.258820142606703)*cj17*x128)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
j15array[0]=0;
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

IkReal soleval[1];
IkReal x129=(((cj15*py))+(((-1.0)*px*sj15)));
IkReal x130=((-0.005)+((sj16*((((py*sj15))+((cj15*px))))))+(((-1.0)*cj16*pz)));
soleval[0]=((((-0.965925532213041)*sj17*x130))+(((-0.258820142606703)*sj17*x129))+(((0.965925532213041)*cj17*x129))+(((-0.258820142606703)*cj17*x130)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
j15array[0]=0;
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

IkReal soleval[1];
IkReal x131=(((cj15*py))+(((-1.0)*px*sj15)));
IkReal x132=((-0.005)+((sj16*((((py*sj15))+((cj15*px))))))+(((-1.0)*cj16*pz)));
soleval[0]=((((-0.965925532213041)*sj17*x132))+(((-0.258820142606703)*sj17*x131))+(((0.965925532213041)*cj17*x131))+(((-0.258820142606703)*cj17*x132)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
j15array[0]=0;
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

IkReal soleval[1];
IkReal x133=(((cj15*py))+(((-1.0)*px*sj15)));
IkReal x134=((-0.005)+((sj16*((((py*sj15))+((cj15*px))))))+(((-1.0)*cj16*pz)));
soleval[0]=((((-0.965925532213041)*sj17*x134))+(((-0.258820142606703)*sj17*x133))+(((0.965925532213041)*cj17*x133))+(((-0.258820142606703)*cj17*x134)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x136 = IKatan2WithCheck(IkReal(((-3.86368692146027)*cj17*py)),IkReal(((3.86368692146027)*cj17*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x136.valid){
continue;
}
IkReal x135=x136.value;
j15array[0]=((-1.0)*x135);
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
j15array[1]=((3.14159265358979)+(((-1.0)*x135)));
sj15array[1]=IKsin(j15array[1]);
cj15array[1]=IKcos(j15array[1]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
if( j15array[1] > IKPI )
{
    j15array[1]-=IK2PI;
}
else if( j15array[1] < -IKPI )
{    j15array[1]+=IK2PI;
}
j15valid[1] = true;
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[1];
IkReal x137=IKcos(j15);
IkReal x138=cj17*cj17;
IkReal x139=IKsin(j15);
IkReal x140=px*px;
IkReal x141=py*py;
IkReal x142=(px*py);
IkReal x143=x137*x137;
IkReal x144=(x138*x141);
IkReal x145=((2.0)*x143);
IkReal x146=(x138*x140);
IkReal x147=(x137*x139);
IkReal x148=((0.866024267562092)*x143);
evalcond[0]=((1.67469665547385e-6)+((x140*x148))+(((0.500001967989669)*x140*x147))+(((-0.0669878662189539)*x141))+(((1.73204853512418)*x142*x147))+(((-0.933012133781046)*x140))+(((-2.5e-5)*x138))+(((-1.0)*x144*x145))+((x145*x146))+x144+(((0.500001967989669)*x142))+(((14.9281353836643)*x138*x142*x143))+(((-1.0)*x146))+(((-1.0)*x141*x148))+(((-7.46406769183216)*x146*x147))+(((-7.46406769183216)*x138*x142))+(((7.46406769183216)*x144*x147))+(((4.0)*x138*x142*x147))+(((-0.500001967989669)*x141*x147))+(((-1.00000393597934)*x142*x143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x149=(((cj15*py))+(((-1.0)*px*sj15)));
IkReal x150=((-0.005)+((sj16*((((py*sj15))+((cj15*px))))))+(((-1.0)*cj16*pz)));
soleval[0]=((((0.965925532213041)*cj17*x149))+(((-0.258820142606703)*cj17*x150))+(((-0.965925532213041)*sj17*x150))+(((-0.258820142606703)*sj17*x149)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j16))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[2];
sj16=0;
cj16=1.0;
j16=0;
IkReal x151=cj17*cj17;
IkReal x152=((200.0)*pz);
IkReal x153=(px*pz);
IkReal x154=(cj17*sj17);
j15eval[0]=((((2.0)*px*x151))+(((-1.0)*px*x152))+(((-1.0)*px))+(((692.816687137509)*x153*x154))+(((3.46408343568754)*px*x154))+(((400.0)*x151*x153)));
j15eval[1]=((((746.406769183216)*cj17*pz))+(((-1.0)*sj17*x152))+(((-1.0)*sj17))+(((3.73203384591608)*cj17)));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
{
IkReal j15eval[2];
sj16=0;
cj16=1.0;
j16=0;
IkReal x155=cj17*cj17;
IkReal x156=pz*pz;
IkReal x157=(cj17*sj17);
j15eval[0]=((((3.73203384591608)*px*sj17))+((cj17*px)));
j15eval[1]=((1.0)+(((12.9280766270632)*x155))+(((-40000.0)*x156))+(((-7.46406769183216)*x157))+(((-517123.065082527)*x155*x156))+(((298562.707673286)*x156*x157)));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x160 = px*px;
if(IKabs(x160)==0){
continue;
}
IkReal x158=pow(x160,-0.5);
IkReal x159=(px*x158);
CheckValue<IkReal> x161 = IKatan2WithCheck(IkReal(px),IkReal(((3.73203384591608)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x161.valid){
continue;
}
IkReal gconst38=((-1.0)*(x161.value));
IkReal gconst39=((-0.258820142606703)*x159);
IkReal gconst40=((0.965925532213041)*x159);
CheckValue<IkReal> x162 = IKatan2WithCheck(IkReal(px),IkReal(((3.73203384591608)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x162.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j17+(x162.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
IkReal x163=x158;
IkReal x164=(px*x163);
sj16=0;
cj16=1.0;
j16=0;
sj17=gconst39;
cj17=gconst40;
CheckValue<IkReal> x165 = IKatan2WithCheck(IkReal(px),IkReal(((3.73203385)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x165.valid){
continue;
}
j17=((-1.0)*(x165.value));
CheckValue<IkReal> x166 = IKatan2WithCheck(IkReal(px),IkReal(((3.73203384591608)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x166.valid){
continue;
}
IkReal gconst38=((-1.0)*(x166.value));
IkReal gconst39=((-0.258820142606703)*x164);
IkReal gconst40=((0.965925532213041)*x164);
CheckValue<IkReal> x169=IKPowWithIntegerCheck(px,-2);
if(!x169.valid){
continue;
}
if((x169.value) < -0.00001)
continue;
IkReal x167=IKsqrt(x169.value);
IkReal x168=(px*x167);
j15eval[0]=((((3.86368692146027)*x168))+(((772.737384292055)*pz*x168)));
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j15]

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x172=IKPowWithIntegerCheck(((((0.965925532213041)*gconst40*pz))+(((-0.00129410071303351)*gconst39))+(((-0.258820142606703)*gconst39*pz))+(((0.0048296276610652)*gconst40))),-1);
if(!x172.valid){
continue;
}
IkReal x170=x172.value;
IkReal x171=(py*x170);
cj15array[0]=((((0.258820142606703)*gconst40*x171))+(((0.965925532213041)*gconst39*x171)));
if( cj15array[0] >= -1-IKFAST_SINCOS_THRESH && cj15array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j15valid[0] = j15valid[1] = true;
    j15array[0] = IKacos(cj15array[0]);
    sj15array[0] = IKsin(j15array[0]);
    cj15array[1] = cj15array[0];
    j15array[1] = -j15array[0];
    sj15array[1] = -sj15array[0];
}
else if( isnan(cj15array[0]) )
{
    // probably any value will work
    j15valid[0] = true;
    cj15array[0] = 1; sj15array[0] = 0; j15array[0] = 0;
}
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x173=IKsin(j15);
IkReal x174=IKcos(j15);
IkReal x175=gconst40*gconst40;
IkReal x176=pz*pz;
IkReal x177=py*py;
IkReal x178=px*px;
IkReal x179=(gconst39*gconst40);
IkReal x180=((0.965925532213041)*gconst39);
IkReal x181=((0.258820142606703)*gconst40);
IkReal x182=((1.73204853512418)*pz);
IkReal x183=((0.500001967989669)*pz);
IkReal x184=x174*x174;
IkReal x185=(px*x173);
IkReal x186=((0.500001967989669)*x177);
IkReal x187=(py*x174);
IkReal x188=((0.866024267562092)*x177);
IkReal x189=((0.866024267562092)*x178);
IkReal x190=((0.866024267562092)*x176);
IkReal x191=((0.500001967989669)*x178);
IkReal x192=((0.933012133781046)*x177);
IkReal x193=((0.933012133781046)*x178);
IkReal x194=((1.00000393597934)*pz*x175);
IkReal x195=(x183*x187);
IkReal x196=(x175*x184);
IkReal x197=(x176*x184);
IkReal x198=(x187*x194);
IkReal x199=(x179*x182*x187);
IkReal x200=(x199+x198);
evalcond[0]=(((x180*x185))+(((0.965925532213041)*gconst40*pz))+(((-0.00129410071303351)*gconst39))+(((-1.0)*x180*x187))+(((-0.258820142606703)*gconst39*pz))+(((0.0048296276610652)*gconst40))+((x181*x185))+(((-1.0)*x181*x187)));
evalcond[1]=((((-1.0)*x190*x196))+(((1.67469665547385e-6)*x184))+(((-1.0)*x195))+(((-1.0)*x192))+(((-1.25000491997417e-5)*x179*x184))+(((2.16506066890523e-5)*x196))+((x175*x188))+(((0.500001967989669)*x179*x197))+x200+(((-0.0669878662189539)*x197))+(((-1.0)*x179*x186)));
evalcond[2]=((1.67469665547385e-6)+(((-1.73204853512418)*x175*x185*x187))+(((0.500001967989669)*x176*x179))+(((-1.25000491997417e-5)*x179))+(((-1.0)*x179*x184*x186))+(((-1.0)*x189*x196))+((x188*x196))+(((-1.0)*x193))+(((-1.0)*x195))+((x184*x193))+(((-1.0)*x179*x182*x185))+((x175*x189))+(((2.16506066890523e-5)*x175))+(((1.00000393597934)*x179*x185*x187))+(((1.86602426756209)*x185*x187))+x200+(((-1.0)*x184*x192))+(((-1.0)*x185*x194))+(((-1.0)*x175*x190))+((x179*x184*x191))+(((-0.0669878662189539)*x176))+((x183*x185))+(((-1.0)*x179*x191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x201=(((cj15*py))+(((-1.0)*px*sj15)));
IkReal x202=((-0.005)+((sj16*((((py*sj15))+((cj15*px))))))+(((-1.0)*cj16*pz)));
soleval[0]=((((-0.258820142606703)*cj17*x202))+(((-0.258820142606703)*sj17*x201))+(((0.965925532213041)*cj17*x201))+(((-0.965925532213041)*sj17*x202)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x205 = px*px;
if(IKabs(x205)==0){
continue;
}
IkReal x203=pow(x205,-0.5);
IkReal x204=(px*x203);
CheckValue<IkReal> x206 = IKatan2WithCheck(IkReal(px),IkReal(((3.73203384591608)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x206.valid){
continue;
}
IkReal gconst41=((3.14159265358979)+(((-1.0)*(x206.value))));
IkReal gconst42=((0.258820142606703)*x204);
IkReal gconst43=((-0.965925532213041)*x204);
CheckValue<IkReal> x207 = IKatan2WithCheck(IkReal(px),IkReal(((3.73203384591608)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x207.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17+(x207.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
IkReal x208=x203;
IkReal x209=(px*x208);
sj16=0;
cj16=1.0;
j16=0;
sj17=gconst42;
cj17=gconst43;
CheckValue<IkReal> x210 = IKatan2WithCheck(IkReal(px),IkReal(((3.73203385)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x210.valid){
continue;
}
j17=((3.14159265)+(((-1.0)*(x210.value))));
CheckValue<IkReal> x211 = IKatan2WithCheck(IkReal(px),IkReal(((3.73203384591608)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x211.valid){
continue;
}
IkReal gconst41=((3.14159265358979)+(((-1.0)*(x211.value))));
IkReal gconst42=((0.258820142606703)*x209);
IkReal gconst43=((-0.965925532213041)*x209);
CheckValue<IkReal> x214=IKPowWithIntegerCheck(px,-2);
if(!x214.valid){
continue;
}
if((x214.value) < -0.00001)
continue;
IkReal x212=IKsqrt(x214.value);
IkReal x213=(px*x212);
j15eval[0]=((((-772.737384292055)*pz*x213))+(((-3.86368692146027)*x213)));
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j15]

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x217=IKPowWithIntegerCheck(((((-0.00129410071303351)*gconst42))+(((0.965925532213041)*gconst43*pz))+(((0.0048296276610652)*gconst43))+(((-0.258820142606703)*gconst42*pz))),-1);
if(!x217.valid){
continue;
}
IkReal x215=x217.value;
IkReal x216=(py*x215);
cj15array[0]=((((0.965925532213041)*gconst42*x216))+(((0.258820142606703)*gconst43*x216)));
if( cj15array[0] >= -1-IKFAST_SINCOS_THRESH && cj15array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j15valid[0] = j15valid[1] = true;
    j15array[0] = IKacos(cj15array[0]);
    sj15array[0] = IKsin(j15array[0]);
    cj15array[1] = cj15array[0];
    j15array[1] = -j15array[0];
    sj15array[1] = -sj15array[0];
}
else if( isnan(cj15array[0]) )
{
    // probably any value will work
    j15valid[0] = true;
    cj15array[0] = 1; sj15array[0] = 0; j15array[0] = 0;
}
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x218=IKsin(j15);
IkReal x219=IKcos(j15);
IkReal x220=gconst43*gconst43;
IkReal x221=py*py;
IkReal x222=pz*pz;
IkReal x223=px*px;
IkReal x224=(gconst42*gconst43);
IkReal x225=((0.258820142606703)*gconst43);
IkReal x226=((1.73204853512418)*pz);
IkReal x227=((0.965925532213041)*gconst42);
IkReal x228=((0.500001967989669)*pz);
IkReal x229=x219*x219;
IkReal x230=((0.866024267562092)*x220);
IkReal x231=((0.500001967989669)*x222);
IkReal x232=(py*x219);
IkReal x233=(px*x218);
IkReal x234=((0.0669878662189539)*x222);
IkReal x235=((2.16506066890523e-5)*x220);
IkReal x236=((1.00000393597934)*pz*x220);
IkReal x237=(x228*x232);
IkReal x238=(x223*x229);
IkReal x239=(x221*x229);
IkReal x240=(x224*x226*x232);
IkReal x241=(x232*x236);
IkReal x242=(x241+x240);
evalcond[0]=((((-1.0)*x225*x232))+(((-1.0)*x227*x232))+(((-0.00129410071303351)*gconst42))+((x225*x233))+((x227*x233))+(((0.965925532213041)*gconst43*pz))+(((0.0048296276610652)*gconst43))+(((-0.258820142606703)*gconst42*pz)));
evalcond[1]=((((-1.25000491997417e-5)*x224*x229))+((x229*x235))+(((-1.0)*x222*x229*x230))+(((-0.933012133781046)*x221))+(((-1.0)*x237))+x242+((x224*x229*x231))+((x221*x230))+(((-0.500001967989669)*x221*x224))+(((-1.0)*x229*x234))+(((1.67469665547385e-6)*x229)));
evalcond[2]=((1.67469665547385e-6)+(((0.933012133781046)*x238))+(((-1.0)*x233*x236))+(((-1.73204853512418)*x220*x232*x233))+(((-1.0)*x230*x238))+(((1.86602426756209)*x232*x233))+(((-1.25000491997417e-5)*x224))+((x228*x233))+(((-0.933012133781046)*x223))+(((-1.0)*x224*x226*x233))+(((-0.933012133781046)*x239))+((x230*x239))+(((-1.0)*x234))+(((-1.0)*x237))+x235+x242+((x224*x231))+(((0.500001967989669)*x224*x238))+(((1.00000393597934)*x224*x232*x233))+(((-0.500001967989669)*x224*x239))+((x223*x230))+(((-0.500001967989669)*x223*x224))+(((-1.0)*x222*x230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x243=(((cj15*py))+(((-1.0)*px*sj15)));
IkReal x244=((-0.005)+((sj16*((((py*sj15))+((cj15*px))))))+(((-1.0)*cj16*pz)));
soleval[0]=((((-0.258820142606703)*sj17*x243))+(((0.965925532213041)*cj17*x243))+(((-0.965925532213041)*sj17*x244))+(((-0.258820142606703)*cj17*x244)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x245=((-1.0)+(((-200.0)*pz)));
IkReal x246=((3.73203384591608)+(((746.406769183216)*pz)));
IkReal x248 = ((x246*x246)+(x245*x245));
if(IKabs(x248)==0){
continue;
}
IkReal x247=pow(x248,-0.5);
CheckValue<IkReal> x249 = IKatan2WithCheck(IkReal(x246),IkReal(x245),IKFAST_ATAN2_MAGTHRESH);
if(!x249.valid){
continue;
}
IkReal gconst44=((-1.0)*(x249.value));
IkReal gconst45=((-1.0)*x246*x247);
IkReal gconst46=(x245*x247);
IkReal x250=j17;
CheckValue<IkReal> x253 = IKatan2WithCheck(IkReal(((3.73203384591608)+(((746.406769183216)*pz)))),IkReal(((-1.0)+(((-200.0)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x253.valid){
continue;
}
IkReal x251=x253.value;
IkReal x252=x251;
if(((((j17*x252))+((j17*x250))+((x251*x252))+((x250*x251)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((j17*x252))+((j17*x250))+((x251*x252))+((x250*x251)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x254=IKPowWithIntegerCheck(((((0.258820142606703)*gconst46*px))+(((0.965925532213041)*gconst45*px))),-1);
if(!x254.valid){
continue;
}
CheckValue<IkReal> x255=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x255.valid){
continue;
}
CheckValue<IkReal> x256=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x256.valid){
continue;
}
CheckValue<IkReal> x257=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x257.valid){
continue;
}
if((((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x258=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x258.valid){
continue;
}
if((((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x259=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x259.valid){
continue;
}
CheckValue<IkReal> x260=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x260.valid){
continue;
}
CheckValue<IkReal> x261=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x261.valid){
continue;
}
CheckValue<IkReal> x262=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x262.valid){
continue;
}
CheckValue<IkReal> x263=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x263.valid){
continue;
}
CheckValue<IkReal> x264=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x264.valid){
continue;
}
if((((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x265=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x265.valid){
continue;
}
if( IKabs(((x254.value)*(((((-0.707109191469274)*gconst45*pz*(gconst46*gconst46)*(py*py)*(x255.value)))+(((0.241482333518994)*gconst45*pz*(py*py)*(x256.value)))+(((0.129410071303351)*gconst46*py*(x257.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))))))+(((-0.965925532213041)*gconst46*pz))+(((-0.0048296276610652)*gconst46))+(((0.48296276610652)*gconst45*py*(x258.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))))))+(((-0.836514951554323)*gconst46*pz*(gconst45*gconst45)*(py*py)*(x259.value)))+(((0.258820142606703)*gconst45*pz))+(((0.00129410071303351)*gconst45))+(((-0.129410580658718)*pz*(gconst46*gconst46*gconst46)*(py*py)*(x260.value)))+(((0.064705290329359)*gconst46*pz*(py*py)*(x261.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.250000983994834)*py*pz*(x262.value)))+(((-0.866024267562092)*gconst45*gconst46*py*pz*(x263.value)))+(((0.5)*(x264.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))))))+(((-0.500001967989669)*py*pz*(gconst46*gconst46)*(x265.value))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x254.value)*(((((-0.707109191469274)*gconst45*pz*(gconst46*gconst46)*(py*py)*(x255.value)))+(((0.241482333518994)*gconst45*pz*(py*py)*(x256.value)))+(((0.129410071303351)*gconst46*py*(x257.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))))))+(((-0.965925532213041)*gconst46*pz))+(((-0.0048296276610652)*gconst46))+(((0.48296276610652)*gconst45*py*(x258.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))))))+(((-0.836514951554323)*gconst46*pz*(gconst45*gconst45)*(py*py)*(x259.value)))+(((0.258820142606703)*gconst45*pz))+(((0.00129410071303351)*gconst45))+(((-0.129410580658718)*pz*(gconst46*gconst46*gconst46)*(py*py)*(x260.value)))+(((0.064705290329359)*gconst46*pz*(py*py)*(x261.value)))))))+IKsqr(((((0.250000983994834)*py*pz*(x262.value)))+(((-0.866024267562092)*gconst45*gconst46*py*pz*(x263.value)))+(((0.5)*(x264.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))))))+(((-0.500001967989669)*py*pz*(gconst46*gconst46)*(x265.value)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x254.value)*(((((-0.707109191469274)*gconst45*pz*(gconst46*gconst46)*(py*py)*(x255.value)))+(((0.241482333518994)*gconst45*pz*(py*py)*(x256.value)))+(((0.129410071303351)*gconst46*py*(x257.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))))))+(((-0.965925532213041)*gconst46*pz))+(((-0.0048296276610652)*gconst46))+(((0.48296276610652)*gconst45*py*(x258.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))))))+(((-0.836514951554323)*gconst46*pz*(gconst45*gconst45)*(py*py)*(x259.value)))+(((0.258820142606703)*gconst45*pz))+(((0.00129410071303351)*gconst45))+(((-0.129410580658718)*pz*(gconst46*gconst46*gconst46)*(py*py)*(x260.value)))+(((0.064705290329359)*gconst46*pz*(py*py)*(x261.value)))))), ((((0.250000983994834)*py*pz*(x262.value)))+(((-0.866024267562092)*gconst45*gconst46*py*pz*(x263.value)))+(((0.5)*(x264.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))))))+(((-0.500001967989669)*py*pz*(gconst46*gconst46)*(x265.value)))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
CheckValue<IkReal> x266=IKPowWithIntegerCheck(((((0.258820142606703)*gconst46*px))+(((0.965925532213041)*gconst45*px))),-1);
if(!x266.valid){
continue;
}
CheckValue<IkReal> x267=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x267.valid){
continue;
}
CheckValue<IkReal> x268=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x268.valid){
continue;
}
CheckValue<IkReal> x269=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x269.valid){
continue;
}
CheckValue<IkReal> x270=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x270.valid){
continue;
}
if((((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x271=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x271.valid){
continue;
}
CheckValue<IkReal> x272=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x272.valid){
continue;
}
CheckValue<IkReal> x273=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x273.valid){
continue;
}
if((((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x274=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x274.valid){
continue;
}
CheckValue<IkReal> x275=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x275.valid){
continue;
}
CheckValue<IkReal> x276=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x276.valid){
continue;
}
if((((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x277=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((0.500001967989669)*gconst45*gconst46*(pz*pz)))+(((-1.25000491997417e-5)*gconst45*gconst46))+(((2.16506066890523e-5)*(gconst46*gconst46)))+(((-0.0669878662189539)*(pz*pz)))+(((-0.866024267562092)*(gconst46*gconst46)*(pz*pz)))),-1);
if(!x277.valid){
continue;
}
if( IKabs(((x266.value)*(((((-0.707109191469274)*gconst45*pz*(gconst46*gconst46)*(py*py)*(x267.value)))+(((0.241482333518994)*gconst45*pz*(py*py)*(x268.value)))+(((-0.965925532213041)*gconst46*pz))+(((-0.0048296276610652)*gconst46))+(((-0.836514951554323)*gconst46*pz*(gconst45*gconst45)*(py*py)*(x269.value)))+(((0.258820142606703)*gconst45*pz))+(((-0.129410071303351)*gconst46*py*(x270.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))))))+(((0.00129410071303351)*gconst45))+(((-0.129410580658718)*pz*(gconst46*gconst46*gconst46)*(py*py)*(x271.value)))+(((0.064705290329359)*gconst46*pz*(py*py)*(x272.value)))+(((-0.48296276610652)*gconst45*py*(x273.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz)))))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.250000983994834)*py*pz*(x274.value)))+(((-0.866024267562092)*gconst45*gconst46*py*pz*(x275.value)))+(((-0.5)*(x276.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))))))+(((-0.500001967989669)*py*pz*(gconst46*gconst46)*(x277.value))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x266.value)*(((((-0.707109191469274)*gconst45*pz*(gconst46*gconst46)*(py*py)*(x267.value)))+(((0.241482333518994)*gconst45*pz*(py*py)*(x268.value)))+(((-0.965925532213041)*gconst46*pz))+(((-0.0048296276610652)*gconst46))+(((-0.836514951554323)*gconst46*pz*(gconst45*gconst45)*(py*py)*(x269.value)))+(((0.258820142606703)*gconst45*pz))+(((-0.129410071303351)*gconst46*py*(x270.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))))))+(((0.00129410071303351)*gconst45))+(((-0.129410580658718)*pz*(gconst46*gconst46*gconst46)*(py*py)*(x271.value)))+(((0.064705290329359)*gconst46*pz*(py*py)*(x272.value)))+(((-0.48296276610652)*gconst45*py*(x273.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))))))))))+IKsqr(((((0.250000983994834)*py*pz*(x274.value)))+(((-0.866024267562092)*gconst45*gconst46*py*pz*(x275.value)))+(((-0.5)*(x276.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))))))+(((-0.500001967989669)*py*pz*(gconst46*gconst46)*(x277.value)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[1]=IKatan2(((x266.value)*(((((-0.707109191469274)*gconst45*pz*(gconst46*gconst46)*(py*py)*(x267.value)))+(((0.241482333518994)*gconst45*pz*(py*py)*(x268.value)))+(((-0.965925532213041)*gconst46*pz))+(((-0.0048296276610652)*gconst46))+(((-0.836514951554323)*gconst46*pz*(gconst45*gconst45)*(py*py)*(x269.value)))+(((0.258820142606703)*gconst45*pz))+(((-0.129410071303351)*gconst46*py*(x270.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))))))+(((0.00129410071303351)*gconst45))+(((-0.129410580658718)*pz*(gconst46*gconst46*gconst46)*(py*py)*(x271.value)))+(((0.064705290329359)*gconst46*pz*(py*py)*(x272.value)))+(((-0.48296276610652)*gconst45*py*(x273.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))))))))), ((((0.250000983994834)*py*pz*(x274.value)))+(((-0.866024267562092)*gconst45*gconst46*py*pz*(x275.value)))+(((-0.5)*(x276.value)*(IKsqrt(((((7.49998032006458e-5)*(gconst46*gconst46)*(py*py)))+(((-4.33013838107857e-5)*gconst45*gconst46*(py*py)))+(((-7.49998032006458e-5)*(gconst46*gconst46*gconst46*gconst46)*(py*py)))+(((-2.50001967993542e-5)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.0)*(gconst46*gconst46)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst45*(gconst46*gconst46*gconst46)*(py*py)))+(((4.0)*(gconst46*gconst46*gconst46*gconst46)*(py*py)*(pz*pz)))+(((4.0)*(gconst45*gconst45)*(gconst46*gconst46)*(py*py)*(pz*pz))))))))+(((-0.500001967989669)*py*pz*(gconst46*gconst46)*(x277.value)))));
sj15array[1]=IKsin(j15array[1]);
cj15array[1]=IKcos(j15array[1]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
if( j15array[1] > IKPI )
{
    j15array[1]-=IK2PI;
}
else if( j15array[1] < -IKPI )
{    j15array[1]+=IK2PI;
}
j15valid[1] = true;
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[4];
IkReal x278=IKcos(j15);
IkReal x279=IKsin(j15);
IkReal x280=gconst46*gconst46;
IkReal x281=pz*pz;
IkReal x282=py*py;
IkReal x283=px*px;
IkReal x284=(gconst45*gconst46);
IkReal x285=((1.73204853512418)*pz);
IkReal x286=(gconst46*py);
IkReal x287=((0.258820142606703)*pz);
IkReal x288=((0.965925532213041)*gconst45);
IkReal x289=((0.500001967989669)*pz);
IkReal x290=((0.0048296276610652)*gconst46);
IkReal x291=x278*x278;
IkReal x292=(gconst45*x278);
IkReal x293=((0.0669878662189539)*x281);
IkReal x294=(px*x279);
IkReal x295=((0.866024267562092)*x280);
IkReal x296=(py*x278);
IkReal x297=((0.965925532213041)*gconst46*pz);
IkReal x298=((2.16506066890523e-5)*x280);
IkReal x299=((0.500001967989669)*x283);
IkReal x300=((0.933012133781046)*x283);
IkReal x301=((1.00000393597934)*pz*x280);
IkReal x302=(x289*x296);
IkReal x303=(x281*x291);
IkReal x304=(x282*x291);
IkReal x305=(x296*x301);
IkReal x306=(x284*x285*x296);
IkReal x307=(x306+x305);
evalcond[0]=((((-0.258820142606703)*x286))+((x278*x290))+((x278*x297))+(((-1.0)*py*x288))+(((-1.0)*x287*x292))+(((-0.00129410071303351)*x292)));
evalcond[1]=((((-0.258820142606703)*x278*x286))+x290+x297+(((-0.00129410071303351)*gconst45))+(((-1.0)*x288*x296))+(((-1.0)*gconst45*x287))+(((0.258820142606703)*gconst46*x294))+((x288*x294)));
evalcond[2]=(((x291*x298))+(((-1.0)*x291*x293))+((x282*x295))+(((-1.0)*x295*x303))+(((-1.25000491997417e-5)*x284*x291))+(((-0.500001967989669)*x282*x284))+x307+(((0.500001967989669)*x284*x303))+(((1.67469665547385e-6)*x291))+(((-0.933012133781046)*x282))+(((-1.0)*x302)));
evalcond[3]=((1.67469665547385e-6)+(((-1.0)*x284*x299))+((x289*x294))+(((-1.0)*x283*x291*x295))+(((-0.500001967989669)*x284*x304))+((x291*x300))+(((0.500001967989669)*x281*x284))+(((-1.0)*x294*x301))+(((-1.0)*x293))+(((1.86602426756209)*x294*x296))+(((-1.25000491997417e-5)*x284))+((x283*x295))+(((-0.933012133781046)*x304))+x307+x298+((x284*x291*x299))+((x295*x304))+(((-1.0)*x284*x285*x294))+(((1.00000393597934)*x284*x294*x296))+(((-1.73204853512418)*x280*x294*x296))+(((-1.0)*x281*x295))+(((-1.0)*x300))+(((-1.0)*x302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x308=(((cj15*py))+(((-1.0)*px*sj15)));
IkReal x309=((-0.005)+((sj16*((((py*sj15))+((cj15*px))))))+(((-1.0)*cj16*pz)));
soleval[0]=((((-0.965925532213041)*sj17*x309))+(((-0.258820142606703)*sj17*x308))+(((0.965925532213041)*cj17*x308))+(((-0.258820142606703)*cj17*x309)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x310=((-1.0)+(((-200.0)*pz)));
IkReal x311=((3.73203384591608)+(((746.406769183216)*pz)));
IkReal x313 = ((x311*x311)+(x310*x310));
if(IKabs(x313)==0){
continue;
}
IkReal x312=pow(x313,-0.5);
CheckValue<IkReal> x314 = IKatan2WithCheck(IkReal(x311),IkReal(x310),IKFAST_ATAN2_MAGTHRESH);
if(!x314.valid){
continue;
}
IkReal gconst47=((3.14159265358979)+(((-1.0)*(x314.value))));
IkReal gconst48=((1.0)*x311*x312);
IkReal gconst49=((-1.0)*x310*x312);
IkReal x315=j17;
CheckValue<IkReal> x318 = IKatan2WithCheck(IkReal(((3.73203384591608)+(((746.406769183216)*pz)))),IkReal(((-1.0)+(((-200.0)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x318.valid){
continue;
}
IkReal x316=x318.value;
IkReal x317=x316;
if((((9.86960440108936)+((j17*x317))+((j17*x315))+((x315*x316))+(((-3.14159265358979)*x317))+(((-3.14159265358979)*x316))+(((-3.14159265358979)*x315))+(((-3.14159265358979)*j17))+((x316*x317)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+((j17*x317))+((j17*x315))+((x315*x316))+(((-3.14159265358979)*x317))+(((-3.14159265358979)*x316))+(((-3.14159265358979)*x315))+(((-3.14159265358979)*j17))+((x316*x317)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x319=py*py;
IkReal x320=gconst49*gconst49;
IkReal x321=gconst48*gconst48;
IkReal x322=pz*pz;
IkReal x323=(gconst49*pz);
IkReal x324=((0.00125000491997417)*px);
IkReal x325=((0.250000983994834)*px);
IkReal x326=(gconst48*gconst49);
IkReal x327=(pz*x321);
IkReal x328=(pz*x320);
CheckValue<IkReal> x329=IKPowWithIntegerCheck((((x325*x328))+(((-1.0)*x321*x324))+((x320*x324))+(((-1.0)*x325*x327))+(((0.866024267562092)*gconst48*px*x323))+(((0.00433012133781046)*px*x326))),-1);
if(!x329.valid){
continue;
}
CheckValue<IkReal> x330=IKPowWithIntegerCheck(((((0.965925532213041)*x323))+(((-0.258820142606703)*gconst48*pz))+(((-0.00129410071303351)*gconst48))+(((0.0048296276610652)*gconst49))),-1);
if(!x330.valid){
continue;
}
if( IKabs(((x329.value)*(((((-0.0669878662189539)*x321*x322))+(((-2.33253033445262e-5)*x320))+(((1.25000491997417e-5)*x326))+(((0.500001967989669)*x322*x326))+(((0.933012133781046)*x319*x321))+(((0.500001967989669)*x319*x326))+(((-0.000669878662189539)*x327))+(((-0.933012133781046)*x320*x322))+(((-1.67469665547385e-6)*x321))+(((0.00500001967989669)*gconst48*x323))+(((0.0669878662189539)*x319*x320))+(((-0.00933012133781046)*x328)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x330.value)*(((((0.965925532213041)*gconst48*py))+(((0.258820142606703)*gconst49*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x329.value)*(((((-0.0669878662189539)*x321*x322))+(((-2.33253033445262e-5)*x320))+(((1.25000491997417e-5)*x326))+(((0.500001967989669)*x322*x326))+(((0.933012133781046)*x319*x321))+(((0.500001967989669)*x319*x326))+(((-0.000669878662189539)*x327))+(((-0.933012133781046)*x320*x322))+(((-1.67469665547385e-6)*x321))+(((0.00500001967989669)*gconst48*x323))+(((0.0669878662189539)*x319*x320))+(((-0.00933012133781046)*x328))))))+IKsqr(((x330.value)*(((((0.965925532213041)*gconst48*py))+(((0.258820142606703)*gconst49*py))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x329.value)*(((((-0.0669878662189539)*x321*x322))+(((-2.33253033445262e-5)*x320))+(((1.25000491997417e-5)*x326))+(((0.500001967989669)*x322*x326))+(((0.933012133781046)*x319*x321))+(((0.500001967989669)*x319*x326))+(((-0.000669878662189539)*x327))+(((-0.933012133781046)*x320*x322))+(((-1.67469665547385e-6)*x321))+(((0.00500001967989669)*gconst48*x323))+(((0.0669878662189539)*x319*x320))+(((-0.00933012133781046)*x328))))), ((x330.value)*(((((0.965925532213041)*gconst48*py))+(((0.258820142606703)*gconst49*py))))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[4];
IkReal x331=IKcos(j15);
IkReal x332=IKsin(j15);
IkReal x333=gconst49*gconst49;
IkReal x334=pz*pz;
IkReal x335=py*py;
IkReal x336=px*px;
IkReal x337=((0.965925532213041)*gconst48);
IkReal x338=((0.258820142606703)*gconst49);
IkReal x339=((0.0048296276610652)*gconst49);
IkReal x340=(py*pz);
IkReal x341=((1.73204853512418)*gconst49);
IkReal x342=(gconst48*pz);
IkReal x343=(gconst48*gconst49);
IkReal x344=x331*x331;
IkReal x345=(px*x332);
IkReal x346=(gconst48*x331);
IkReal x347=((1.00000393597934)*x333);
IkReal x348=((0.866024267562092)*x333);
IkReal x349=((0.500001967989669)*x336);
IkReal x350=(py*x331);
IkReal x351=((0.0669878662189539)*x334);
IkReal x352=((0.500001967989669)*x335);
IkReal x353=((0.965925532213041)*gconst49*pz);
IkReal x354=((0.500001967989669)*x334);
IkReal x355=((0.933012133781046)*x344);
IkReal x356=((0.500001967989669)*x331*x340);
IkReal x357=(x333*x344);
IkReal x358=(x343*x344);
IkReal x359=(x340*x341*x346);
IkReal x360=(x331*x340*x347);
IkReal x361=(x359+x360);
evalcond[0]=((((-0.00129410071303351)*x346))+((x331*x339))+((x331*x353))+(((-1.0)*py*x337))+(((-1.0)*py*x338))+(((-0.258820142606703)*x331*x342)));
evalcond[1]=(((x337*x345))+(((-1.0)*x338*x350))+x339+x353+(((-0.00129410071303351)*gconst48))+(((-0.258820142606703)*x342))+((x338*x345))+(((-1.0)*x337*x350)));
evalcond[2]=(((x335*x348))+(((1.67469665547385e-6)*x344))+(((-1.0)*x356))+(((-1.25000491997417e-5)*x358))+(((2.16506066890523e-5)*x357))+x361+((x354*x358))+(((-1.0)*x343*x352))+(((-1.0)*x344*x351))+(((-0.933012133781046)*x335))+(((-1.0)*x334*x344*x348)));
evalcond[3]=((1.67469665547385e-6)+(((-1.0)*x334*x348))+((x336*x348))+(((0.500001967989669)*pz*x345))+(((-1.0)*x351))+(((-1.0)*x356))+(((-1.25000491997417e-5)*x343))+(((-1.73204853512418)*x333*x345*x350))+((x336*x355))+x361+(((2.16506066890523e-5)*x333))+((x335*x344*x348))+(((-0.933012133781046)*x336))+((x343*x354))+((x349*x358))+(((1.00000393597934)*x343*x345*x350))+(((-1.0)*x343*x349))+(((-1.0)*x336*x344*x348))+(((-1.0)*pz*x345*x347))+(((1.86602426756209)*x345*x350))+(((-1.0)*x341*x342*x345))+(((-1.0)*x352*x358))+(((-1.0)*x335*x355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x362=(((cj15*py))+(((-1.0)*px*sj15)));
IkReal x363=((-0.005)+((sj16*((((py*sj15))+((cj15*px))))))+(((-1.0)*cj16*pz)));
soleval[0]=((((0.965925532213041)*cj17*x362))+(((-0.965925532213041)*sj17*x363))+(((-0.258820142606703)*cj17*x363))+(((-0.258820142606703)*sj17*x362)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(px);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
sj16=0;
cj16=1.0;
j16=0;
px=0;
pp=((py*py)+(pz*pz));
j15eval[0]=((((746.406769183216)*cj17*pz))+(((-1.0)*sj17))+(((-200.0)*pz*sj17))+(((3.73203384591608)*cj17)));
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
sj16=0;
cj16=1.0;
j16=0;
px=0;
pp=((py*py)+(pz*pz));
j15eval[0]=((((-3.73203384591608)*py*sj17))+(((-1.0)*cj17*py)));
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
sj16=0;
cj16=1.0;
j16=0;
px=0;
pp=((py*py)+(pz*pz));
IkReal x364=py*py;
j15eval[0]=((((-1.0)*cj17*sj17*x364))+(((1.73204171784377)*x364*(cj17*cj17)))+(((-1.86601692295804)*x364)));
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(py);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[4], cj15array[4], sj15array[4];
bool j15valid[4]={false};
_nj15 = 4;
j15array[0]=0;
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
j15array[1]=1.5707963267949;
sj15array[1]=IKsin(j15array[1]);
cj15array[1]=IKcos(j15array[1]);
j15array[2]=3.14159265358979;
sj15array[2]=IKsin(j15array[2]);
cj15array[2]=IKcos(j15array[2]);
j15array[3]=-1.5707963267949;
sj15array[3]=IKsin(j15array[3]);
cj15array[3]=IKcos(j15array[3]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
if( j15array[1] > IKPI )
{
    j15array[1]-=IK2PI;
}
else if( j15array[1] < -IKPI )
{    j15array[1]+=IK2PI;
}
j15valid[1] = true;
if( j15array[2] > IKPI )
{
    j15array[2]-=IK2PI;
}
else if( j15array[2] < -IKPI )
{    j15array[2]+=IK2PI;
}
j15valid[2] = true;
if( j15array[3] > IKPI )
{
    j15array[3]-=IK2PI;
}
else if( j15array[3] < -IKPI )
{    j15array[3]+=IK2PI;
}
j15valid[3] = true;
for(int ij15 = 0; ij15 < 4; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 4; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

IkReal soleval[1];
IkReal x365=(((cj15*py))+(((-1.0)*px*sj15)));
IkReal x366=((-0.005)+((sj16*((((py*sj15))+((cj15*px))))))+(((-1.0)*cj16*pz)));
soleval[0]=((((0.965925532213041)*cj17*x365))+(((-0.965925532213041)*sj17*x366))+(((-0.258820142606703)*cj17*x366))+(((-0.258820142606703)*sj17*x365)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j15array[4], cj15array[4], sj15array[4];
bool j15valid[4]={false};
_nj15 = 4;
IkReal x367=py*py;
IkReal x368=cj17*cj17;
IkReal x369=((4.99996064012917e-5)*x367);
IkReal x370=(cj17*sj17*x367);
CheckValue<IkReal> x378=IKPowWithIntegerCheck(((((-0.933012133781046)*x367))+(((0.866024267562092)*x367*x368))+(((-0.500001967989669)*x370))),-1);
if(!x378.valid){
continue;
}
IkReal x371=x378.value;
IkReal x372=(py*pz*x371);
IkReal x373=((0.250000983994834)*x372);
IkReal x374=((0.866024267562092)*cj17*sj17*x372);
IkReal x375=((0.500001967989669)*x368*x372);
IkReal x376=(x375+x374);
if((((((8.66027676215715e-5)*x370*(cj17*cj17)))+(((6.25004919983854e-6)*x367))+(((-1.0)*x369*(x368*x368)))+((x368*x369))+(((-4.33013838107857e-5)*x370)))) < -0.00001)
continue;
IkReal x377=((0.5)*x371*(IKsqrt(((((8.66027676215715e-5)*x370*(cj17*cj17)))+(((6.25004919983854e-6)*x367))+(((-1.0)*x369*(x368*x368)))+((x368*x369))+(((-4.33013838107857e-5)*x370))))));
cj15array[0]=((((-1.0)*x376))+x377+x373);
cj15array[2]=((((-1.0)*x376))+(((-1.0)*x377))+x373);
if( cj15array[0] >= -1-IKFAST_SINCOS_THRESH && cj15array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j15valid[0] = j15valid[1] = true;
    j15array[0] = IKacos(cj15array[0]);
    sj15array[0] = IKsin(j15array[0]);
    cj15array[1] = cj15array[0];
    j15array[1] = -j15array[0];
    sj15array[1] = -sj15array[0];
}
else if( isnan(cj15array[0]) )
{
    // probably any value will work
    j15valid[0] = true;
    cj15array[0] = 1; sj15array[0] = 0; j15array[0] = 0;
}
if( cj15array[2] >= -1-IKFAST_SINCOS_THRESH && cj15array[2] <= 1+IKFAST_SINCOS_THRESH )
{
    j15valid[2] = j15valid[3] = true;
    j15array[2] = IKacos(cj15array[2]);
    sj15array[2] = IKsin(j15array[2]);
    cj15array[3] = cj15array[2];
    j15array[3] = -j15array[2];
    sj15array[3] = -sj15array[2];
}
else if( isnan(cj15array[2]) )
{
    // probably any value will work
    j15valid[2] = true;
    cj15array[2] = 1; sj15array[2] = 0; j15array[2] = 0;
}
for(int ij15 = 0; ij15 < 4; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 4; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x379=IKcos(j15);
IkReal x380=cj17*cj17;
IkReal x381=pz*pz;
IkReal x382=py*py;
IkReal x383=(py*sj17);
IkReal x384=((0.0048296276610652)*cj17);
IkReal x385=((0.00129410071303351)*sj17);
IkReal x386=x379*x379;
IkReal x387=((0.500001967989669)*cj17*sj17);
IkReal x388=((0.965925532213041)*cj17*pz);
IkReal x389=((0.866024267562092)*x380);
IkReal x390=((0.258820142606703)*pz*sj17);
IkReal x391=((0.258820142606703)*cj17*py);
IkReal x392=(pz*x379);
IkReal x393=(x381*x386);
evalcond[0]=((((-0.965925532213041)*x379*x383))+(((-1.0)*x390))+x384+x388+(((-1.0)*x385))+(((-1.0)*x379*x391)));
evalcond[1]=((((-1.0)*x391))+(((-1.0)*x379*x385))+((x379*x384))+((x379*x388))+(((-1.0)*x379*x390))+(((-0.965925532213041)*x383)));
evalcond[2]=((((-0.0669878662189539)*x393))+(((-1.25000491997417e-5)*cj17*sj17*x386))+(((-1.0)*x389*x393))+(((1.73204853512418)*cj17*x383*x392))+((x382*x389))+(((-0.500001967989669)*py*x392))+(((1.00000393597934)*py*x380*x392))+((x387*x393))+(((2.16506066890523e-5)*x380*x386))+(((-0.933012133781046)*x382))+(((-1.0)*x382*x387))+(((1.67469665547385e-6)*x386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x394=(((cj15*py))+(((-1.0)*px*sj15)));
IkReal x395=((-0.005)+((sj16*((((py*sj15))+((cj15*px))))))+(((-1.0)*cj16*pz)));
soleval[0]=((((-0.965925532213041)*sj17*x395))+(((0.965925532213041)*cj17*x394))+(((-0.258820142606703)*sj17*x394))+(((-0.258820142606703)*cj17*x395)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x400=IKPowWithIntegerCheck(((((-0.965925532213041)*py*sj17))+(((-0.258820142606703)*cj17*py))),-1);
if(!x400.valid){
continue;
}
IkReal x396=x400.value;
IkReal x397=(pz*x396);
IkReal x398=(cj17*x396);
IkReal x399=(sj17*x396);
cj15array[0]=((((-0.965925532213041)*cj17*x397))+(((0.258820142606703)*sj17*x397))+(((0.00129410071303351)*x399))+(((-0.0048296276610652)*x398)));
if( cj15array[0] >= -1-IKFAST_SINCOS_THRESH && cj15array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j15valid[0] = j15valid[1] = true;
    j15array[0] = IKacos(cj15array[0]);
    sj15array[0] = IKsin(j15array[0]);
    cj15array[1] = cj15array[0];
    j15array[1] = -j15array[0];
    sj15array[1] = -sj15array[0];
}
else if( isnan(cj15array[0]) )
{
    // probably any value will work
    j15valid[0] = true;
    cj15array[0] = 1; sj15array[0] = 0; j15array[0] = 0;
}
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x401=IKcos(j15);
IkReal x402=cj17*cj17;
IkReal x403=py*py;
IkReal x404=pz*pz;
IkReal x405=(py*sj17);
IkReal x406=(cj17*sj17);
IkReal x407=x401*x401;
IkReal x408=(cj17*x401);
IkReal x409=((0.866024267562092)*x402);
IkReal x410=((0.500001967989669)*x403);
IkReal x411=(sj17*x401);
IkReal x412=((2.16506066890523e-5)*x402);
IkReal x413=((0.933012133781046)*x403);
IkReal x414=(py*pz*x401);
IkReal x415=((0.500001967989669)*x414);
IkReal x416=(x404*x407);
IkReal x417=((1.73204853512418)*pz*x405*x408);
IkReal x418=((1.00000393597934)*x402*x414);
IkReal x419=(x417+x418);
evalcond[0]=((((0.965925532213041)*pz*x408))+(((-0.00129410071303351)*x411))+(((-0.258820142606703)*cj17*py))+(((0.0048296276610652)*x408))+(((-0.965925532213041)*x405))+(((-0.258820142606703)*pz*x411)));
evalcond[1]=((1.67469665547385e-6)+(((-1.25000491997417e-5)*x406))+((x403*x407*x409))+x412+x419+(((-1.0)*x404*x409))+(((-0.0669878662189539)*x404))+(((-1.0)*x407*x413))+(((-1.0)*x406*x407*x410))+(((-1.0)*x415))+(((0.500001967989669)*x404*x406)));
evalcond[2]=(((x407*x412))+(((0.500001967989669)*x406*x416))+(((-1.0)*x406*x410))+(((-1.25000491997417e-5)*x406*x407))+(((1.67469665547385e-6)*x407))+x419+(((-0.0669878662189539)*x416))+(((-1.0)*x415))+(((-1.0)*x413))+((x403*x409))+(((-1.0)*x409*x416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x420=(((cj15*py))+(((-1.0)*px*sj15)));
IkReal x421=((-0.005)+((sj16*((((py*sj15))+((cj15*px))))))+(((-1.0)*cj16*pz)));
soleval[0]=((((-0.258820142606703)*cj17*x421))+(((-0.965925532213041)*sj17*x421))+(((-0.258820142606703)*sj17*x420))+(((0.965925532213041)*cj17*x420)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x424=IKPowWithIntegerCheck(((((0.0048296276610652)*cj17))+(((-0.258820142606703)*pz*sj17))+(((0.965925532213041)*cj17*pz))+(((-0.00129410071303351)*sj17))),-1);
if(!x424.valid){
continue;
}
IkReal x422=x424.value;
IkReal x423=(py*x422);
cj15array[0]=((((0.965925532213041)*sj17*x423))+(((0.258820142606703)*cj17*x423)));
if( cj15array[0] >= -1-IKFAST_SINCOS_THRESH && cj15array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j15valid[0] = j15valid[1] = true;
    j15array[0] = IKacos(cj15array[0]);
    sj15array[0] = IKsin(j15array[0]);
    cj15array[1] = cj15array[0];
    j15array[1] = -j15array[0];
    sj15array[1] = -sj15array[0];
}
else if( isnan(cj15array[0]) )
{
    // probably any value will work
    j15valid[0] = true;
    cj15array[0] = 1; sj15array[0] = 0; j15array[0] = 0;
}
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x425=IKcos(j15);
IkReal x426=cj17*cj17;
IkReal x427=py*py;
IkReal x428=pz*pz;
IkReal x429=(cj17*sj17);
IkReal x430=x425*x425;
IkReal x431=((0.866024267562092)*x426);
IkReal x432=((0.500001967989669)*x427);
IkReal x433=((2.16506066890523e-5)*x426);
IkReal x434=(py*x425);
IkReal x435=((0.933012133781046)*x427);
IkReal x436=((0.500001967989669)*pz*x434);
IkReal x437=(x428*x430);
IkReal x438=((1.73204853512418)*pz*x429*x434);
IkReal x439=((1.00000393597934)*pz*x426*x434);
IkReal x440=(x438+x439);
evalcond[0]=((((0.0048296276610652)*cj17))+(((-0.258820142606703)*pz*sj17))+(((-0.258820142606703)*cj17*x434))+(((0.965925532213041)*cj17*pz))+(((-0.00129410071303351)*sj17))+(((-0.965925532213041)*sj17*x434)));
evalcond[1]=((1.67469665547385e-6)+(((-1.0)*x430*x435))+(((-1.0)*x436))+(((-1.25000491997417e-5)*x429))+(((-1.0)*x429*x430*x432))+((x427*x430*x431))+x433+x440+(((0.500001967989669)*x428*x429))+(((-0.0669878662189539)*x428))+(((-1.0)*x428*x431)));
evalcond[2]=((((-1.25000491997417e-5)*x429*x430))+(((-1.0)*x436))+(((-1.0)*x435))+(((-1.0)*x431*x437))+(((-1.0)*x429*x432))+x440+(((1.67469665547385e-6)*x430))+((x430*x433))+(((0.500001967989669)*x429*x437))+(((-0.0669878662189539)*x437))+((x427*x431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x441=(((cj15*py))+(((-1.0)*px*sj15)));
IkReal x442=((-0.005)+((sj16*((((py*sj15))+((cj15*px))))))+(((-1.0)*cj16*pz)));
soleval[0]=((((-0.965925532213041)*sj17*x442))+(((0.965925532213041)*cj17*x441))+(((-0.258820142606703)*cj17*x442))+(((-0.258820142606703)*sj17*x441)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x443=IKPowWithIntegerCheck(((((0.965925532213041)*px*sj17))+(((0.258820142606703)*cj17*px))),-1);
if(!x443.valid){
continue;
}
CheckValue<IkReal> x444=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x444.valid){
continue;
}
CheckValue<IkReal> x445=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x445.valid){
continue;
}
if((((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x446=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x446.valid){
continue;
}
CheckValue<IkReal> x447=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x447.valid){
continue;
}
if((((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x448=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x448.valid){
continue;
}
CheckValue<IkReal> x449=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x449.valid){
continue;
}
CheckValue<IkReal> x450=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x450.valid){
continue;
}
CheckValue<IkReal> x451=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x451.valid){
continue;
}
CheckValue<IkReal> x452=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x452.valid){
continue;
}
if((((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x453=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x453.valid){
continue;
}
if( IKabs(((x443.value)*(((((0.241482333518994)*pz*sj17*(py*py)*(x444.value)))+(((-0.0048296276610652)*cj17))+(((0.129410071303351)*cj17*py*(x445.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))+(((0.00129410071303351)*sj17))+(((0.707104370895605)*pz*(cj17*cj17*cj17)*(py*py)*(x446.value)))+(((0.48296276610652)*py*sj17*(x447.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))+(((-0.771809661224964)*cj17*pz*(py*py)*(x448.value)))+(((0.258820142606703)*pz*sj17))+(((-0.965925532213041)*cj17*pz))+(((-0.707109191469274)*pz*sj17*(cj17*cj17)*(py*py)*(x449.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.500001967989669)*py*pz*(cj17*cj17)*(x450.value)))+(((0.250000983994834)*py*pz*(x451.value)))+(((0.5)*(x452.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))+(((-0.866024267562092)*cj17*py*pz*sj17*(x453.value))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x443.value)*(((((0.241482333518994)*pz*sj17*(py*py)*(x444.value)))+(((-0.0048296276610652)*cj17))+(((0.129410071303351)*cj17*py*(x445.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))+(((0.00129410071303351)*sj17))+(((0.707104370895605)*pz*(cj17*cj17*cj17)*(py*py)*(x446.value)))+(((0.48296276610652)*py*sj17*(x447.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))+(((-0.771809661224964)*cj17*pz*(py*py)*(x448.value)))+(((0.258820142606703)*pz*sj17))+(((-0.965925532213041)*cj17*pz))+(((-0.707109191469274)*pz*sj17*(cj17*cj17)*(py*py)*(x449.value)))))))+IKsqr(((((-0.500001967989669)*py*pz*(cj17*cj17)*(x450.value)))+(((0.250000983994834)*py*pz*(x451.value)))+(((0.5)*(x452.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))+(((-0.866024267562092)*cj17*py*pz*sj17*(x453.value)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x443.value)*(((((0.241482333518994)*pz*sj17*(py*py)*(x444.value)))+(((-0.0048296276610652)*cj17))+(((0.129410071303351)*cj17*py*(x445.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))+(((0.00129410071303351)*sj17))+(((0.707104370895605)*pz*(cj17*cj17*cj17)*(py*py)*(x446.value)))+(((0.48296276610652)*py*sj17*(x447.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))+(((-0.771809661224964)*cj17*pz*(py*py)*(x448.value)))+(((0.258820142606703)*pz*sj17))+(((-0.965925532213041)*cj17*pz))+(((-0.707109191469274)*pz*sj17*(cj17*cj17)*(py*py)*(x449.value)))))), ((((-0.500001967989669)*py*pz*(cj17*cj17)*(x450.value)))+(((0.250000983994834)*py*pz*(x451.value)))+(((0.5)*(x452.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))+(((-0.866024267562092)*cj17*py*pz*sj17*(x453.value)))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
CheckValue<IkReal> x454=IKPowWithIntegerCheck(((((0.965925532213041)*px*sj17))+(((0.258820142606703)*cj17*px))),-1);
if(!x454.valid){
continue;
}
CheckValue<IkReal> x455=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x455.valid){
continue;
}
CheckValue<IkReal> x456=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x456.valid){
continue;
}
if((((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x457=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x457.valid){
continue;
}
if((((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x458=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x458.valid){
continue;
}
CheckValue<IkReal> x459=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x459.valid){
continue;
}
CheckValue<IkReal> x460=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x460.valid){
continue;
}
CheckValue<IkReal> x461=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x461.valid){
continue;
}
if((((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x462=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x462.valid){
continue;
}
CheckValue<IkReal> x463=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x463.valid){
continue;
}
CheckValue<IkReal> x464=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x464.valid){
continue;
}
if( IKabs(((x454.value)*(((((0.241482333518994)*pz*sj17*(py*py)*(x455.value)))+(((-0.0048296276610652)*cj17))+(((-0.129410071303351)*cj17*py*(x456.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))+(((0.00129410071303351)*sj17))+(((-0.48296276610652)*py*sj17*(x457.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))+(((0.707104370895605)*pz*(cj17*cj17*cj17)*(py*py)*(x458.value)))+(((-0.771809661224964)*cj17*pz*(py*py)*(x459.value)))+(((0.258820142606703)*pz*sj17))+(((-0.965925532213041)*cj17*pz))+(((-0.707109191469274)*pz*sj17*(cj17*cj17)*(py*py)*(x460.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.5)*(x461.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))+(((-0.500001967989669)*py*pz*(cj17*cj17)*(x462.value)))+(((0.250000983994834)*py*pz*(x463.value)))+(((-0.866024267562092)*cj17*py*pz*sj17*(x464.value))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x454.value)*(((((0.241482333518994)*pz*sj17*(py*py)*(x455.value)))+(((-0.0048296276610652)*cj17))+(((-0.129410071303351)*cj17*py*(x456.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))+(((0.00129410071303351)*sj17))+(((-0.48296276610652)*py*sj17*(x457.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))+(((0.707104370895605)*pz*(cj17*cj17*cj17)*(py*py)*(x458.value)))+(((-0.771809661224964)*cj17*pz*(py*py)*(x459.value)))+(((0.258820142606703)*pz*sj17))+(((-0.965925532213041)*cj17*pz))+(((-0.707109191469274)*pz*sj17*(cj17*cj17)*(py*py)*(x460.value)))))))+IKsqr(((((-0.5)*(x461.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))+(((-0.500001967989669)*py*pz*(cj17*cj17)*(x462.value)))+(((0.250000983994834)*py*pz*(x463.value)))+(((-0.866024267562092)*cj17*py*pz*sj17*(x464.value)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[1]=IKatan2(((x454.value)*(((((0.241482333518994)*pz*sj17*(py*py)*(x455.value)))+(((-0.0048296276610652)*cj17))+(((-0.129410071303351)*cj17*py*(x456.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))+(((0.00129410071303351)*sj17))+(((-0.48296276610652)*py*sj17*(x457.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))+(((0.707104370895605)*pz*(cj17*cj17*cj17)*(py*py)*(x458.value)))+(((-0.771809661224964)*cj17*pz*(py*py)*(x459.value)))+(((0.258820142606703)*pz*sj17))+(((-0.965925532213041)*cj17*pz))+(((-0.707109191469274)*pz*sj17*(cj17*cj17)*(py*py)*(x460.value)))))), ((((-0.5)*(x461.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))+(((-0.500001967989669)*py*pz*(cj17*cj17)*(x462.value)))+(((0.250000983994834)*py*pz*(x463.value)))+(((-0.866024267562092)*cj17*py*pz*sj17*(x464.value)))));
sj15array[1]=IKsin(j15array[1]);
cj15array[1]=IKcos(j15array[1]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
if( j15array[1] > IKPI )
{
    j15array[1]-=IK2PI;
}
else if( j15array[1] < -IKPI )
{    j15array[1]+=IK2PI;
}
j15valid[1] = true;
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[4];
IkReal x465=IKcos(j15);
IkReal x466=IKsin(j15);
IkReal x467=cj17*cj17;
IkReal x468=pz*pz;
IkReal x469=py*py;
IkReal x470=px*px;
IkReal x471=(py*sj17);
IkReal x472=(cj17*sj17);
IkReal x473=((0.965925532213041)*pz);
IkReal x474=((0.258820142606703)*cj17);
IkReal x475=((0.00129410071303351)*sj17);
IkReal x476=((0.500001967989669)*pz);
IkReal x477=((1.73204853512418)*pz);
IkReal x478=x465*x465;
IkReal x479=((0.866024267562092)*x467);
IkReal x480=(px*x466);
IkReal x481=(cj17*x465);
IkReal x482=(py*x465);
IkReal x483=((0.500001967989669)*x469);
IkReal x484=((0.258820142606703)*pz*sj17);
IkReal x485=((2.16506066890523e-5)*x467);
IkReal x486=((0.933012133781046)*x469);
IkReal x487=((1.00000393597934)*pz*x467);
IkReal x488=(x476*x482);
IkReal x489=(x470*x478);
IkReal x490=(x468*x478);
IkReal x491=(x471*x477*x481);
IkReal x492=(x482*x487);
IkReal x493=(x492+x491);
evalcond[0]=((((-0.965925532213041)*x471))+(((-1.0)*x465*x484))+(((-1.0)*py*x474))+(((-1.0)*x465*x475))+((x473*x481))+(((0.0048296276610652)*x481)));
evalcond[1]=((((0.0048296276610652)*cj17))+((cj17*x473))+(((-0.965925532213041)*x465*x471))+(((-1.0)*x484))+(((-1.0)*x474*x482))+(((-1.0)*x475))+((x474*x480))+(((0.965925532213041)*sj17*x480)));
evalcond[2]=(((x469*x479))+(((-1.0)*x488))+(((-1.0)*x486))+(((0.500001967989669)*x472*x490))+((x478*x485))+x493+(((-0.0669878662189539)*x490))+(((-1.0)*x479*x490))+(((1.67469665547385e-6)*x478))+(((-1.25000491997417e-5)*x472*x478))+(((-1.0)*x472*x483)));
evalcond[3]=((1.67469665547385e-6)+(((-0.0669878662189539)*x468))+(((-1.0)*x468*x479))+(((-1.0)*x472*x477*x480))+((x476*x480))+(((-1.0)*x488))+((x470*x479))+(((-0.933012133781046)*x470))+(((0.500001967989669)*x472*x489))+(((1.86602426756209)*x480*x482))+(((0.500001967989669)*x468*x472))+x485+x493+(((-1.0)*x472*x478*x483))+(((0.933012133781046)*x489))+(((-1.0)*x480*x487))+(((-1.0)*x479*x489))+(((-0.500001967989669)*x470*x472))+(((-1.73204853512418)*x467*x480*x482))+(((-1.25000491997417e-5)*x472))+(((1.00000393597934)*x471*x480*x481))+((x469*x478*x479))+(((-1.0)*x478*x486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x494=(((cj15*py))+(((-1.0)*px*sj15)));
IkReal x495=((-0.005)+((sj16*((((py*sj15))+((cj15*px))))))+(((-1.0)*cj16*pz)));
soleval[0]=((((-0.258820142606703)*cj17*x495))+(((0.965925532213041)*cj17*x494))+(((-0.965925532213041)*sj17*x495))+(((-0.258820142606703)*sj17*x494)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x496=py*py;
IkReal x497=pz*pz;
IkReal x498=cj17*cj17;
IkReal x499=(cj17*pz);
IkReal x500=(cj17*sj17);
IkReal x501=(px*pz);
IkReal x502=((0.866024267562092)*x498);
CheckValue<IkReal> x503=IKPowWithIntegerCheck(((((-0.00125000491997417)*px))+(((-0.250000983994834)*x501))+(((0.00433012133781046)*px*x500))+(((0.500001967989669)*x498*x501))+(((0.00250000983994834)*px*x498))+(((0.866024267562092)*px*sj17*x499))),-1);
if(!x503.valid){
continue;
}
CheckValue<IkReal> x504=IKPowWithIntegerCheck(((((0.0048296276610652)*cj17))+(((-0.258820142606703)*pz*sj17))+(((-0.00129410071303351)*sj17))+(((0.965925532213041)*x499))),-1);
if(!x504.valid){
continue;
}
if( IKabs(((x503.value)*(((-1.67469665547385e-6)+(((-1.0)*x497*x502))+(((0.933012133781046)*x496))+(((-1.0)*x496*x502))+(((0.00500001967989669)*sj17*x499))+(((-0.0669878662189539)*x497))+(((-2.16506066890523e-5)*x498))+(((0.500001967989669)*x497*x500))+(((-0.00866024267562092)*pz*x498))+(((-0.000669878662189539)*pz))+(((1.25000491997417e-5)*x500))+(((0.500001967989669)*x496*x500)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x504.value)*(((((0.965925532213041)*py*sj17))+(((0.258820142606703)*cj17*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x503.value)*(((-1.67469665547385e-6)+(((-1.0)*x497*x502))+(((0.933012133781046)*x496))+(((-1.0)*x496*x502))+(((0.00500001967989669)*sj17*x499))+(((-0.0669878662189539)*x497))+(((-2.16506066890523e-5)*x498))+(((0.500001967989669)*x497*x500))+(((-0.00866024267562092)*pz*x498))+(((-0.000669878662189539)*pz))+(((1.25000491997417e-5)*x500))+(((0.500001967989669)*x496*x500))))))+IKsqr(((x504.value)*(((((0.965925532213041)*py*sj17))+(((0.258820142606703)*cj17*py))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x503.value)*(((-1.67469665547385e-6)+(((-1.0)*x497*x502))+(((0.933012133781046)*x496))+(((-1.0)*x496*x502))+(((0.00500001967989669)*sj17*x499))+(((-0.0669878662189539)*x497))+(((-2.16506066890523e-5)*x498))+(((0.500001967989669)*x497*x500))+(((-0.00866024267562092)*pz*x498))+(((-0.000669878662189539)*pz))+(((1.25000491997417e-5)*x500))+(((0.500001967989669)*x496*x500))))), ((x504.value)*(((((0.965925532213041)*py*sj17))+(((0.258820142606703)*cj17*py))))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[4];
IkReal x505=IKcos(j15);
IkReal x506=IKsin(j15);
IkReal x507=cj17*cj17;
IkReal x508=pz*pz;
IkReal x509=py*py;
IkReal x510=px*px;
IkReal x511=(py*sj17);
IkReal x512=(cj17*sj17);
IkReal x513=((0.965925532213041)*pz);
IkReal x514=((0.258820142606703)*cj17);
IkReal x515=((0.00129410071303351)*sj17);
IkReal x516=((0.500001967989669)*pz);
IkReal x517=((1.73204853512418)*pz);
IkReal x518=x505*x505;
IkReal x519=((0.866024267562092)*x507);
IkReal x520=(px*x506);
IkReal x521=(cj17*x505);
IkReal x522=(py*x505);
IkReal x523=((0.500001967989669)*x509);
IkReal x524=((0.258820142606703)*pz*sj17);
IkReal x525=((2.16506066890523e-5)*x507);
IkReal x526=((0.933012133781046)*x509);
IkReal x527=((1.00000393597934)*pz*x507);
IkReal x528=(x516*x522);
IkReal x529=(x510*x518);
IkReal x530=(x508*x518);
IkReal x531=(x511*x517*x521);
IkReal x532=(x522*x527);
IkReal x533=(x531+x532);
evalcond[0]=(((x513*x521))+(((-1.0)*x505*x524))+(((-1.0)*x505*x515))+(((-1.0)*py*x514))+(((-0.965925532213041)*x511))+(((0.0048296276610652)*x521)));
evalcond[1]=((((0.0048296276610652)*cj17))+(((-1.0)*x524))+(((0.965925532213041)*sj17*x520))+((cj17*x513))+((x514*x520))+(((-1.0)*x515))+(((-0.965925532213041)*x505*x511))+(((-1.0)*x514*x522)));
evalcond[2]=((((0.500001967989669)*x512*x530))+(((-1.25000491997417e-5)*x512*x518))+(((-1.0)*x526))+(((-1.0)*x528))+((x518*x525))+x533+(((-1.0)*x512*x523))+(((1.67469665547385e-6)*x518))+((x509*x519))+(((-1.0)*x519*x530))+(((-0.0669878662189539)*x530)));
evalcond[3]=((1.67469665547385e-6)+((x510*x519))+(((-1.0)*x512*x518*x523))+(((-1.0)*x520*x527))+(((1.86602426756209)*x520*x522))+(((0.500001967989669)*x512*x529))+(((-0.500001967989669)*x510*x512))+((x516*x520))+(((0.933012133781046)*x529))+(((-1.0)*x528))+(((0.500001967989669)*x508*x512))+(((-1.0)*x518*x526))+(((-1.0)*x512*x517*x520))+(((-0.0669878662189539)*x508))+x533+x525+(((-1.73204853512418)*x507*x520*x522))+(((1.00000393597934)*x511*x520*x521))+((x509*x518*x519))+(((-1.25000491997417e-5)*x512))+(((-1.0)*x508*x519))+(((-0.933012133781046)*x510))+(((-1.0)*x519*x529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x534=(((cj15*py))+(((-1.0)*px*sj15)));
IkReal x535=((-0.005)+((sj16*((((py*sj15))+((cj15*px))))))+(((-1.0)*cj16*pz)));
soleval[0]=((((-0.258820142606703)*sj17*x534))+(((-0.258820142606703)*cj17*x535))+(((0.965925532213041)*cj17*x534))+(((-0.965925532213041)*sj17*x535)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j16)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[2];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
IkReal x536=cj17*cj17;
IkReal x537=((200.0)*pz);
IkReal x538=(px*pz);
IkReal x539=(cj17*sj17);
j15eval[0]=((((-400.0)*x536*x538))+(((3.46408343568754)*px*x539))+(((-692.816687137509)*x538*x539))+(((-1.0)*px))+((px*x537))+(((2.0)*px*x536)));
j15eval[1]=((((-1.0)*sj17*x537))+(((746.406769183216)*cj17*pz))+(((-3.73203384591608)*cj17))+sj17);
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
{
IkReal j15eval[2];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
IkReal x540=cj17*cj17;
IkReal x541=pz*pz;
IkReal x542=(cj17*sj17);
j15eval[0]=((((-3.73203384591608)*px*sj17))+(((-1.0)*cj17*px)));
j15eval[1]=((1.0)+(((-7.46406769183216)*x542))+(((298562.707673286)*x541*x542))+(((12.9280766270632)*x540))+(((-517123.065082527)*x540*x541))+(((-40000.0)*x541)));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x545 = px*px;
if(IKabs(x545)==0){
continue;
}
IkReal x543=pow(x545,-0.5);
IkReal x544=(px*x543);
CheckValue<IkReal> x546 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(((-3.73203384591608)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x546.valid){
continue;
}
IkReal gconst50=((-1.0)*(x546.value));
IkReal gconst51=((0.258820142606703)*x544);
IkReal gconst52=((-0.965925532213041)*x544);
CheckValue<IkReal> x547 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(((-3.73203384591608)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x547.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j17+(x547.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
IkReal x548=((-1.0)*px);
IkReal x549=x543;
IkReal x550=(px*x549);
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
sj17=gconst51;
cj17=gconst52;
CheckValue<IkReal> x551 = IKatan2WithCheck(IkReal(x548),IkReal(((-3.73203385)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x551.valid){
continue;
}
j17=((-1.0)*(x551.value));
CheckValue<IkReal> x552 = IKatan2WithCheck(IkReal(x548),IkReal(((-3.73203384591608)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x552.valid){
continue;
}
IkReal gconst50=((-1.0)*(x552.value));
IkReal gconst51=((0.258820142606703)*x550);
IkReal gconst52=((-0.965925532213041)*x550);
CheckValue<IkReal> x555=IKPowWithIntegerCheck(px,-2);
if(!x555.valid){
continue;
}
if((x555.value) < -0.00001)
continue;
IkReal x553=IKsqrt(x555.value);
IkReal x554=(px*x553);
j15eval[0]=((((3.86368692146027)*x554))+(((-772.737384292055)*pz*x554)));
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j15]

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x558=IKPowWithIntegerCheck(((((-0.0048296276610652)*gconst52))+(((0.00129410071303351)*gconst51))+(((-0.258820142606703)*gconst51*pz))+(((0.965925532213041)*gconst52*pz))),-1);
if(!x558.valid){
continue;
}
IkReal x556=x558.value;
IkReal x557=(py*x556);
cj15array[0]=((((-0.258820142606703)*gconst52*x557))+(((-0.965925532213041)*gconst51*x557)));
if( cj15array[0] >= -1-IKFAST_SINCOS_THRESH && cj15array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j15valid[0] = j15valid[1] = true;
    j15array[0] = IKacos(cj15array[0]);
    sj15array[0] = IKsin(j15array[0]);
    cj15array[1] = cj15array[0];
    j15array[1] = -j15array[0];
    sj15array[1] = -sj15array[0];
}
else if( isnan(cj15array[0]) )
{
    // probably any value will work
    j15valid[0] = true;
    cj15array[0] = 1; sj15array[0] = 0; j15array[0] = 0;
}
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x559=IKcos(j15);
IkReal x560=IKsin(j15);
IkReal x561=gconst52*gconst52;
IkReal x562=py*py;
IkReal x563=pz*pz;
IkReal x564=px*px;
IkReal x565=(gconst51*pz);
IkReal x566=((1.73204853512418)*gconst52);
IkReal x567=((0.258820142606703)*gconst52);
IkReal x568=((0.500001967989669)*pz);
IkReal x569=x559*x559;
IkReal x570=((0.500001967989669)*gconst51*gconst52);
IkReal x571=((0.866024267562092)*x561);
IkReal x572=(py*x559);
IkReal x573=(px*x560);
IkReal x574=((1.25000491997417e-5)*gconst51*gconst52);
IkReal x575=((2.16506066890523e-5)*x561);
IkReal x576=(gconst51*x573);
IkReal x577=((1.00000393597934)*pz*x561);
IkReal x578=(x568*x572);
IkReal x579=(x563*x569);
IkReal x580=(x564*x569);
IkReal x581=(x562*x569);
IkReal x582=(x572*x577);
IkReal x583=(x565*x566*x572);
IkReal x584=(x582+x583);
evalcond[0]=(((x567*x572))+(((0.965925532213041)*gconst51*x572))+(((-0.258820142606703)*x565))+(((-0.965925532213041)*x576))+(((-0.0048296276610652)*gconst52))+(((0.00129410071303351)*gconst51))+(((-1.0)*x567*x573))+(((0.965925532213041)*gconst52*pz)));
evalcond[1]=((((-1.0)*x569*x574))+(((-0.933012133781046)*x562))+(((-0.0669878662189539)*x579))+(((1.67469665547385e-6)*x569))+(((-1.0)*x571*x579))+((x562*x571))+x578+((x569*x575))+(((-1.0)*x584))+((x570*x579))+(((-1.0)*x562*x570)));
evalcond[2]=((1.67469665547385e-6)+(((-1.73204853512418)*x561*x572*x573))+(((-0.933012133781046)*x564))+((x563*x570))+(((0.933012133781046)*x580))+(((1.86602426756209)*x572*x573))+(((-0.0669878662189539)*x563))+((x573*x577))+(((-1.0)*x570*x581))+(((1.00000393597934)*gconst52*x572*x576))+(((-1.0)*x563*x571))+(((-1.0)*x564*x570))+(((-1.0)*x571*x580))+(((-1.0)*x574))+(((-0.933012133781046)*x581))+((x564*x571))+x578+x575+((x570*x580))+((x571*x581))+(((-1.0)*x568*x573))+((x565*x566*x573))+(((-1.0)*x584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x585=(((cj15*py))+(((-1.0)*px*sj15)));
IkReal x586=((-0.005)+((sj16*((((py*sj15))+((cj15*px))))))+(((-1.0)*cj16*pz)));
soleval[0]=((((0.965925532213041)*cj17*x585))+(((-0.258820142606703)*sj17*x585))+(((-0.965925532213041)*sj17*x586))+(((-0.258820142606703)*cj17*x586)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x589 = px*px;
if(IKabs(x589)==0){
continue;
}
IkReal x587=pow(x589,-0.5);
IkReal x588=(px*x587);
CheckValue<IkReal> x590 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(((-3.73203384591608)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x590.valid){
continue;
}
IkReal gconst53=((3.14159265358979)+(((-1.0)*(x590.value))));
IkReal gconst54=((-0.258820142606703)*x588);
IkReal gconst55=((0.965925532213041)*x588);
CheckValue<IkReal> x591 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(((-3.73203384591608)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x591.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17+(x591.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
IkReal x592=((-1.0)*px);
IkReal x593=x587;
IkReal x594=(px*x593);
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
sj17=gconst54;
cj17=gconst55;
CheckValue<IkReal> x595 = IKatan2WithCheck(IkReal(x592),IkReal(((-3.73203385)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x595.valid){
continue;
}
j17=((3.14159265)+(((-1.0)*(x595.value))));
CheckValue<IkReal> x596 = IKatan2WithCheck(IkReal(x592),IkReal(((-3.73203384591608)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x596.valid){
continue;
}
IkReal gconst53=((3.14159265358979)+(((-1.0)*(x596.value))));
IkReal gconst54=((-0.258820142606703)*x594);
IkReal gconst55=((0.965925532213041)*x594);
CheckValue<IkReal> x599=IKPowWithIntegerCheck(px,-2);
if(!x599.valid){
continue;
}
if((x599.value) < -0.00001)
continue;
IkReal x597=IKsqrt(x599.value);
IkReal x598=(px*x597);
j15eval[0]=((((-3.86368692146027)*x598))+(((772.737384292055)*pz*x598)));
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j15]

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x602=IKPowWithIntegerCheck(((((0.965925532213041)*gconst55*pz))+(((-0.258820142606703)*gconst54*pz))+(((-0.0048296276610652)*gconst55))+(((0.00129410071303351)*gconst54))),-1);
if(!x602.valid){
continue;
}
IkReal x600=x602.value;
IkReal x601=(py*x600);
cj15array[0]=((((-0.965925532213041)*gconst54*x601))+(((-0.258820142606703)*gconst55*x601)));
if( cj15array[0] >= -1-IKFAST_SINCOS_THRESH && cj15array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j15valid[0] = j15valid[1] = true;
    j15array[0] = IKacos(cj15array[0]);
    sj15array[0] = IKsin(j15array[0]);
    cj15array[1] = cj15array[0];
    j15array[1] = -j15array[0];
    sj15array[1] = -sj15array[0];
}
else if( isnan(cj15array[0]) )
{
    // probably any value will work
    j15valid[0] = true;
    cj15array[0] = 1; sj15array[0] = 0; j15array[0] = 0;
}
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x603=IKcos(j15);
IkReal x604=IKsin(j15);
IkReal x605=gconst55*gconst55;
IkReal x606=pz*pz;
IkReal x607=py*py;
IkReal x608=px*px;
IkReal x609=(gconst54*gconst55);
IkReal x610=((1.73204853512418)*pz);
IkReal x611=((0.258820142606703)*gconst55);
IkReal x612=((0.965925532213041)*gconst54);
IkReal x613=((0.500001967989669)*pz);
IkReal x614=x603*x603;
IkReal x615=((2.16506066890523e-5)*x605);
IkReal x616=(px*x604);
IkReal x617=((0.866024267562092)*x605);
IkReal x618=(py*x603);
IkReal x619=((1.00000393597934)*pz*x605);
IkReal x620=(x613*x618);
IkReal x621=(x607*x614);
IkReal x622=(x606*x614);
IkReal x623=(x608*x614);
IkReal x624=(x609*x610*x618);
IkReal x625=(x618*x619);
IkReal x626=(x625+x624);
evalcond[0]=((((-1.0)*x612*x616))+(((-1.0)*x611*x616))+(((0.965925532213041)*gconst55*pz))+((x611*x618))+(((-0.258820142606703)*gconst54*pz))+((x612*x618))+(((-0.0048296276610652)*gconst55))+(((0.00129410071303351)*gconst54)));
evalcond[1]=((((-0.500001967989669)*x607*x609))+(((-1.0)*x626))+(((0.500001967989669)*x609*x622))+(((-0.0669878662189539)*x622))+(((-1.0)*x617*x622))+(((-0.933012133781046)*x607))+((x607*x617))+((x614*x615))+x620+(((1.67469665547385e-6)*x614))+(((-1.25000491997417e-5)*x609*x614)));
evalcond[2]=((1.67469665547385e-6)+(((-0.0669878662189539)*x606))+(((-0.933012133781046)*x621))+((x617*x621))+((x608*x617))+((x609*x610*x616))+(((1.00000393597934)*x609*x616*x618))+(((-1.25000491997417e-5)*x609))+(((-1.0)*x626))+(((0.500001967989669)*x609*x623))+(((-0.500001967989669)*x609*x621))+((x616*x619))+(((-1.0)*x617*x623))+(((0.933012133781046)*x623))+(((-1.0)*x606*x617))+(((-0.933012133781046)*x608))+x615+x620+(((-1.0)*x613*x616))+(((-1.73204853512418)*x605*x616*x618))+(((-0.500001967989669)*x608*x609))+(((1.86602426756209)*x616*x618))+(((0.500001967989669)*x606*x609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x627=(((cj15*py))+(((-1.0)*px*sj15)));
IkReal x628=((-0.005)+((sj16*((((py*sj15))+((cj15*px))))))+(((-1.0)*cj16*pz)));
soleval[0]=((((-0.258820142606703)*sj17*x627))+(((-0.258820142606703)*cj17*x628))+(((0.965925532213041)*cj17*x627))+(((-0.965925532213041)*sj17*x628)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x629=((1.0)+(((-200.0)*pz)));
IkReal x630=((-3.73203384591608)+(((746.406769183216)*pz)));
IkReal x632 = ((x629*x629)+(x630*x630));
if(IKabs(x632)==0){
continue;
}
IkReal x631=pow(x632,-0.5);
CheckValue<IkReal> x633 = IKatan2WithCheck(IkReal(x630),IkReal(x629),IKFAST_ATAN2_MAGTHRESH);
if(!x633.valid){
continue;
}
IkReal gconst56=((-1.0)*(x633.value));
IkReal gconst57=((-1.0)*x630*x631);
IkReal gconst58=(x629*x631);
IkReal x634=j17;
CheckValue<IkReal> x637 = IKatan2WithCheck(IkReal(((-3.73203384591608)+(((746.406769183216)*pz)))),IkReal(((1.0)+(((-200.0)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x637.valid){
continue;
}
IkReal x635=x637.value;
IkReal x636=x635;
if(((((x634*x635))+((x635*x636))+((j17*x636))+((j17*x634)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((x634*x635))+((x635*x636))+((j17*x636))+((j17*x634)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x638=IKPowWithIntegerCheck(((((-0.258820142606703)*gconst58*px))+(((-0.965925532213041)*gconst57*px))),-1);
if(!x638.valid){
continue;
}
CheckValue<IkReal> x639=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x639.valid){
continue;
}
if((((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x640=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x640.valid){
continue;
}
CheckValue<IkReal> x641=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x641.valid){
continue;
}
CheckValue<IkReal> x642=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x642.valid){
continue;
}
CheckValue<IkReal> x643=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x643.valid){
continue;
}
CheckValue<IkReal> x644=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x644.valid){
continue;
}
if((((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x645=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x645.valid){
continue;
}
CheckValue<IkReal> x646=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x646.valid){
continue;
}
if((((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x647=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x647.valid){
continue;
}
CheckValue<IkReal> x648=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x648.valid){
continue;
}
CheckValue<IkReal> x649=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x649.valid){
continue;
}
if( IKabs(((x638.value)*(((((-0.48296276610652)*gconst57*py*(x639.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))))))+(((0.064705290329359)*gconst58*pz*(py*py)*(x640.value)))+(((-0.707109191469274)*gconst57*pz*(gconst58*gconst58)*(py*py)*(x641.value)))+(((-0.836514951554323)*gconst58*pz*(gconst57*gconst57)*(py*py)*(x642.value)))+(((0.241482333518994)*gconst57*pz*(py*py)*(x643.value)))+(((-0.00129410071303351)*gconst57))+(((0.258820142606703)*gconst57*pz))+(((-0.965925532213041)*gconst58*pz))+(((0.0048296276610652)*gconst58))+(((-0.129410071303351)*gconst58*py*(x644.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))))))+(((-0.129410580658718)*pz*(gconst58*gconst58*gconst58)*(py*py)*(x645.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.5)*(x646.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))))))+(((0.866024267562092)*gconst57*gconst58*py*pz*(x647.value)))+(((-0.250000983994834)*py*pz*(x648.value)))+(((0.500001967989669)*py*pz*(gconst58*gconst58)*(x649.value))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x638.value)*(((((-0.48296276610652)*gconst57*py*(x639.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))))))+(((0.064705290329359)*gconst58*pz*(py*py)*(x640.value)))+(((-0.707109191469274)*gconst57*pz*(gconst58*gconst58)*(py*py)*(x641.value)))+(((-0.836514951554323)*gconst58*pz*(gconst57*gconst57)*(py*py)*(x642.value)))+(((0.241482333518994)*gconst57*pz*(py*py)*(x643.value)))+(((-0.00129410071303351)*gconst57))+(((0.258820142606703)*gconst57*pz))+(((-0.965925532213041)*gconst58*pz))+(((0.0048296276610652)*gconst58))+(((-0.129410071303351)*gconst58*py*(x644.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))))))+(((-0.129410580658718)*pz*(gconst58*gconst58*gconst58)*(py*py)*(x645.value)))))))+IKsqr(((((0.5)*(x646.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))))))+(((0.866024267562092)*gconst57*gconst58*py*pz*(x647.value)))+(((-0.250000983994834)*py*pz*(x648.value)))+(((0.500001967989669)*py*pz*(gconst58*gconst58)*(x649.value)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x638.value)*(((((-0.48296276610652)*gconst57*py*(x639.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))))))+(((0.064705290329359)*gconst58*pz*(py*py)*(x640.value)))+(((-0.707109191469274)*gconst57*pz*(gconst58*gconst58)*(py*py)*(x641.value)))+(((-0.836514951554323)*gconst58*pz*(gconst57*gconst57)*(py*py)*(x642.value)))+(((0.241482333518994)*gconst57*pz*(py*py)*(x643.value)))+(((-0.00129410071303351)*gconst57))+(((0.258820142606703)*gconst57*pz))+(((-0.965925532213041)*gconst58*pz))+(((0.0048296276610652)*gconst58))+(((-0.129410071303351)*gconst58*py*(x644.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))))))+(((-0.129410580658718)*pz*(gconst58*gconst58*gconst58)*(py*py)*(x645.value)))))), ((((0.5)*(x646.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))))))+(((0.866024267562092)*gconst57*gconst58*py*pz*(x647.value)))+(((-0.250000983994834)*py*pz*(x648.value)))+(((0.500001967989669)*py*pz*(gconst58*gconst58)*(x649.value)))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
CheckValue<IkReal> x650=IKPowWithIntegerCheck(((((-0.258820142606703)*gconst58*px))+(((-0.965925532213041)*gconst57*px))),-1);
if(!x650.valid){
continue;
}
CheckValue<IkReal> x651=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x651.valid){
continue;
}
CheckValue<IkReal> x652=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x652.valid){
continue;
}
CheckValue<IkReal> x653=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x653.valid){
continue;
}
CheckValue<IkReal> x654=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x654.valid){
continue;
}
CheckValue<IkReal> x655=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x655.valid){
continue;
}
CheckValue<IkReal> x656=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x656.valid){
continue;
}
if((((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x657=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x657.valid){
continue;
}
if((((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x658=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x658.valid){
continue;
}
if((((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x659=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x659.valid){
continue;
}
CheckValue<IkReal> x660=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x660.valid){
continue;
}
CheckValue<IkReal> x661=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-0.866024267562092)*(gconst58*gconst58)*(pz*pz)))+(((0.500001967989669)*gconst57*gconst58*(pz*pz)))+(((-1.25000491997417e-5)*gconst57*gconst58))+(((2.16506066890523e-5)*(gconst58*gconst58)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x661.valid){
continue;
}
if( IKabs(((x650.value)*(((((0.064705290329359)*gconst58*pz*(py*py)*(x651.value)))+(((-0.707109191469274)*gconst57*pz*(gconst58*gconst58)*(py*py)*(x652.value)))+(((-0.836514951554323)*gconst58*pz*(gconst57*gconst57)*(py*py)*(x653.value)))+(((0.241482333518994)*gconst57*pz*(py*py)*(x654.value)))+(((-0.00129410071303351)*gconst57))+(((0.258820142606703)*gconst57*pz))+(((-0.965925532213041)*gconst58*pz))+(((0.0048296276610652)*gconst58))+(((-0.129410580658718)*pz*(gconst58*gconst58*gconst58)*(py*py)*(x655.value)))+(((0.129410071303351)*gconst58*py*(x656.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))))))+(((0.48296276610652)*gconst57*py*(x657.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)))))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.5)*(x658.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))))))+(((0.866024267562092)*gconst57*gconst58*py*pz*(x659.value)))+(((-0.250000983994834)*py*pz*(x660.value)))+(((0.500001967989669)*py*pz*(gconst58*gconst58)*(x661.value))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x650.value)*(((((0.064705290329359)*gconst58*pz*(py*py)*(x651.value)))+(((-0.707109191469274)*gconst57*pz*(gconst58*gconst58)*(py*py)*(x652.value)))+(((-0.836514951554323)*gconst58*pz*(gconst57*gconst57)*(py*py)*(x653.value)))+(((0.241482333518994)*gconst57*pz*(py*py)*(x654.value)))+(((-0.00129410071303351)*gconst57))+(((0.258820142606703)*gconst57*pz))+(((-0.965925532213041)*gconst58*pz))+(((0.0048296276610652)*gconst58))+(((-0.129410580658718)*pz*(gconst58*gconst58*gconst58)*(py*py)*(x655.value)))+(((0.129410071303351)*gconst58*py*(x656.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))))))+(((0.48296276610652)*gconst57*py*(x657.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))))))))))+IKsqr(((((-0.5)*(x658.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))))))+(((0.866024267562092)*gconst57*gconst58*py*pz*(x659.value)))+(((-0.250000983994834)*py*pz*(x660.value)))+(((0.500001967989669)*py*pz*(gconst58*gconst58)*(x661.value)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[1]=IKatan2(((x650.value)*(((((0.064705290329359)*gconst58*pz*(py*py)*(x651.value)))+(((-0.707109191469274)*gconst57*pz*(gconst58*gconst58)*(py*py)*(x652.value)))+(((-0.836514951554323)*gconst58*pz*(gconst57*gconst57)*(py*py)*(x653.value)))+(((0.241482333518994)*gconst57*pz*(py*py)*(x654.value)))+(((-0.00129410071303351)*gconst57))+(((0.258820142606703)*gconst57*pz))+(((-0.965925532213041)*gconst58*pz))+(((0.0048296276610652)*gconst58))+(((-0.129410580658718)*pz*(gconst58*gconst58*gconst58)*(py*py)*(x655.value)))+(((0.129410071303351)*gconst58*py*(x656.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))))))+(((0.48296276610652)*gconst57*py*(x657.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))))))))), ((((-0.5)*(x658.value)*(IKsqrt(((((4.0)*(gconst58*gconst58*gconst58*gconst58)*(py*py)*(pz*pz)))+(((8.66027676215715e-5)*gconst57*(gconst58*gconst58*gconst58)*(py*py)))+(((-4.33013838107857e-5)*gconst57*gconst58*(py*py)))+(((-7.49998032006458e-5)*(gconst58*gconst58*gconst58*gconst58)*(py*py)))+(((4.0)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((-4.0)*(gconst58*gconst58)*(py*py)*(pz*pz)))+(((7.49998032006458e-5)*(gconst58*gconst58)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-2.50001967993542e-5)*(gconst57*gconst57)*(gconst58*gconst58)*(py*py))))))))+(((0.866024267562092)*gconst57*gconst58*py*pz*(x659.value)))+(((-0.250000983994834)*py*pz*(x660.value)))+(((0.500001967989669)*py*pz*(gconst58*gconst58)*(x661.value)))));
sj15array[1]=IKsin(j15array[1]);
cj15array[1]=IKcos(j15array[1]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
if( j15array[1] > IKPI )
{
    j15array[1]-=IK2PI;
}
else if( j15array[1] < -IKPI )
{    j15array[1]+=IK2PI;
}
j15valid[1] = true;
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[4];
IkReal x662=IKcos(j15);
IkReal x663=IKsin(j15);
IkReal x664=gconst58*gconst58;
IkReal x665=py*py;
IkReal x666=pz*pz;
IkReal x667=px*px;
IkReal x668=(gconst57*gconst58);
IkReal x669=((0.965925532213041)*pz);
IkReal x670=((0.965925532213041)*py);
IkReal x671=((0.258820142606703)*py);
IkReal x672=((0.258820142606703)*pz);
IkReal x673=((1.73204853512418)*pz);
IkReal x674=((0.500001967989669)*pz);
IkReal x675=x662*x662;
IkReal x676=(px*x663);
IkReal x677=((2.16506066890523e-5)*x664);
IkReal x678=(gconst57*x662);
IkReal x679=(gconst58*x662);
IkReal x680=(pz*x664);
IkReal x681=(py*x662);
IkReal x682=((0.0669878662189539)*x666);
IkReal x683=((0.866024267562092)*x664);
IkReal x684=((1.00000393597934)*x681);
IkReal x685=((0.500001967989669)*x675);
IkReal x686=((0.933012133781046)*x675);
IkReal x687=(x674*x681);
IkReal x688=(x675*x683);
IkReal x689=(x668*x673*x681);
IkReal x690=(x680*x684);
IkReal x691=(x689+x690);
evalcond[0]=(((gconst57*x670))+(((0.00129410071303351)*x678))+((gconst58*x671))+((x669*x679))+(((-0.0048296276610652)*x679))+(((-1.0)*x672*x678)));
evalcond[1]=(((x671*x679))+(((-0.965925532213041)*gconst57*x676))+((x670*x678))+((gconst58*x669))+(((-0.0048296276610652)*gconst58))+(((0.00129410071303351)*gconst57))+(((-1.0)*gconst57*x672))+(((-0.258820142606703)*gconst58*x676)));
evalcond[2]=((((-0.500001967989669)*x665*x668))+(((-1.0)*x666*x688))+((x666*x668*x685))+(((1.67469665547385e-6)*x675))+(((-1.0)*x675*x682))+x687+(((-1.0)*x691))+(((-0.933012133781046)*x665))+(((-1.25000491997417e-5)*x668*x675))+((x675*x677))+((x665*x683)));
evalcond[3]=((1.67469665547385e-6)+(((-0.500001967989669)*x667*x668))+(((-1.0)*x666*x683))+(((-1.0)*x667*x688))+(((-1.25000491997417e-5)*x668))+((x667*x668*x685))+(((-1.0)*x682))+((x668*x673*x676))+(((-1.73204853512418)*x664*x676*x681))+(((-1.0)*x665*x686))+(((0.500001967989669)*x666*x668))+(((1.00000393597934)*x676*x680))+(((-1.0)*x665*x668*x685))+((x667*x686))+((x667*x683))+(((1.86602426756209)*x676*x681))+x677+x687+(((-1.0)*x691))+(((-0.933012133781046)*x667))+(((-1.0)*x674*x676))+((x665*x688))+((x668*x676*x684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x692=(((cj15*py))+(((-1.0)*px*sj15)));
IkReal x693=((-0.005)+((sj16*((((py*sj15))+((cj15*px))))))+(((-1.0)*cj16*pz)));
soleval[0]=((((-0.258820142606703)*cj17*x693))+(((0.965925532213041)*cj17*x692))+(((-0.258820142606703)*sj17*x692))+(((-0.965925532213041)*sj17*x693)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x694=((1.0)+(((-200.0)*pz)));
IkReal x695=((-3.73203384591608)+(((746.406769183216)*pz)));
IkReal x697 = ((x695*x695)+(x694*x694));
if(IKabs(x697)==0){
continue;
}
IkReal x696=pow(x697,-0.5);
CheckValue<IkReal> x698 = IKatan2WithCheck(IkReal(x695),IkReal(x694),IKFAST_ATAN2_MAGTHRESH);
if(!x698.valid){
continue;
}
IkReal gconst59=((3.14159265358979)+(((-1.0)*(x698.value))));
IkReal gconst60=((1.0)*x695*x696);
IkReal gconst61=((-1.0)*x694*x696);
IkReal x699=j17;
CheckValue<IkReal> x702 = IKatan2WithCheck(IkReal(((-3.73203384591608)+(((746.406769183216)*pz)))),IkReal(((1.0)+(((-200.0)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x702.valid){
continue;
}
IkReal x700=x702.value;
IkReal x701=x700;
if((((9.86960440108936)+((j17*x701))+((x700*x701))+(((-3.14159265358979)*x701))+(((-3.14159265358979)*x700))+((j17*x699))+(((-3.14159265358979)*j17))+(((-3.14159265358979)*x699))+((x699*x700)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+((j17*x701))+((x700*x701))+(((-3.14159265358979)*x701))+(((-3.14159265358979)*x700))+((j17*x699))+(((-3.14159265358979)*j17))+(((-3.14159265358979)*x699))+((x699*x700)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x703=py*py;
IkReal x704=gconst61*gconst61;
IkReal x705=gconst60*gconst60;
IkReal x706=pz*pz;
IkReal x707=(gconst60*gconst61);
IkReal x708=((0.250000983994834)*pz);
IkReal x709=(px*x704);
IkReal x710=(px*x705);
CheckValue<IkReal> x711=IKPowWithIntegerCheck(((((0.00433012133781046)*px*x707))+(((0.00125000491997417)*x709))+(((-0.866024267562092)*px*pz*x707))+(((-0.00125000491997417)*x710))+(((-1.0)*x708*x709))+((x708*x710))),-1);
if(!x711.valid){
continue;
}
CheckValue<IkReal> x712=IKPowWithIntegerCheck(((((-0.258820142606703)*gconst60*pz))+(((-0.0048296276610652)*gconst61))+(((0.00129410071303351)*gconst60))+(((0.965925532213041)*gconst61*pz))),-1);
if(!x712.valid){
continue;
}
if( IKabs(((x711.value)*(((((-0.00500001967989669)*pz*x707))+(((0.0669878662189539)*x703*x704))+(((0.00933012133781046)*pz*x704))+(((0.500001967989669)*x706*x707))+(((0.500001967989669)*x703*x707))+(((-0.933012133781046)*x704*x706))+(((0.000669878662189539)*pz*x705))+(((1.25000491997417e-5)*x707))+(((0.933012133781046)*x703*x705))+(((-2.33253033445262e-5)*x704))+(((-0.0669878662189539)*x705*x706))+(((-1.67469665547385e-6)*x705)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x712.value)*(((((-0.258820142606703)*gconst61*py))+(((-0.965925532213041)*gconst60*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x711.value)*(((((-0.00500001967989669)*pz*x707))+(((0.0669878662189539)*x703*x704))+(((0.00933012133781046)*pz*x704))+(((0.500001967989669)*x706*x707))+(((0.500001967989669)*x703*x707))+(((-0.933012133781046)*x704*x706))+(((0.000669878662189539)*pz*x705))+(((1.25000491997417e-5)*x707))+(((0.933012133781046)*x703*x705))+(((-2.33253033445262e-5)*x704))+(((-0.0669878662189539)*x705*x706))+(((-1.67469665547385e-6)*x705))))))+IKsqr(((x712.value)*(((((-0.258820142606703)*gconst61*py))+(((-0.965925532213041)*gconst60*py))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x711.value)*(((((-0.00500001967989669)*pz*x707))+(((0.0669878662189539)*x703*x704))+(((0.00933012133781046)*pz*x704))+(((0.500001967989669)*x706*x707))+(((0.500001967989669)*x703*x707))+(((-0.933012133781046)*x704*x706))+(((0.000669878662189539)*pz*x705))+(((1.25000491997417e-5)*x707))+(((0.933012133781046)*x703*x705))+(((-2.33253033445262e-5)*x704))+(((-0.0669878662189539)*x705*x706))+(((-1.67469665547385e-6)*x705))))), ((x712.value)*(((((-0.258820142606703)*gconst61*py))+(((-0.965925532213041)*gconst60*py))))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[4];
IkReal x713=IKcos(j15);
IkReal x714=IKsin(j15);
IkReal x715=gconst61*gconst61;
IkReal x716=py*py;
IkReal x717=pz*pz;
IkReal x718=px*px;
IkReal x719=(gconst60*gconst61);
IkReal x720=((0.258820142606703)*py);
IkReal x721=((0.965925532213041)*gconst60);
IkReal x722=((1.73204853512418)*pz);
IkReal x723=((0.965925532213041)*pz);
IkReal x724=((0.258820142606703)*pz);
IkReal x725=((0.500001967989669)*pz);
IkReal x726=x713*x713;
IkReal x727=((0.866024267562092)*x715);
IkReal x728=((2.16506066890523e-5)*x715);
IkReal x729=(gconst61*x713);
IkReal x730=(px*x714);
IkReal x731=(gconst60*x713);
IkReal x732=(py*x713);
IkReal x733=((1.00000393597934)*pz*x715);
IkReal x734=(x725*x732);
IkReal x735=(x717*x726);
IkReal x736=(x716*x726);
IkReal x737=(x718*x726);
IkReal x738=(x719*x722*x732);
IkReal x739=(x732*x733);
IkReal x740=(x739+x738);
evalcond[0]=((((-0.0048296276610652)*x729))+(((-1.0)*x724*x731))+(((0.00129410071303351)*x731))+((x723*x729))+((gconst61*x720))+((py*x721)));
evalcond[1]=(((x721*x732))+((x720*x729))+(((-1.0)*gconst60*x724))+((gconst61*x723))+(((-0.258820142606703)*gconst61*x730))+(((-0.0048296276610652)*gconst61))+(((0.00129410071303351)*gconst60))+(((-1.0)*x721*x730)));
evalcond[2]=((((0.500001967989669)*x719*x735))+(((-1.0)*x727*x735))+(((1.67469665547385e-6)*x726))+((x726*x728))+(((-0.933012133781046)*x716))+(((-0.500001967989669)*x716*x719))+x734+(((-1.25000491997417e-5)*x719*x726))+(((-1.0)*x740))+((x716*x727))+(((-0.0669878662189539)*x735)));
evalcond[3]=((1.67469665547385e-6)+(((0.500001967989669)*x719*x737))+(((1.00000393597934)*x719*x730*x732))+(((-0.500001967989669)*x719*x736))+((x727*x736))+(((-1.0)*x727*x737))+(((-0.500001967989669)*x718*x719))+(((-1.0)*x717*x727))+(((-1.0)*x725*x730))+(((-0.933012133781046)*x718))+((x718*x727))+(((-0.933012133781046)*x736))+(((0.500001967989669)*x717*x719))+x734+x728+(((-1.25000491997417e-5)*x719))+((x719*x722*x730))+(((-1.0)*x740))+(((1.86602426756209)*x730*x732))+(((0.933012133781046)*x737))+(((-1.73204853512418)*x715*x730*x732))+(((-0.0669878662189539)*x717))+((x730*x733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x741=(((cj15*py))+(((-1.0)*px*sj15)));
IkReal x742=((-0.005)+((sj16*((((py*sj15))+((cj15*px))))))+(((-1.0)*cj16*pz)));
soleval[0]=((((0.965925532213041)*cj17*x741))+(((-0.258820142606703)*sj17*x741))+(((-0.258820142606703)*cj17*x742))+(((-0.965925532213041)*sj17*x742)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(px);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
px=0;
pp=((py*py)+(pz*pz));
j15eval[0]=((((746.406769183216)*cj17*pz))+(((-3.73203384591608)*cj17))+sj17+(((-200.0)*pz*sj17)));
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
px=0;
pp=((py*py)+(pz*pz));
j15eval[0]=((((3.73203384591608)*py*sj17))+((cj17*py)));
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
px=0;
pp=((py*py)+(pz*pz));
IkReal x743=py*py;
j15eval[0]=((((-1.0)*cj17*sj17*x743))+(((-1.86601692295804)*x743))+(((1.73204171784377)*x743*(cj17*cj17))));
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(py);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[4], cj15array[4], sj15array[4];
bool j15valid[4]={false};
_nj15 = 4;
j15array[0]=0;
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
j15array[1]=1.5707963267949;
sj15array[1]=IKsin(j15array[1]);
cj15array[1]=IKcos(j15array[1]);
j15array[2]=3.14159265358979;
sj15array[2]=IKsin(j15array[2]);
cj15array[2]=IKcos(j15array[2]);
j15array[3]=-1.5707963267949;
sj15array[3]=IKsin(j15array[3]);
cj15array[3]=IKcos(j15array[3]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
if( j15array[1] > IKPI )
{
    j15array[1]-=IK2PI;
}
else if( j15array[1] < -IKPI )
{    j15array[1]+=IK2PI;
}
j15valid[1] = true;
if( j15array[2] > IKPI )
{
    j15array[2]-=IK2PI;
}
else if( j15array[2] < -IKPI )
{    j15array[2]+=IK2PI;
}
j15valid[2] = true;
if( j15array[3] > IKPI )
{
    j15array[3]-=IK2PI;
}
else if( j15array[3] < -IKPI )
{    j15array[3]+=IK2PI;
}
j15valid[3] = true;
for(int ij15 = 0; ij15 < 4; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 4; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

IkReal soleval[1];
IkReal x744=(((cj15*py))+(((-1.0)*px*sj15)));
IkReal x745=((-0.005)+((sj16*((((py*sj15))+((cj15*px))))))+(((-1.0)*cj16*pz)));
soleval[0]=((((0.965925532213041)*cj17*x744))+(((-0.258820142606703)*sj17*x744))+(((-0.258820142606703)*cj17*x745))+(((-0.965925532213041)*sj17*x745)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j15array[4], cj15array[4], sj15array[4];
bool j15valid[4]={false};
_nj15 = 4;
IkReal x746=py*py;
IkReal x747=cj17*cj17;
IkReal x748=((4.99996064012917e-5)*x746);
IkReal x749=(cj17*sj17*x746);
CheckValue<IkReal> x757=IKPowWithIntegerCheck(((((-0.500001967989669)*x749))+(((0.866024267562092)*x746*x747))+(((-0.933012133781046)*x746))),-1);
if(!x757.valid){
continue;
}
IkReal x750=x757.value;
IkReal x751=(py*pz*x750);
IkReal x752=((0.250000983994834)*x751);
IkReal x753=((0.866024267562092)*cj17*sj17*x751);
IkReal x754=((0.500001967989669)*x747*x751);
IkReal x755=(x754+x753);
if((((((8.66027676215715e-5)*x749*(cj17*cj17)))+((x747*x748))+(((-4.33013838107857e-5)*x749))+(((6.25004919983854e-6)*x746))+(((-1.0)*x748*(x747*x747))))) < -0.00001)
continue;
IkReal x756=((0.5)*x750*(IKsqrt(((((8.66027676215715e-5)*x749*(cj17*cj17)))+((x747*x748))+(((-4.33013838107857e-5)*x749))+(((6.25004919983854e-6)*x746))+(((-1.0)*x748*(x747*x747)))))));
cj15array[0]=(x755+x756+(((-1.0)*x752)));
cj15array[2]=(x755+(((-1.0)*x756))+(((-1.0)*x752)));
if( cj15array[0] >= -1-IKFAST_SINCOS_THRESH && cj15array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j15valid[0] = j15valid[1] = true;
    j15array[0] = IKacos(cj15array[0]);
    sj15array[0] = IKsin(j15array[0]);
    cj15array[1] = cj15array[0];
    j15array[1] = -j15array[0];
    sj15array[1] = -sj15array[0];
}
else if( isnan(cj15array[0]) )
{
    // probably any value will work
    j15valid[0] = true;
    cj15array[0] = 1; sj15array[0] = 0; j15array[0] = 0;
}
if( cj15array[2] >= -1-IKFAST_SINCOS_THRESH && cj15array[2] <= 1+IKFAST_SINCOS_THRESH )
{
    j15valid[2] = j15valid[3] = true;
    j15array[2] = IKacos(cj15array[2]);
    sj15array[2] = IKsin(j15array[2]);
    cj15array[3] = cj15array[2];
    j15array[3] = -j15array[2];
    sj15array[3] = -sj15array[2];
}
else if( isnan(cj15array[2]) )
{
    // probably any value will work
    j15valid[2] = true;
    cj15array[2] = 1; sj15array[2] = 0; j15array[2] = 0;
}
for(int ij15 = 0; ij15 < 4; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 4; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x758=IKcos(j15);
IkReal x759=cj17*cj17;
IkReal x760=pz*pz;
IkReal x761=py*py;
IkReal x762=(py*sj17);
IkReal x763=((0.0048296276610652)*cj17);
IkReal x764=((0.00129410071303351)*sj17);
IkReal x765=x758*x758;
IkReal x766=((0.866024267562092)*x759);
IkReal x767=((0.500001967989669)*cj17*sj17);
IkReal x768=((0.965925532213041)*cj17*pz);
IkReal x769=((0.258820142606703)*pz*sj17);
IkReal x770=((0.258820142606703)*cj17*py);
IkReal x771=(pz*x758);
IkReal x772=(x760*x765);
evalcond[0]=((((-1.0)*x769))+(((-1.0)*x763))+((x758*x770))+x768+x764+(((0.965925532213041)*x758*x762)));
evalcond[1]=((((-1.0)*x758*x769))+(((-1.0)*x758*x763))+((x758*x764))+((x758*x768))+x770+(((0.965925532213041)*x762)));
evalcond[2]=((((2.16506066890523e-5)*x759*x765))+(((-1.73204853512418)*cj17*x762*x771))+(((-0.0669878662189539)*x772))+((x767*x772))+((x761*x766))+(((-1.25000491997417e-5)*cj17*sj17*x765))+(((1.67469665547385e-6)*x765))+(((-1.00000393597934)*py*x759*x771))+(((-1.0)*x766*x772))+(((0.500001967989669)*py*x771))+(((-1.0)*x761*x767))+(((-0.933012133781046)*x761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x773=(((cj15*py))+(((-1.0)*px*sj15)));
IkReal x774=((-0.005)+((sj16*((((py*sj15))+((cj15*px))))))+(((-1.0)*cj16*pz)));
soleval[0]=((((-0.258820142606703)*cj17*x774))+(((-0.965925532213041)*sj17*x774))+(((0.965925532213041)*cj17*x773))+(((-0.258820142606703)*sj17*x773)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x778=IKPowWithIntegerCheck(((((0.965925532213041)*py*sj17))+(((0.258820142606703)*cj17*py))),-1);
if(!x778.valid){
continue;
}
IkReal x775=x778.value;
IkReal x776=(sj17*x775);
IkReal x777=(cj17*x775);
cj15array[0]=((((0.258820142606703)*pz*x776))+(((-0.965925532213041)*pz*x777))+(((-0.00129410071303351)*x776))+(((0.0048296276610652)*x777)));
if( cj15array[0] >= -1-IKFAST_SINCOS_THRESH && cj15array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j15valid[0] = j15valid[1] = true;
    j15array[0] = IKacos(cj15array[0]);
    sj15array[0] = IKsin(j15array[0]);
    cj15array[1] = cj15array[0];
    j15array[1] = -j15array[0];
    sj15array[1] = -sj15array[0];
}
else if( isnan(cj15array[0]) )
{
    // probably any value will work
    j15valid[0] = true;
    cj15array[0] = 1; sj15array[0] = 0; j15array[0] = 0;
}
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x779=IKcos(j15);
IkReal x780=cj17*cj17;
IkReal x781=py*py;
IkReal x782=pz*pz;
IkReal x783=(py*sj17);
IkReal x784=(cj17*sj17);
IkReal x785=x779*x779;
IkReal x786=(cj17*x779);
IkReal x787=((0.866024267562092)*x780);
IkReal x788=((0.500001967989669)*x781);
IkReal x789=(sj17*x779);
IkReal x790=((2.16506066890523e-5)*x780);
IkReal x791=((0.933012133781046)*x781);
IkReal x792=(py*pz*x779);
IkReal x793=((0.500001967989669)*x792);
IkReal x794=(x782*x785);
IkReal x795=((1.73204853512418)*pz*x783*x786);
IkReal x796=((1.00000393597934)*x780*x792);
IkReal x797=(x795+x796);
evalcond[0]=((((0.965925532213041)*x783))+(((0.965925532213041)*pz*x786))+(((-0.0048296276610652)*x786))+(((-0.258820142606703)*pz*x789))+(((0.00129410071303351)*x789))+(((0.258820142606703)*cj17*py)));
evalcond[1]=((1.67469665547385e-6)+(((-1.0)*x784*x785*x788))+(((-1.0)*x797))+((x781*x785*x787))+(((-1.0)*x782*x787))+(((-0.0669878662189539)*x782))+(((-1.0)*x785*x791))+x790+x793+(((0.500001967989669)*x782*x784))+(((-1.25000491997417e-5)*x784)));
evalcond[2]=(((x781*x787))+(((-1.0)*x797))+(((-1.0)*x791))+((x785*x790))+(((0.500001967989669)*x784*x794))+(((-1.25000491997417e-5)*x784*x785))+(((1.67469665547385e-6)*x785))+(((-1.0)*x787*x794))+(((-1.0)*x784*x788))+x793+(((-0.0669878662189539)*x794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x798=(((cj15*py))+(((-1.0)*px*sj15)));
IkReal x799=((-0.005)+((sj16*((((py*sj15))+((cj15*px))))))+(((-1.0)*cj16*pz)));
soleval[0]=((((-0.258820142606703)*cj17*x799))+(((0.965925532213041)*cj17*x798))+(((-0.965925532213041)*sj17*x799))+(((-0.258820142606703)*sj17*x798)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x802=IKPowWithIntegerCheck(((((-0.258820142606703)*pz*sj17))+(((-0.0048296276610652)*cj17))+(((0.00129410071303351)*sj17))+(((0.965925532213041)*cj17*pz))),-1);
if(!x802.valid){
continue;
}
IkReal x800=x802.value;
IkReal x801=(py*x800);
cj15array[0]=((((-0.965925532213041)*sj17*x801))+(((-0.258820142606703)*cj17*x801)));
if( cj15array[0] >= -1-IKFAST_SINCOS_THRESH && cj15array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j15valid[0] = j15valid[1] = true;
    j15array[0] = IKacos(cj15array[0]);
    sj15array[0] = IKsin(j15array[0]);
    cj15array[1] = cj15array[0];
    j15array[1] = -j15array[0];
    sj15array[1] = -sj15array[0];
}
else if( isnan(cj15array[0]) )
{
    // probably any value will work
    j15valid[0] = true;
    cj15array[0] = 1; sj15array[0] = 0; j15array[0] = 0;
}
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x803=IKcos(j15);
IkReal x804=cj17*cj17;
IkReal x805=py*py;
IkReal x806=pz*pz;
IkReal x807=(cj17*sj17);
IkReal x808=x803*x803;
IkReal x809=((0.866024267562092)*x804);
IkReal x810=((0.500001967989669)*x805);
IkReal x811=((2.16506066890523e-5)*x804);
IkReal x812=(py*x803);
IkReal x813=((0.933012133781046)*x805);
IkReal x814=((0.500001967989669)*pz*x812);
IkReal x815=(x806*x808);
IkReal x816=((1.73204853512418)*pz*x807*x812);
IkReal x817=((1.00000393597934)*pz*x804*x812);
IkReal x818=(x816+x817);
evalcond[0]=((((-0.258820142606703)*pz*sj17))+(((-0.0048296276610652)*cj17))+(((0.258820142606703)*cj17*x812))+(((0.00129410071303351)*sj17))+(((0.965925532213041)*cj17*pz))+(((0.965925532213041)*sj17*x812)));
evalcond[1]=((1.67469665547385e-6)+(((0.500001967989669)*x806*x807))+(((-1.0)*x808*x813))+(((-1.25000491997417e-5)*x807))+(((-1.0)*x806*x809))+(((-1.0)*x807*x808*x810))+(((-1.0)*x818))+((x805*x808*x809))+x814+x811+(((-0.0669878662189539)*x806)));
evalcond[2]=((((-0.0669878662189539)*x815))+(((-1.0)*x809*x815))+(((-1.0)*x818))+(((-1.0)*x813))+((x808*x811))+((x805*x809))+(((0.500001967989669)*x807*x815))+(((1.67469665547385e-6)*x808))+(((-1.0)*x807*x810))+x814+(((-1.25000491997417e-5)*x807*x808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x819=(((cj15*py))+(((-1.0)*px*sj15)));
IkReal x820=((-0.005)+((sj16*((((py*sj15))+((cj15*px))))))+(((-1.0)*cj16*pz)));
soleval[0]=((((-0.965925532213041)*sj17*x820))+(((0.965925532213041)*cj17*x819))+(((-0.258820142606703)*cj17*x820))+(((-0.258820142606703)*sj17*x819)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x821=IKPowWithIntegerCheck(((((-0.258820142606703)*cj17*px))+(((-0.965925532213041)*px*sj17))),-1);
if(!x821.valid){
continue;
}
CheckValue<IkReal> x822=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x822.valid){
continue;
}
CheckValue<IkReal> x823=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x823.valid){
continue;
}
if((((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x824=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x824.valid){
continue;
}
if((((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x825=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x825.valid){
continue;
}
CheckValue<IkReal> x826=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x826.valid){
continue;
}
CheckValue<IkReal> x827=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x827.valid){
continue;
}
CheckValue<IkReal> x828=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x828.valid){
continue;
}
CheckValue<IkReal> x829=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x829.valid){
continue;
}
CheckValue<IkReal> x830=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x830.valid){
continue;
}
CheckValue<IkReal> x831=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x831.valid){
continue;
}
if((((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))) < -0.00001)
continue;
if( IKabs(((x821.value)*(((((0.241482333518994)*pz*sj17*(py*py)*(x822.value)))+(((0.0048296276610652)*cj17))+(((-0.129410071303351)*cj17*py*(x823.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))+(((-0.48296276610652)*py*sj17*(x824.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))+(((0.707104370895605)*pz*(cj17*cj17*cj17)*(py*py)*(x825.value)))+(((-0.00129410071303351)*sj17))+(((-0.771809661224964)*cj17*pz*(py*py)*(x826.value)))+(((0.258820142606703)*pz*sj17))+(((-0.965925532213041)*cj17*pz))+(((-0.707109191469274)*pz*sj17*(cj17*cj17)*(py*py)*(x827.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.250000983994834)*py*pz*(x828.value)))+(((0.500001967989669)*py*pz*(cj17*cj17)*(x829.value)))+(((0.866024267562092)*cj17*py*pz*sj17*(x830.value)))+(((0.5)*(x831.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x821.value)*(((((0.241482333518994)*pz*sj17*(py*py)*(x822.value)))+(((0.0048296276610652)*cj17))+(((-0.129410071303351)*cj17*py*(x823.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))+(((-0.48296276610652)*py*sj17*(x824.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))+(((0.707104370895605)*pz*(cj17*cj17*cj17)*(py*py)*(x825.value)))+(((-0.00129410071303351)*sj17))+(((-0.771809661224964)*cj17*pz*(py*py)*(x826.value)))+(((0.258820142606703)*pz*sj17))+(((-0.965925532213041)*cj17*pz))+(((-0.707109191469274)*pz*sj17*(cj17*cj17)*(py*py)*(x827.value)))))))+IKsqr(((((-0.250000983994834)*py*pz*(x828.value)))+(((0.500001967989669)*py*pz*(cj17*cj17)*(x829.value)))+(((0.866024267562092)*cj17*py*pz*sj17*(x830.value)))+(((0.5)*(x831.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x821.value)*(((((0.241482333518994)*pz*sj17*(py*py)*(x822.value)))+(((0.0048296276610652)*cj17))+(((-0.129410071303351)*cj17*py*(x823.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))+(((-0.48296276610652)*py*sj17*(x824.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))+(((0.707104370895605)*pz*(cj17*cj17*cj17)*(py*py)*(x825.value)))+(((-0.00129410071303351)*sj17))+(((-0.771809661224964)*cj17*pz*(py*py)*(x826.value)))+(((0.258820142606703)*pz*sj17))+(((-0.965925532213041)*cj17*pz))+(((-0.707109191469274)*pz*sj17*(cj17*cj17)*(py*py)*(x827.value)))))), ((((-0.250000983994834)*py*pz*(x828.value)))+(((0.500001967989669)*py*pz*(cj17*cj17)*(x829.value)))+(((0.866024267562092)*cj17*py*pz*sj17*(x830.value)))+(((0.5)*(x831.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
CheckValue<IkReal> x832=IKPowWithIntegerCheck(((((-0.258820142606703)*cj17*px))+(((-0.965925532213041)*px*sj17))),-1);
if(!x832.valid){
continue;
}
CheckValue<IkReal> x833=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x833.valid){
continue;
}
CheckValue<IkReal> x834=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x834.valid){
continue;
}
if((((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x835=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x835.valid){
continue;
}
CheckValue<IkReal> x836=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x836.valid){
continue;
}
if((((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x837=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x837.valid){
continue;
}
CheckValue<IkReal> x838=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x838.valid){
continue;
}
CheckValue<IkReal> x839=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x839.valid){
continue;
}
if((((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x840=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x840.valid){
continue;
}
CheckValue<IkReal> x841=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x841.valid){
continue;
}
CheckValue<IkReal> x842=IKPowWithIntegerCheck(((1.67469665547385e-6)+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.866024267562092)*(cj17*cj17)*(pz*pz)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(pz*pz)))+(((-0.0669878662189539)*(pz*pz)))),-1);
if(!x842.valid){
continue;
}
if( IKabs(((x832.value)*(((((0.241482333518994)*pz*sj17*(py*py)*(x833.value)))+(((0.0048296276610652)*cj17))+(((0.129410071303351)*cj17*py*(x834.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))+(((0.707104370895605)*pz*(cj17*cj17*cj17)*(py*py)*(x835.value)))+(((-0.00129410071303351)*sj17))+(((0.48296276610652)*py*sj17*(x836.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))+(((-0.771809661224964)*cj17*pz*(py*py)*(x837.value)))+(((0.258820142606703)*pz*sj17))+(((-0.965925532213041)*cj17*pz))+(((-0.707109191469274)*pz*sj17*(cj17*cj17)*(py*py)*(x838.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.5)*(x839.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))+(((-0.250000983994834)*py*pz*(x840.value)))+(((0.500001967989669)*py*pz*(cj17*cj17)*(x841.value)))+(((0.866024267562092)*cj17*py*pz*sj17*(x842.value))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x832.value)*(((((0.241482333518994)*pz*sj17*(py*py)*(x833.value)))+(((0.0048296276610652)*cj17))+(((0.129410071303351)*cj17*py*(x834.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))+(((0.707104370895605)*pz*(cj17*cj17*cj17)*(py*py)*(x835.value)))+(((-0.00129410071303351)*sj17))+(((0.48296276610652)*py*sj17*(x836.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))+(((-0.771809661224964)*cj17*pz*(py*py)*(x837.value)))+(((0.258820142606703)*pz*sj17))+(((-0.965925532213041)*cj17*pz))+(((-0.707109191469274)*pz*sj17*(cj17*cj17)*(py*py)*(x838.value)))))))+IKsqr(((((-0.5)*(x839.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))+(((-0.250000983994834)*py*pz*(x840.value)))+(((0.500001967989669)*py*pz*(cj17*cj17)*(x841.value)))+(((0.866024267562092)*cj17*py*pz*sj17*(x842.value)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[1]=IKatan2(((x832.value)*(((((0.241482333518994)*pz*sj17*(py*py)*(x833.value)))+(((0.0048296276610652)*cj17))+(((0.129410071303351)*cj17*py*(x834.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))+(((0.707104370895605)*pz*(cj17*cj17*cj17)*(py*py)*(x835.value)))+(((-0.00129410071303351)*sj17))+(((0.48296276610652)*py*sj17*(x836.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))+(((-0.771809661224964)*cj17*pz*(py*py)*(x837.value)))+(((0.258820142606703)*pz*sj17))+(((-0.965925532213041)*cj17*pz))+(((-0.707109191469274)*pz*sj17*(cj17*cj17)*(py*py)*(x838.value)))))), ((((-0.5)*(x839.value)*(IKsqrt(((((4.99996064012917e-5)*(cj17*cj17)*(py*py)))+(((6.25004919983854e-6)*(py*py)))+(((-4.99996064012917e-5)*(cj17*cj17*cj17*cj17)*(py*py)))+(((-4.33013838107857e-5)*cj17*sj17*(py*py)))+(((8.66027676215715e-5)*sj17*(cj17*cj17*cj17)*(py*py))))))))+(((-0.250000983994834)*py*pz*(x840.value)))+(((0.500001967989669)*py*pz*(cj17*cj17)*(x841.value)))+(((0.866024267562092)*cj17*py*pz*sj17*(x842.value)))));
sj15array[1]=IKsin(j15array[1]);
cj15array[1]=IKcos(j15array[1]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
if( j15array[1] > IKPI )
{
    j15array[1]-=IK2PI;
}
else if( j15array[1] < -IKPI )
{    j15array[1]+=IK2PI;
}
j15valid[1] = true;
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[4];
IkReal x843=IKcos(j15);
IkReal x844=IKsin(j15);
IkReal x845=cj17*cj17;
IkReal x846=pz*pz;
IkReal x847=py*py;
IkReal x848=px*px;
IkReal x849=(py*sj17);
IkReal x850=(cj17*sj17);
IkReal x851=((0.965925532213041)*pz);
IkReal x852=((0.258820142606703)*cj17);
IkReal x853=((0.00129410071303351)*sj17);
IkReal x854=((0.500001967989669)*pz);
IkReal x855=((1.73204853512418)*pz);
IkReal x856=x843*x843;
IkReal x857=((0.866024267562092)*x845);
IkReal x858=(cj17*x843);
IkReal x859=(px*x844);
IkReal x860=(py*x843);
IkReal x861=((0.500001967989669)*x847);
IkReal x862=((0.258820142606703)*pz*sj17);
IkReal x863=((2.16506066890523e-5)*x845);
IkReal x864=((0.933012133781046)*x847);
IkReal x865=((1.00000393597934)*pz*x845);
IkReal x866=(x854*x860);
IkReal x867=(x848*x856);
IkReal x868=(x846*x856);
IkReal x869=(x849*x855*x858);
IkReal x870=(x860*x865);
IkReal x871=(x869+x870);
evalcond[0]=((((-0.0048296276610652)*x858))+((x851*x858))+(((0.965925532213041)*x849))+(((-1.0)*x843*x862))+((py*x852))+((x843*x853)));
evalcond[1]=((((-1.0)*x862))+(((-0.0048296276610652)*cj17))+(((-1.0)*x852*x859))+((cj17*x851))+(((-0.965925532213041)*sj17*x859))+x853+((x852*x860))+(((0.965925532213041)*x843*x849)));
evalcond[2]=((((-1.0)*x864))+(((-1.25000491997417e-5)*x850*x856))+(((-0.0669878662189539)*x868))+(((0.500001967989669)*x850*x868))+(((-1.0)*x850*x861))+((x847*x857))+((x856*x863))+x866+(((1.67469665547385e-6)*x856))+(((-1.0)*x871))+(((-1.0)*x857*x868)));
evalcond[3]=((1.67469665547385e-6)+((x848*x857))+(((-1.25000491997417e-5)*x850))+(((1.86602426756209)*x859*x860))+(((-1.0)*x846*x857))+(((1.00000393597934)*x849*x858*x859))+(((0.500001967989669)*x850*x867))+((x850*x855*x859))+(((0.500001967989669)*x846*x850))+((x847*x856*x857))+(((0.933012133781046)*x867))+(((-0.500001967989669)*x848*x850))+(((-1.0)*x850*x856*x861))+(((-1.73204853512418)*x845*x859*x860))+((x859*x865))+(((-0.0669878662189539)*x846))+(((-1.0)*x856*x864))+x866+x863+(((-1.0)*x854*x859))+(((-0.933012133781046)*x848))+(((-1.0)*x871))+(((-1.0)*x857*x867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x872=(((cj15*py))+(((-1.0)*px*sj15)));
IkReal x873=((-0.005)+((sj16*((((py*sj15))+((cj15*px))))))+(((-1.0)*cj16*pz)));
soleval[0]=((((-0.258820142606703)*sj17*x872))+(((-0.965925532213041)*sj17*x873))+(((0.965925532213041)*cj17*x872))+(((-0.258820142606703)*cj17*x873)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x874=py*py;
IkReal x875=pz*pz;
IkReal x876=cj17*cj17;
IkReal x877=(cj17*pz);
IkReal x878=(cj17*sj17);
IkReal x879=(px*pz);
IkReal x880=((0.866024267562092)*x876);
CheckValue<IkReal> x881=IKPowWithIntegerCheck(((((-0.00125000491997417)*px))+(((-0.500001967989669)*x876*x879))+(((0.250000983994834)*x879))+(((-0.866024267562092)*px*sj17*x877))+(((0.00250000983994834)*px*x876))+(((0.00433012133781046)*px*x878))),-1);
if(!x881.valid){
continue;
}
CheckValue<IkReal> x882=IKPowWithIntegerCheck(((((-0.258820142606703)*pz*sj17))+(((-0.0048296276610652)*cj17))+(((0.965925532213041)*x877))+(((0.00129410071303351)*sj17))),-1);
if(!x882.valid){
continue;
}
if( IKabs(((x881.value)*(((-1.67469665547385e-6)+(((1.25000491997417e-5)*x878))+(((0.500001967989669)*x875*x878))+(((-0.0669878662189539)*x875))+(((0.000669878662189539)*pz))+(((0.933012133781046)*x874))+(((-2.16506066890523e-5)*x876))+(((0.00866024267562092)*pz*x876))+(((-0.00500001967989669)*sj17*x877))+(((-1.0)*x874*x880))+(((0.500001967989669)*x874*x878))+(((-1.0)*x875*x880)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x882.value)*(((((-0.965925532213041)*py*sj17))+(((-0.258820142606703)*cj17*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x881.value)*(((-1.67469665547385e-6)+(((1.25000491997417e-5)*x878))+(((0.500001967989669)*x875*x878))+(((-0.0669878662189539)*x875))+(((0.000669878662189539)*pz))+(((0.933012133781046)*x874))+(((-2.16506066890523e-5)*x876))+(((0.00866024267562092)*pz*x876))+(((-0.00500001967989669)*sj17*x877))+(((-1.0)*x874*x880))+(((0.500001967989669)*x874*x878))+(((-1.0)*x875*x880))))))+IKsqr(((x882.value)*(((((-0.965925532213041)*py*sj17))+(((-0.258820142606703)*cj17*py))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((x881.value)*(((-1.67469665547385e-6)+(((1.25000491997417e-5)*x878))+(((0.500001967989669)*x875*x878))+(((-0.0669878662189539)*x875))+(((0.000669878662189539)*pz))+(((0.933012133781046)*x874))+(((-2.16506066890523e-5)*x876))+(((0.00866024267562092)*pz*x876))+(((-0.00500001967989669)*sj17*x877))+(((-1.0)*x874*x880))+(((0.500001967989669)*x874*x878))+(((-1.0)*x875*x880))))), ((x882.value)*(((((-0.965925532213041)*py*sj17))+(((-0.258820142606703)*cj17*py))))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[4];
IkReal x883=IKcos(j15);
IkReal x884=IKsin(j15);
IkReal x885=cj17*cj17;
IkReal x886=pz*pz;
IkReal x887=py*py;
IkReal x888=px*px;
IkReal x889=(py*sj17);
IkReal x890=(cj17*sj17);
IkReal x891=((0.965925532213041)*pz);
IkReal x892=((0.258820142606703)*cj17);
IkReal x893=((0.00129410071303351)*sj17);
IkReal x894=((0.500001967989669)*pz);
IkReal x895=((1.73204853512418)*pz);
IkReal x896=x883*x883;
IkReal x897=((0.866024267562092)*x885);
IkReal x898=(cj17*x883);
IkReal x899=(px*x884);
IkReal x900=(py*x883);
IkReal x901=((0.500001967989669)*x887);
IkReal x902=((0.258820142606703)*pz*sj17);
IkReal x903=((2.16506066890523e-5)*x885);
IkReal x904=((0.933012133781046)*x887);
IkReal x905=((1.00000393597934)*pz*x885);
IkReal x906=(x894*x900);
IkReal x907=(x888*x896);
IkReal x908=(x886*x896);
IkReal x909=(x889*x895*x898);
IkReal x910=(x900*x905);
IkReal x911=(x910+x909);
evalcond[0]=(((py*x892))+(((-0.0048296276610652)*x898))+((x883*x893))+(((-1.0)*x883*x902))+((x891*x898))+(((0.965925532213041)*x889)));
evalcond[1]=((((-1.0)*x892*x899))+(((-0.0048296276610652)*cj17))+(((0.965925532213041)*x883*x889))+(((-1.0)*x902))+(((-0.965925532213041)*sj17*x899))+((cj17*x891))+((x892*x900))+x893);
evalcond[2]=((((-1.0)*x890*x901))+(((-1.25000491997417e-5)*x890*x896))+(((1.67469665547385e-6)*x896))+(((-1.0)*x897*x908))+(((-1.0)*x904))+(((-0.0669878662189539)*x908))+(((-1.0)*x911))+(((0.500001967989669)*x890*x908))+((x896*x903))+x906+((x887*x897)));
evalcond[3]=((1.67469665547385e-6)+(((0.500001967989669)*x886*x890))+(((-1.0)*x896*x904))+(((-1.0)*x897*x907))+(((-0.500001967989669)*x888*x890))+(((-0.0669878662189539)*x886))+(((-1.0)*x911))+((x887*x896*x897))+(((0.500001967989669)*x890*x907))+((x899*x905))+(((0.933012133781046)*x907))+(((1.00000393597934)*x889*x898*x899))+(((-1.0)*x894*x899))+((x890*x895*x899))+(((-1.73204853512418)*x885*x899*x900))+(((-1.25000491997417e-5)*x890))+x906+x903+(((1.86602426756209)*x899*x900))+((x888*x897))+(((-0.933012133781046)*x888))+(((-1.0)*x886*x897))+(((-1.0)*x890*x896*x901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x912=(((cj15*py))+(((-1.0)*px*sj15)));
IkReal x913=((-0.005)+((sj16*((((py*sj15))+((cj15*px))))))+(((-1.0)*cj16*pz)));
soleval[0]=((((0.965925532213041)*cj17*x912))+(((-0.258820142606703)*sj17*x912))+(((-0.258820142606703)*cj17*x913))+(((-0.965925532213041)*sj17*x913)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
j15array[0]=0;
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

IkReal soleval[1];
IkReal x914=(((cj15*py))+(((-1.0)*px*sj15)));
IkReal x915=((-0.005)+((sj16*((((py*sj15))+((cj15*px))))))+(((-1.0)*cj16*pz)));
soleval[0]=((((0.965925532213041)*cj17*x914))+(((-0.258820142606703)*sj17*x914))+(((-0.258820142606703)*cj17*x915))+(((-0.965925532213041)*sj17*x915)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x916=py*py;
IkReal x917=pz*pz;
IkReal x918=cj17*cj17;
IkReal x919=cj16*cj16;
IkReal x920=(cj17*sj17);
IkReal x921=((0.000334939331094769)*pz);
IkReal x922=(cj16*px);
IkReal x923=((0.866024267562092)*sj16);
IkReal x924=((0.866024267562092)*px);
IkReal x925=(pz*sj16);
IkReal x926=((0.250000983994834)*sj16);
IkReal x927=((0.250000983994834)*px);
IkReal x928=(cj16*py*sj16);
IkReal x929=((0.500001967989669)*x918);
IkReal x930=(pz*x918);
IkReal x931=(pz*x919);
IkReal x932=(cj16*x916);
IkReal x933=(cj16*x917);
IkReal x934=((0.866024267562092)*x918);
CheckValue<IkReal> x935=IKPowWithIntegerCheck(IKsign(((((0.00250000983994834)*x920*x928))+(((-0.000334939331094769)*x928))+((px*x929*x931))+(((-1.0)*x927*x931))+(((0.00433012133781046)*x920*x922))+(((0.00250000983994834)*x918*x922))+(((-1.0)*py*x925))+(((-0.00433012133781046)*x918*x928))+((x920*x924*x931))+(((-0.00125000491997417)*x922)))),-1);
if(!x935.valid){
continue;
}
CheckValue<IkReal> x936 = IKatan2WithCheck(IkReal((((py*sj16*x922*x929))+(((-1.0)*x921))+(((0.00250000983994834)*pz*x920))+(((-0.0669878662189539)*x933))+(((1.25000491997417e-5)*cj16*x920))+(((-1.67469665547385e-6)*cj16))+(((-2.16506066890523e-5)*cj16*x918))+(((0.00250000983994834)*x920*x931))+((py*x920*x922*x923))+(((0.933012133781046)*x932))+(((-1.0)*py*x922*x926))+(((0.500001967989669)*x920*x932))+(((0.500001967989669)*x920*x933))+(((-0.00433012133781046)*x930))+(((-0.00433012133781046)*x919*x930))+(((-1.0)*x919*x921))+(((-1.0)*x932*x934))+(((-1.0)*x933*x934)))),IkReal(((((-1.0)*x920*x923*x933))+(((-1.0)*x920*x923*x932))+(((0.00125000491997417)*x925))+(((0.500001967989669)*py*x920*x922))+(((-1.0)*py*x922*x934))+(((-1.0)*sj16*x929*x933))+(((-1.0)*sj16*x929*x932))+(((-0.00433012133781046)*x920*x925))+(((-0.00250000983994834)*x918*x925))+((x926*x933))+((x926*x932))+(((0.933012133781046)*py*x922)))),IKFAST_ATAN2_MAGTHRESH);
if(!x936.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(((1.5707963267949)*(x935.value)))+(x936.value));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[6];
IkReal x937=IKsin(j15);
IkReal x938=IKcos(j15);
IkReal x939=cj16*cj16;
IkReal x940=px*px;
IkReal x941=cj17*cj17;
IkReal x942=pz*pz;
IkReal x943=py*py;
IkReal x944=(cj16*pz);
IkReal x945=(sj16*sj17);
IkReal x946=((1.00000393597934)*cj17);
IkReal x947=(cj17*pz);
IkReal x948=((1.73204853512418)*cj17);
IkReal x949=((0.965925532213041)*sj17);
IkReal x950=(cj16*py);
IkReal x951=((0.258820142606703)*cj17);
IkReal x952=((0.00129410071303351)*sj17);
IkReal x953=x938*x938;
IkReal x954=((0.500001967989669)*cj17*sj17);
IkReal x955=((2.16506066890523e-5)*x941);
IkReal x956=((0.933012133781046)*x939);
IkReal x957=(py*x937);
IkReal x958=(px*x938);
IkReal x959=(px*x937);
IkReal x960=((0.866024267562092)*x941);
IkReal x961=((1.73204853512418)*x941);
IkReal x962=((0.0048296276610652)*cj16*cj17);
IkReal x963=(sj16*x937);
IkReal x964=((0.258820142606703)*pz*sj17);
IkReal x965=((1.25000491997417e-5)*cj17*sj17);
IkReal x966=((0.965925532213041)*cj17*sj16);
IkReal x967=(py*x938);
IkReal x968=((0.933012133781046)*x942);
IkReal x969=(x938*x942);
IkReal x970=(x939*x942);
IkReal x971=(x939*x940);
IkReal x972=(x939*x943);
IkReal x973=(x942*x960);
IkReal x974=(x942*x954);
IkReal x975=(x939*x953);
IkReal x976=(x942*x953);
IkReal x977=((1.00000393597934)*x938*x941);
IkReal x978=((0.500001967989669)*x944*x967);
IkReal x979=(sj17*x944*x948*x967);
IkReal x980=((1.00000393597934)*x941*x944*x967);
IkReal x981=(x980+x979);
evalcond[0]=((((-1.0)*cj16*x952))+((cj16*x951*x959))+(((-1.0)*x938*x949*x950))+(((0.965925532213041)*x947))+((cj16*x949*x959))+x962+(((-1.0)*x964))+(((-1.0)*x938*x950*x951)));
evalcond[1]=((((-0.965925532213041)*pz*x937*x945))+(((0.965925532213041)*x938*x947))+(((-1.0)*x938*x964))+(((-0.258820142606703)*x947*x963))+(((-1.0)*x950*x951))+(((-1.0)*x949*x950))+(((-1.0)*cj16*x938*x952))+((x938*x962)));
evalcond[2]=((((0.0048296276610652)*cj17))+((x951*x959))+((x949*x959))+(((0.965925532213041)*cj17*x944))+(((-0.258820142606703)*sj17*x944))+(((-1.0)*x958*x966))+(((-1.0)*x957*x966))+(((-1.0)*x951*x967))+(((0.258820142606703)*x945*x958))+(((0.258820142606703)*x945*x957))+(((-1.0)*x952))+(((-1.0)*x949*x967)));
evalcond[3]=(((x953*x954*x971))+(((-1.0)*x943*x953*x956))+(((-0.0669878662189539)*x942))+(((-1.0)*sj17*x944*x948*x959))+(((-1.0)*x940*x956))+((x953*x960*x972))+(((1.67469665547385e-6)*x939))+((sj17*x939*x946*x957*x958))+(((1.86602426756209)*x939*x957*x958))+((x960*x971))+(((-1.0)*x939*x965))+(((-1.0)*x939*x957*x958*x961))+((x940*x953*x956))+(((-1.0)*x953*x960*x971))+((x939*x955))+x981+x974+(((-1.0)*x973))+(((-1.0)*x978))+(((0.500001967989669)*x944*x959))+(((-1.00000393597934)*x941*x944*x959))+(((-1.0)*x953*x954*x972))+(((-1.0)*x954*x971)));
evalcond[4]=((((-1.0)*x965*x975))+(((-0.500001967989669)*x963*x969))+(((0.866024267562092)*x976))+((sj16*x944*x957*x961))+(((1.67469665547385e-6)*x975))+((x953*x960*x970))+((x937*x945*x948*x969))+(((-1.0)*x943*x956))+(((-1.86602426756209)*sj16*x944*x957))+((x942*x956))+((x960*x972))+(((-1.0)*x956*x976))+(((-1.0)*x944*x945*x946*x957))+((x954*x970))+x981+x973+(((-1.0)*x961*x976))+(((-1.0)*x968))+(((1.00000393597934)*x941*x963*x969))+((x955*x975))+(((-1.0)*x974))+(((-1.0)*x978))+((sj17*x946*x976))+(((-1.0)*x953*x954*x970))+(((-1.0)*x954*x972))+(((-1.0)*x960*x970)));
IkReal x982=IKcos(j15);
IkReal x983=IKcos(j15);
IkReal x984=IKcos(j15);
IkReal x985=IKcos(j15);
IkReal x986=IKcos(j15);
IkReal x987=IKcos(j15);
IkReal x988=IKcos(j15);
IkReal x989=IKcos(j15);
IkReal x990=IKcos(j15);
IkReal x991=IKcos(j15);
IkReal x992=IKcos(j15);
IkReal x993=IKcos(j15);
IkReal x994=IKcos(j15);
IkReal x995=IKcos(j15);
IkReal x996=IKcos(j15);
evalcond[5]=((1.67469665547385e-6)+(((1.00000393597934)*cj17*sj17*(px*px)*(x982*x982)))+(((-0.500001967989669)*cj16*py*pz*(IKcos(j15))))+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.0669878662189539)*(cj16*cj16)*(py*py)*(x983*x983)))+(((-1.73204853512418)*cj16*cj17*px*pz*sj17*(IKsin(j15))))+(((-0.500001967989669)*cj17*sj17*(cj16*cj16)*(py*py)))+(((0.500001967989669)*cj16*px*pz*(IKsin(j15))))+(((-0.500001967989669)*px*py*sj16))+(((0.133975732437908)*cj16*py*pz*sj16*(IKsin(j15))))+(((1.73204853512418)*cj17*px*py*sj16*sj17))+(((1.73204853512418)*px*py*(IKcos(j15))*(IKsin(j15))))+(((1.73204853512418)*cj16*py*pz*sj16*(cj17*cj17)*(IKsin(j15))))+(((1.00000393597934)*sj16*(cj17*cj17)*(px*px)*(IKcos(j15))*(IKsin(j15))))+(((-0.866024267562092)*(cj16*cj16)*(cj17*cj17)*(py*py)*(x984*x984)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((-0.933012133781046)*(px*px)))+(((0.500001967989669)*sj16*(py*py)*(IKcos(j15))*(IKsin(j15))))+(((-0.0669878662189539)*(py*py)))+(((-1.00000393597934)*cj17*sj17*(py*py)*(x985*x985)))+(((0.0669878662189539)*(cj16*cj16)*(py*py)))+(((-0.500001967989669)*sj16*(px*px)*(IKcos(j15))*(IKsin(j15))))+(((0.866024267562092)*(cj17*cj17)*(px*px)))+(((-0.866024267562092)*(cj16*cj16)*(cj17*cj17)*(pz*pz)))+(((-0.866024267562092)*(cj17*cj17)*(py*py)))+(((-0.500001967989669)*cj17*sj17*(cj16*cj16)*(px*px)*(x986*x986)))+(((1.73204853512418)*cj16*px*pz*sj16*(cj17*cj17)*(IKcos(j15))))+(((-1.00000393597934)*sj16*(cj17*cj17)*(py*py)*(IKcos(j15))*(IKsin(j15))))+(((0.866024267562092)*(cj16*cj16)*(cj17*cj17)*(px*px)*(x987*x987)))+(((-3.46409707024837)*cj17*px*py*sj16*sj17*(x988*x988)))+(((0.0669878662189539)*(cj16*cj16)*(px*px)*(x989*x989)))+(((1.73204853512418)*px*py*(cj16*cj16)*(cj17*cj17)*(IKcos(j15))*(IKsin(j15))))+(((0.500001967989669)*cj17*sj17*(py*py)))+(((-1.00000393597934)*cj17*px*py*sj17*(cj16*cj16)*(IKcos(j15))*(IKsin(j15))))+(((1.73204853512418)*(cj17*cj17)*(py*py)*(x990*x990)))+(((-0.866024267562092)*(py*py)*(x991*x991)))+(((0.500001967989669)*cj17*sj17*(cj16*cj16)*(pz*pz)))+(((1.00000393597934)*px*py*sj16*(x992*x992)))+(((-3.46409707024837)*px*py*(cj17*cj17)*(IKcos(j15))*(IKsin(j15))))+(((0.866024267562092)*(px*px)*(x993*x993)))+(((-1.00000393597934)*cj16*cj17*px*pz*sj16*sj17*(IKcos(j15))))+(((1.73204853512418)*cj16*cj17*py*pz*sj17*(IKcos(j15))))+(((1.00000393597934)*px*py*sj16*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(cj16*cj16)*(py*py)*(x994*x994)))+(((-2.00000787195867)*px*py*sj16*(cj17*cj17)*(x995*x995)))+(((-0.0669878662189539)*(cj16*cj16)*(pz*pz)))+(((0.866024267562092)*(cj16*cj16)*(cj17*cj17)*(py*py)))+(((2.00000787195867)*cj17*px*py*sj17*(IKcos(j15))*(IKsin(j15))))+(((0.133975732437908)*px*py*(cj16*cj16)*(IKcos(j15))*(IKsin(j15))))+(((-1.00000393597934)*cj16*cj17*py*pz*sj16*sj17*(IKsin(j15))))+(((-0.500001967989669)*cj17*sj17*(px*px)))+(((-1.73204853512418)*cj17*sj16*sj17*(py*py)*(IKcos(j15))*(IKsin(j15))))+(((-1.73204853512418)*(cj17*cj17)*(px*px)*(x996*x996)))+(((1.73204853512418)*cj17*sj16*sj17*(px*px)*(IKcos(j15))*(IKsin(j15))))+(((1.00000393597934)*cj16*py*pz*(cj17*cj17)*(IKcos(j15))))+(((-1.00000393597934)*cj16*px*pz*(cj17*cj17)*(IKsin(j15))))+(((0.133975732437908)*cj16*px*pz*sj16*(IKcos(j15)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x997=(((cj15*py))+(((-1.0)*px*sj15)));
IkReal x998=((-0.005)+((sj16*((((py*sj15))+((cj15*px))))))+(((-1.0)*cj16*pz)));
soleval[0]=((((-0.258820142606703)*sj17*x997))+(((-0.258820142606703)*cj17*x998))+(((-0.965925532213041)*sj17*x998))+(((0.965925532213041)*cj17*x997)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x999=cj16*cj16;
IkReal x1000=cj17*cj17;
IkReal x1001=pz*pz;
IkReal x1002=py*py;
IkReal x1003=(cj16*pz);
IkReal x1004=(cj17*sj17);
IkReal x1005=(py*sj16);
IkReal x1006=(px*x1000);
IkReal x1007=(py*x999);
IkReal x1008=(sj16*x1001);
IkReal x1009=(px*x999);
IkReal x1010=((0.866024267562092)*x1000);
IkReal x1011=(x1002*x999);
CheckValue<IkReal> x1012=IKPowWithIntegerCheck(IKsign(((((-0.866024267562092)*px*x1003*x1004))+(((0.250000983994834)*px*x1003))+(((-0.500001967989669)*x1003*x1006))+(((0.933012133781046)*x1003*x1005))+(((-0.00433012133781046)*x1004*x1009))+(((0.00125000491997417)*x1009))+(((0.500001967989669)*x1003*x1004*x1005))+(((-0.00250000983994834)*x1006*x999))+(((-1.0)*x1003*x1005*x1010)))),-1);
if(!x1012.valid){
continue;
}
CheckValue<IkReal> x1013 = IKatan2WithCheck(IkReal(((((-0.500001967989669)*x1004*x1011))+(((0.0669878662189539)*x1001))+(((-1.25000491997417e-5)*x1004*x999))+(((0.000669878662189539)*x1003))+(((-0.00500001967989669)*x1003*x1004))+(((-0.933012133781046)*x1011))+(((0.00866024267562092)*x1000*x1003))+(((-0.500001967989669)*x1001*x1004))+((x1001*x1010))+(((1.67469665547385e-6)*x999))+((x1010*x1011))+(((2.16506066890523e-5)*x1000*x999)))),IkReal(((((0.00250000983994834)*sj16*x1000*x1003))+(((0.500001967989669)*x1000*x1008))+(((0.866024267562092)*x1004*x1008))+(((-0.500001967989669)*px*x1004*x1007))+(((-0.00125000491997417)*sj16*x1003))+(((-0.250000983994834)*x1008))+(((0.00433012133781046)*sj16*x1003*x1004))+(((0.866024267562092)*x1006*x1007))+(((-0.933012133781046)*px*x1007)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1013.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1012.value)))+(x1013.value));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[6];
IkReal x1014=IKsin(j15);
IkReal x1015=IKcos(j15);
IkReal x1016=cj16*cj16;
IkReal x1017=px*px;
IkReal x1018=cj17*cj17;
IkReal x1019=pz*pz;
IkReal x1020=py*py;
IkReal x1021=(cj16*pz);
IkReal x1022=(sj16*sj17);
IkReal x1023=((1.00000393597934)*cj17);
IkReal x1024=(cj17*pz);
IkReal x1025=((1.73204853512418)*cj17);
IkReal x1026=((0.965925532213041)*sj17);
IkReal x1027=(cj16*py);
IkReal x1028=((0.258820142606703)*cj17);
IkReal x1029=((0.00129410071303351)*sj17);
IkReal x1030=x1015*x1015;
IkReal x1031=((0.500001967989669)*cj17*sj17);
IkReal x1032=((2.16506066890523e-5)*x1018);
IkReal x1033=((0.933012133781046)*x1016);
IkReal x1034=(py*x1014);
IkReal x1035=(px*x1015);
IkReal x1036=(px*x1014);
IkReal x1037=((0.866024267562092)*x1018);
IkReal x1038=((1.73204853512418)*x1018);
IkReal x1039=((0.0048296276610652)*cj16*cj17);
IkReal x1040=(sj16*x1014);
IkReal x1041=((0.258820142606703)*pz*sj17);
IkReal x1042=((1.25000491997417e-5)*cj17*sj17);
IkReal x1043=((0.965925532213041)*cj17*sj16);
IkReal x1044=(py*x1015);
IkReal x1045=((0.933012133781046)*x1019);
IkReal x1046=(x1015*x1019);
IkReal x1047=(x1016*x1019);
IkReal x1048=(x1016*x1017);
IkReal x1049=(x1016*x1020);
IkReal x1050=(x1019*x1037);
IkReal x1051=(x1019*x1031);
IkReal x1052=(x1016*x1030);
IkReal x1053=(x1019*x1030);
IkReal x1054=((1.00000393597934)*x1015*x1018);
IkReal x1055=((0.500001967989669)*x1021*x1044);
IkReal x1056=(sj17*x1021*x1025*x1044);
IkReal x1057=((1.00000393597934)*x1018*x1021*x1044);
IkReal x1058=(x1056+x1057);
evalcond[0]=(x1039+((cj16*x1026*x1036))+(((-1.0)*x1015*x1027*x1028))+(((0.965925532213041)*x1024))+(((-1.0)*x1015*x1026*x1027))+((cj16*x1028*x1036))+(((-1.0)*cj16*x1029))+(((-1.0)*x1041)));
evalcond[1]=((((-1.0)*x1015*x1041))+(((0.965925532213041)*x1015*x1024))+(((-1.0)*cj16*x1015*x1029))+(((-1.0)*x1026*x1027))+(((-0.258820142606703)*x1024*x1040))+(((-0.965925532213041)*pz*x1014*x1022))+((x1015*x1039))+(((-1.0)*x1027*x1028)));
evalcond[2]=((((0.0048296276610652)*cj17))+(((0.965925532213041)*cj17*x1021))+((x1026*x1036))+(((-1.0)*x1028*x1044))+(((-1.0)*x1029))+((x1028*x1036))+(((-1.0)*x1035*x1043))+(((-1.0)*x1026*x1044))+(((0.258820142606703)*x1022*x1035))+(((0.258820142606703)*x1022*x1034))+(((-1.0)*x1034*x1043))+(((-0.258820142606703)*sj17*x1021)));
evalcond[3]=((((-1.0)*x1055))+(((-1.0)*x1050))+((sj17*x1016*x1023*x1034*x1035))+(((-1.0)*x1031*x1048))+x1051+x1058+((x1016*x1032))+((x1037*x1048))+(((-1.0)*x1016*x1042))+(((-1.0)*x1017*x1033))+((x1017*x1030*x1033))+((x1030*x1037*x1049))+(((-1.0)*x1020*x1030*x1033))+(((0.500001967989669)*x1021*x1036))+(((1.86602426756209)*x1016*x1034*x1035))+(((-1.0)*x1030*x1037*x1048))+(((1.67469665547385e-6)*x1016))+(((-1.0)*x1016*x1034*x1035*x1038))+(((-0.0669878662189539)*x1019))+(((-1.0)*x1030*x1031*x1049))+(((-1.00000393597934)*x1018*x1021*x1036))+((x1030*x1031*x1048))+(((-1.0)*sj17*x1021*x1025*x1036)));
evalcond[4]=((((-1.0)*x1021*x1022*x1023*x1034))+(((-1.0)*x1055))+(((-1.0)*x1051))+(((-1.0)*x1020*x1033))+(((-1.0)*x1033*x1053))+(((-1.0)*x1031*x1049))+x1050+x1058+((sj16*x1021*x1034*x1038))+(((1.00000393597934)*x1018*x1040*x1046))+((x1037*x1049))+(((1.67469665547385e-6)*x1052))+(((-1.0)*x1038*x1053))+((x1030*x1037*x1047))+(((-1.0)*x1042*x1052))+((x1031*x1047))+(((-1.0)*x1037*x1047))+((x1014*x1022*x1025*x1046))+(((-0.500001967989669)*x1040*x1046))+((x1019*x1033))+((x1032*x1052))+(((-1.0)*x1030*x1031*x1047))+(((0.866024267562092)*x1053))+(((-1.86602426756209)*sj16*x1021*x1034))+((sj17*x1023*x1053))+(((-1.0)*x1045)));
IkReal x1059=IKcos(j15);
IkReal x1060=IKcos(j15);
IkReal x1061=IKcos(j15);
IkReal x1062=IKcos(j15);
IkReal x1063=IKcos(j15);
IkReal x1064=IKcos(j15);
IkReal x1065=IKcos(j15);
IkReal x1066=IKcos(j15);
IkReal x1067=IKcos(j15);
IkReal x1068=IKcos(j15);
IkReal x1069=IKcos(j15);
IkReal x1070=IKcos(j15);
IkReal x1071=IKcos(j15);
IkReal x1072=IKcos(j15);
IkReal x1073=IKcos(j15);
evalcond[5]=((1.67469665547385e-6)+(((1.00000393597934)*cj17*sj17*(px*px)*(x1059*x1059)))+(((-0.500001967989669)*cj16*py*pz*(IKcos(j15))))+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.0669878662189539)*(cj16*cj16)*(py*py)*(x1060*x1060)))+(((-1.73204853512418)*cj16*cj17*px*pz*sj17*(IKsin(j15))))+(((-0.500001967989669)*cj17*sj17*(cj16*cj16)*(py*py)))+(((0.500001967989669)*cj16*px*pz*(IKsin(j15))))+(((-0.500001967989669)*px*py*sj16))+(((0.133975732437908)*cj16*py*pz*sj16*(IKsin(j15))))+(((1.73204853512418)*cj17*px*py*sj16*sj17))+(((1.73204853512418)*px*py*(IKcos(j15))*(IKsin(j15))))+(((1.73204853512418)*cj16*py*pz*sj16*(cj17*cj17)*(IKsin(j15))))+(((1.00000393597934)*sj16*(cj17*cj17)*(px*px)*(IKcos(j15))*(IKsin(j15))))+(((-0.866024267562092)*(cj16*cj16)*(cj17*cj17)*(py*py)*(x1061*x1061)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((-0.933012133781046)*(px*px)))+(((0.500001967989669)*sj16*(py*py)*(IKcos(j15))*(IKsin(j15))))+(((-0.0669878662189539)*(py*py)))+(((-1.00000393597934)*cj17*sj17*(py*py)*(x1062*x1062)))+(((0.0669878662189539)*(cj16*cj16)*(py*py)))+(((-0.500001967989669)*sj16*(px*px)*(IKcos(j15))*(IKsin(j15))))+(((0.866024267562092)*(cj17*cj17)*(px*px)))+(((-0.866024267562092)*(cj16*cj16)*(cj17*cj17)*(pz*pz)))+(((-0.866024267562092)*(cj17*cj17)*(py*py)))+(((-0.500001967989669)*cj17*sj17*(cj16*cj16)*(px*px)*(x1063*x1063)))+(((1.73204853512418)*cj16*px*pz*sj16*(cj17*cj17)*(IKcos(j15))))+(((-1.00000393597934)*sj16*(cj17*cj17)*(py*py)*(IKcos(j15))*(IKsin(j15))))+(((0.866024267562092)*(cj16*cj16)*(cj17*cj17)*(px*px)*(x1064*x1064)))+(((-3.46409707024837)*cj17*px*py*sj16*sj17*(x1065*x1065)))+(((0.0669878662189539)*(cj16*cj16)*(px*px)*(x1066*x1066)))+(((1.73204853512418)*px*py*(cj16*cj16)*(cj17*cj17)*(IKcos(j15))*(IKsin(j15))))+(((0.500001967989669)*cj17*sj17*(py*py)))+(((-1.00000393597934)*cj17*px*py*sj17*(cj16*cj16)*(IKcos(j15))*(IKsin(j15))))+(((1.73204853512418)*(cj17*cj17)*(py*py)*(x1067*x1067)))+(((-0.866024267562092)*(py*py)*(x1068*x1068)))+(((0.500001967989669)*cj17*sj17*(cj16*cj16)*(pz*pz)))+(((1.00000393597934)*px*py*sj16*(x1069*x1069)))+(((-3.46409707024837)*px*py*(cj17*cj17)*(IKcos(j15))*(IKsin(j15))))+(((0.866024267562092)*(px*px)*(x1070*x1070)))+(((-1.00000393597934)*cj16*cj17*px*pz*sj16*sj17*(IKcos(j15))))+(((1.73204853512418)*cj16*cj17*py*pz*sj17*(IKcos(j15))))+(((1.00000393597934)*px*py*sj16*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(cj16*cj16)*(py*py)*(x1071*x1071)))+(((-2.00000787195867)*px*py*sj16*(cj17*cj17)*(x1072*x1072)))+(((-0.0669878662189539)*(cj16*cj16)*(pz*pz)))+(((0.866024267562092)*(cj16*cj16)*(cj17*cj17)*(py*py)))+(((2.00000787195867)*cj17*px*py*sj17*(IKcos(j15))*(IKsin(j15))))+(((0.133975732437908)*px*py*(cj16*cj16)*(IKcos(j15))*(IKsin(j15))))+(((-1.00000393597934)*cj16*cj17*py*pz*sj16*sj17*(IKsin(j15))))+(((-0.500001967989669)*cj17*sj17*(px*px)))+(((-1.73204853512418)*cj17*sj16*sj17*(py*py)*(IKcos(j15))*(IKsin(j15))))+(((-1.73204853512418)*(cj17*cj17)*(px*px)*(x1073*x1073)))+(((1.73204853512418)*cj17*sj16*sj17*(px*px)*(IKcos(j15))*(IKsin(j15))))+(((1.00000393597934)*cj16*py*pz*(cj17*cj17)*(IKcos(j15))))+(((-1.00000393597934)*cj16*px*pz*(cj17*cj17)*(IKsin(j15))))+(((0.133975732437908)*cj16*px*pz*sj16*(IKcos(j15)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x1074=(((cj15*py))+(((-1.0)*px*sj15)));
IkReal x1075=((-0.005)+((sj16*((((py*sj15))+((cj15*px))))))+(((-1.0)*cj16*pz)));
soleval[0]=((((-0.258820142606703)*sj17*x1074))+(((0.965925532213041)*cj17*x1074))+(((-0.258820142606703)*cj17*x1075))+(((-0.965925532213041)*sj17*x1075)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x1076=cj17*cj17;
IkReal x1077=px*px;
IkReal x1078=py*py;
IkReal x1079=cj16*cj16;
IkReal x1080=(cj16*sj16);
IkReal x1081=(py*pz);
IkReal x1082=(px*pz);
IkReal x1083=((0.866024267562092)*cj17*sj17);
IkReal x1084=(sj16*x1082);
IkReal x1085=((0.866024267562092)*x1076);
IkReal x1086=((0.500001967989669)*x1076);
IkReal x1087=((0.500001967989669)*cj17*sj17);
IkReal x1088=((0.00433012133781046)*x1076);
IkReal x1089=((0.250000983994834)*x1079);
IkReal x1090=((0.00250000983994834)*cj17*sj17);
CheckValue<IkReal> x1091=IKPowWithIntegerCheck(IKsign((((x1078*x1080*x1083))+((x1078*x1080*x1086))+((x1077*x1080*x1086))+((x1077*x1080*x1083))+(((-0.250000983994834)*x1077*x1080))+(((-0.250000983994834)*x1078*x1080)))),-1);
if(!x1091.valid){
continue;
}
CheckValue<IkReal> x1092 = IKatan2WithCheck(IkReal((((px*x1080*x1090))+(((-0.0669878662189539)*x1084))+(((0.250000983994834)*x1081))+((x1079*x1081*x1083))+((x1079*x1081*x1086))+(((-1.0)*px*x1080*x1088))+(((-1.0)*x1081*x1083))+(((-1.0)*x1081*x1086))+(((-1.0)*x1081*x1089))+(((-1.0)*x1084*x1085))+(((-0.000334939331094769)*px*x1080))+((x1084*x1087)))),IkReal(((((-1.0)*sj16*x1081*x1087))+(((0.250000983994834)*x1082))+((sj16*x1081*x1085))+(((-1.0)*py*x1080*x1090))+((x1079*x1082*x1083))+((x1079*x1082*x1086))+(((-1.0)*x1082*x1089))+(((-1.0)*x1082*x1086))+(((-1.0)*x1082*x1083))+(((0.0669878662189539)*sj16*x1081))+((py*x1080*x1088))+(((0.000334939331094769)*py*x1080)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1092.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1091.value)))+(x1092.value));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[6];
IkReal x1093=IKsin(j15);
IkReal x1094=IKcos(j15);
IkReal x1095=cj16*cj16;
IkReal x1096=px*px;
IkReal x1097=cj17*cj17;
IkReal x1098=pz*pz;
IkReal x1099=py*py;
IkReal x1100=(cj16*pz);
IkReal x1101=(sj16*sj17);
IkReal x1102=((1.00000393597934)*cj17);
IkReal x1103=(cj17*pz);
IkReal x1104=((1.73204853512418)*cj17);
IkReal x1105=((0.965925532213041)*sj17);
IkReal x1106=(cj16*py);
IkReal x1107=((0.258820142606703)*cj17);
IkReal x1108=((0.00129410071303351)*sj17);
IkReal x1109=x1094*x1094;
IkReal x1110=((0.500001967989669)*cj17*sj17);
IkReal x1111=((2.16506066890523e-5)*x1097);
IkReal x1112=((0.933012133781046)*x1095);
IkReal x1113=(py*x1093);
IkReal x1114=(px*x1094);
IkReal x1115=(px*x1093);
IkReal x1116=((0.866024267562092)*x1097);
IkReal x1117=((1.73204853512418)*x1097);
IkReal x1118=((0.0048296276610652)*cj16*cj17);
IkReal x1119=(sj16*x1093);
IkReal x1120=((0.258820142606703)*pz*sj17);
IkReal x1121=((1.25000491997417e-5)*cj17*sj17);
IkReal x1122=((0.965925532213041)*cj17*sj16);
IkReal x1123=(py*x1094);
IkReal x1124=((0.933012133781046)*x1098);
IkReal x1125=(x1094*x1098);
IkReal x1126=(x1095*x1098);
IkReal x1127=(x1095*x1096);
IkReal x1128=(x1095*x1099);
IkReal x1129=(x1098*x1116);
IkReal x1130=(x1098*x1110);
IkReal x1131=(x1095*x1109);
IkReal x1132=(x1098*x1109);
IkReal x1133=((1.00000393597934)*x1094*x1097);
IkReal x1134=((0.500001967989669)*x1100*x1123);
IkReal x1135=(sj17*x1100*x1104*x1123);
IkReal x1136=((1.00000393597934)*x1097*x1100*x1123);
IkReal x1137=(x1136+x1135);
evalcond[0]=(x1118+((cj16*x1105*x1115))+(((-1.0)*x1094*x1105*x1106))+(((-1.0)*x1120))+(((-1.0)*x1094*x1106*x1107))+((cj16*x1107*x1115))+(((-1.0)*cj16*x1108))+(((0.965925532213041)*x1103)));
evalcond[1]=(((x1094*x1118))+(((-0.258820142606703)*x1103*x1119))+(((-1.0)*cj16*x1094*x1108))+(((0.965925532213041)*x1094*x1103))+(((-0.965925532213041)*pz*x1093*x1101))+(((-1.0)*x1106*x1107))+(((-1.0)*x1094*x1120))+(((-1.0)*x1105*x1106)));
evalcond[2]=((((0.0048296276610652)*cj17))+(((0.258820142606703)*x1101*x1114))+(((0.258820142606703)*x1101*x1113))+(((-0.258820142606703)*sj17*x1100))+(((-1.0)*x1114*x1122))+(((-1.0)*x1113*x1122))+(((0.965925532213041)*cj17*x1100))+((x1105*x1115))+(((-1.0)*x1107*x1123))+(((-1.0)*x1105*x1123))+(((-1.0)*x1108))+((x1107*x1115)));
evalcond[3]=(((x1109*x1110*x1127))+x1130+x1137+((sj17*x1095*x1102*x1113*x1114))+((x1109*x1116*x1128))+(((-1.0)*x1095*x1113*x1114*x1117))+(((-1.0)*x1099*x1109*x1112))+(((1.86602426756209)*x1095*x1113*x1114))+(((1.67469665547385e-6)*x1095))+(((-1.00000393597934)*x1097*x1100*x1115))+(((-1.0)*x1134))+(((-1.0)*x1109*x1110*x1128))+(((-1.0)*x1129))+(((-1.0)*x1110*x1127))+(((-1.0)*x1109*x1116*x1127))+(((0.500001967989669)*x1100*x1115))+((x1116*x1127))+(((-1.0)*x1095*x1121))+(((-1.0)*x1096*x1112))+((x1095*x1111))+((x1096*x1109*x1112))+(((-0.0669878662189539)*x1098))+(((-1.0)*sj17*x1100*x1104*x1115)));
evalcond[4]=(x1129+x1137+(((-1.0)*x1112*x1132))+(((-0.500001967989669)*x1119*x1125))+((x1109*x1116*x1126))+(((-1.0)*x1117*x1132))+((x1093*x1101*x1104*x1125))+((x1098*x1112))+((sj16*x1100*x1113*x1117))+(((-1.0)*x1100*x1101*x1102*x1113))+((x1111*x1131))+(((-1.0)*x1116*x1126))+(((-1.0)*x1121*x1131))+(((-1.86602426756209)*sj16*x1100*x1113))+((x1110*x1126))+(((1.00000393597934)*x1097*x1119*x1125))+(((-1.0)*x1099*x1112))+(((-1.0)*x1134))+(((-1.0)*x1130))+(((-1.0)*x1109*x1110*x1126))+(((-1.0)*x1124))+(((-1.0)*x1110*x1128))+((sj17*x1102*x1132))+((x1116*x1128))+(((0.866024267562092)*x1132))+(((1.67469665547385e-6)*x1131)));
IkReal x1138=IKcos(j15);
IkReal x1139=IKcos(j15);
IkReal x1140=IKcos(j15);
IkReal x1141=IKcos(j15);
IkReal x1142=IKcos(j15);
IkReal x1143=IKcos(j15);
IkReal x1144=IKcos(j15);
IkReal x1145=IKcos(j15);
IkReal x1146=IKcos(j15);
IkReal x1147=IKcos(j15);
IkReal x1148=IKcos(j15);
IkReal x1149=IKcos(j15);
IkReal x1150=IKcos(j15);
IkReal x1151=IKcos(j15);
IkReal x1152=IKcos(j15);
evalcond[5]=((1.67469665547385e-6)+(((1.00000393597934)*cj17*sj17*(px*px)*(x1138*x1138)))+(((-0.500001967989669)*cj16*py*pz*(IKcos(j15))))+(((-1.25000491997417e-5)*cj17*sj17))+(((-0.0669878662189539)*(cj16*cj16)*(py*py)*(x1139*x1139)))+(((-1.73204853512418)*cj16*cj17*px*pz*sj17*(IKsin(j15))))+(((-0.500001967989669)*cj17*sj17*(cj16*cj16)*(py*py)))+(((0.500001967989669)*cj16*px*pz*(IKsin(j15))))+(((-0.500001967989669)*px*py*sj16))+(((0.133975732437908)*cj16*py*pz*sj16*(IKsin(j15))))+(((1.73204853512418)*cj17*px*py*sj16*sj17))+(((1.73204853512418)*px*py*(IKcos(j15))*(IKsin(j15))))+(((1.73204853512418)*cj16*py*pz*sj16*(cj17*cj17)*(IKsin(j15))))+(((1.00000393597934)*sj16*(cj17*cj17)*(px*px)*(IKcos(j15))*(IKsin(j15))))+(((-0.866024267562092)*(cj16*cj16)*(cj17*cj17)*(py*py)*(x1140*x1140)))+(((2.16506066890523e-5)*(cj17*cj17)))+(((-0.933012133781046)*(px*px)))+(((0.500001967989669)*sj16*(py*py)*(IKcos(j15))*(IKsin(j15))))+(((-0.0669878662189539)*(py*py)))+(((-1.00000393597934)*cj17*sj17*(py*py)*(x1141*x1141)))+(((0.0669878662189539)*(cj16*cj16)*(py*py)))+(((-0.500001967989669)*sj16*(px*px)*(IKcos(j15))*(IKsin(j15))))+(((0.866024267562092)*(cj17*cj17)*(px*px)))+(((-0.866024267562092)*(cj16*cj16)*(cj17*cj17)*(pz*pz)))+(((-0.866024267562092)*(cj17*cj17)*(py*py)))+(((-0.500001967989669)*cj17*sj17*(cj16*cj16)*(px*px)*(x1142*x1142)))+(((1.73204853512418)*cj16*px*pz*sj16*(cj17*cj17)*(IKcos(j15))))+(((-1.00000393597934)*sj16*(cj17*cj17)*(py*py)*(IKcos(j15))*(IKsin(j15))))+(((0.866024267562092)*(cj16*cj16)*(cj17*cj17)*(px*px)*(x1143*x1143)))+(((-3.46409707024837)*cj17*px*py*sj16*sj17*(x1144*x1144)))+(((0.0669878662189539)*(cj16*cj16)*(px*px)*(x1145*x1145)))+(((1.73204853512418)*px*py*(cj16*cj16)*(cj17*cj17)*(IKcos(j15))*(IKsin(j15))))+(((0.500001967989669)*cj17*sj17*(py*py)))+(((-1.00000393597934)*cj17*px*py*sj17*(cj16*cj16)*(IKcos(j15))*(IKsin(j15))))+(((1.73204853512418)*(cj17*cj17)*(py*py)*(x1146*x1146)))+(((-0.866024267562092)*(py*py)*(x1147*x1147)))+(((0.500001967989669)*cj17*sj17*(cj16*cj16)*(pz*pz)))+(((1.00000393597934)*px*py*sj16*(x1148*x1148)))+(((-3.46409707024837)*px*py*(cj17*cj17)*(IKcos(j15))*(IKsin(j15))))+(((0.866024267562092)*(px*px)*(x1149*x1149)))+(((-1.00000393597934)*cj16*cj17*px*pz*sj16*sj17*(IKcos(j15))))+(((1.73204853512418)*cj16*cj17*py*pz*sj17*(IKcos(j15))))+(((1.00000393597934)*px*py*sj16*(cj17*cj17)))+(((0.500001967989669)*cj17*sj17*(cj16*cj16)*(py*py)*(x1150*x1150)))+(((-2.00000787195867)*px*py*sj16*(cj17*cj17)*(x1151*x1151)))+(((-0.0669878662189539)*(cj16*cj16)*(pz*pz)))+(((0.866024267562092)*(cj16*cj16)*(cj17*cj17)*(py*py)))+(((2.00000787195867)*cj17*px*py*sj17*(IKcos(j15))*(IKsin(j15))))+(((0.133975732437908)*px*py*(cj16*cj16)*(IKcos(j15))*(IKsin(j15))))+(((-1.00000393597934)*cj16*cj17*py*pz*sj16*sj17*(IKsin(j15))))+(((-0.500001967989669)*cj17*sj17*(px*px)))+(((-1.73204853512418)*cj17*sj16*sj17*(py*py)*(IKcos(j15))*(IKsin(j15))))+(((-1.73204853512418)*(cj17*cj17)*(px*px)*(x1152*x1152)))+(((1.73204853512418)*cj17*sj16*sj17*(px*px)*(IKcos(j15))*(IKsin(j15))))+(((1.00000393597934)*cj16*py*pz*(cj17*cj17)*(IKcos(j15))))+(((-1.00000393597934)*cj16*px*pz*(cj17*cj17)*(IKsin(j15))))+(((0.133975732437908)*cj16*px*pz*sj16*(IKcos(j15)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal soleval[1];
IkReal x1153=(((cj15*py))+(((-1.0)*px*sj15)));
IkReal x1154=((-0.005)+((sj16*((((py*sj15))+((cj15*px))))))+(((-1.0)*cj16*pz)));
soleval[0]=((((-0.258820142606703)*sj17*x1153))+(((-0.965925532213041)*sj17*x1154))+(((0.965925532213041)*cj17*x1153))+(((-0.258820142606703)*cj17*x1154)));
if( soleval[0] > 0.0000000000000000  )
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j15;
vinfos[0].indices[0] = _ij15[0];
vinfos[0].indices[1] = _ij15[1];
vinfos[0].maxsolutions = _nj15;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j16;
vinfos[1].indices[0] = _ij16[0];
vinfos[1].indices[1] = _ij16[1];
vinfos[1].maxsolutions = _nj16;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j17;
vinfos[2].indices[0] = _ij17[0];
vinfos[2].indices[1] = _ij17[1];
vinfos[2].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}

static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "0538eff5c3213a03bf5e018eb78fc606"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
