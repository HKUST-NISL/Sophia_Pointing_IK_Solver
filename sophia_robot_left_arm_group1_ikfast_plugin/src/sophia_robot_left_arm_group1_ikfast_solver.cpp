/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2022-02-27 01:28:55.396202
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {

// necessary for local/global translation3d
eerot[0] = eerot[4] = eerot[8] = 0;
IkReal r00 = 0, r11 = 0, r22 = 0;
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21;
x0=IKsin(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[1]);
x3=IKsin(j[3]);
x4=IKcos(j[3]);
x5=IKsin(j[2]);
x6=IKcos(j[0]);
x7=IKcos(j[2]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=(x0*x1);
x11=(x0*x2);
x12=(x6*x7);
x13=((0.99310950337382)*x11);
x14=((0.117190077688363)*x10);
x15=((((-1.0)*x13))+x14);
x16=((((0.99310950337382)*x10))+(((0.117190077688363)*x11)));
x17=(x15*x5);
x18=(x16*x3);
x19=(((x7*(((((-1.0)*x14))+x13))))+((x5*x6)));
x20=(x12+x17);
x21=(x20*x4);
eetrans[0]=(((r00*((((x19*x9))+((x8*((x18+x21))))))))+((r22*((((x3*(((((-1.0)*x12))+(((-1.0)*x17))))))+((x16*x4))))))+((x4*(((((-0.0275396682567654)*x11))+(((-0.233380733292848)*x10))))))+((x3*(((((0.235)*x17))+(((0.235)*x12))))))+(((-0.003)*x12))+((x3*(((((0.00357519421214575)*x10))+(((0.000421884279678108)*x11))))))+(((0.0052)*x6))+(((-0.253242923360324)*x10))+(((-0.0298834698105326)*x11))+((x5*(((((-0.00035157023306509)*x10))+(((0.00297932851012146)*x11))))))+((r11*((((x19*x8))+((x9*(((((-1.0)*x21))+(((-1.0)*x18))))))))))+((x4*(((((0.0036)*x12))+(((0.0036)*x17)))))));
eetrans[1]=((0.1728)+(((((((4.12005429258139e-5)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.00034914773956029)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.117190077688363)*(((((-0.000421884279678108)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.00357519421214575)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.000421884279678108)*(IKcos(j[2]))*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((0.251497953851306)*(IKsin(j[1]))))+(((0.00350204614869418)*(IKcos(j[0]))*(IKsin(j[1]))))+(((((((-0.000418977287472348)*(IKsin(j[1]))))+(((-0.00355055934848902)*(IKcos(j[1]))))))*(IKcos(j[3]))*(IKsin(j[2]))))+(((((((0.027349906265556)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.00322737586252209)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-0.00035157023306509)*(IKcos(j[2]))*(IKsin(j[0]))))+(((((((0.00295879945707419)*(IKcos(j[1]))))+(((0.00034914773956029)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.117190077688363)*r22*(((((((((((((0.117190077688363)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.99310950337382)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(IKcos(j[2]))*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((((((-0.99310950337382)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.117190077688363)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))))))+(((0.0296775578626246)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.117190077688363)*r11*(((((((((IKsin(j[0]))*(IKsin(j[2]))))+(((((((0.117190077688363)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.99310950337382)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((((((((((0.117190077688363)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.99310950337382)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((((((-1.0)*(IKcos(j[2]))*(IKsin(j[0]))))+(((-1.0)*(((((0.99310950337382)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.117190077688363)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))))))+(((0.117190077688363)*r00*(((((((((IKsin(j[0]))*(IKsin(j[2]))))+(((((((0.117190077688363)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.99310950337382)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((((((((((-0.99310950337382)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.117190077688363)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((((((((((0.99310950337382)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.117190077688363)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((IKcos(j[2]))*(IKsin(j[0]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))))))+(((((((-4.94406515109767e-5)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.000418977287472348)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((((((-0.231772624137478)*(IKcos(j[1]))))+(((-0.027349906265556)*(IKsin(j[1]))))))*(IKsin(j[2]))*(IKsin(j[3]))))+(((0.99310950337382)*r11*(((((((((((((0.99310950337382)*(IKsin(j[1]))))+(((-0.117190077688363)*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((((((0.99310950337382)*(IKcos(j[1]))))+(((0.117190077688363)*(IKsin(j[1]))))))*(IKcos(j[3]))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((((((0.99310950337382)*(IKcos(j[1]))))+(((0.117190077688363)*(IKsin(j[1]))))))*(IKcos(j[2]))*(IKcos(j[4]))))))))+(((((((-0.00355055934848902)*(IKsin(j[1]))))+(((0.000418977287472348)*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((((((0.0275396682567654)*(IKcos(j[2]))*(IKsin(j[0]))))+(((0.117190077688363)*(((((-0.0275396682567654)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.233380733292848)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.99310950337382)*r22*(((((((((0.99310950337382)*(IKcos(j[1]))))+(((0.117190077688363)*(IKsin(j[1]))))))*(IKsin(j[2]))*(IKsin(j[3]))))+(((((((0.117190077688363)*(IKcos(j[1]))))+(((-0.99310950337382)*(IKsin(j[1]))))))*(IKcos(j[3]))))))))+(((((((0.231772624137478)*(IKsin(j[1]))))+(((-0.027349906265556)*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((0.99310950337382)*r00*(((((((((((((-0.117190077688363)*(IKsin(j[1]))))+(((-0.99310950337382)*(IKcos(j[1]))))))*(IKcos(j[3]))*(IKsin(j[2]))))+(((((((0.117190077688363)*(IKcos(j[1]))))+(((-0.99310950337382)*(IKsin(j[1]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((0.99310950337382)*(IKcos(j[1]))))+(((0.117190077688363)*(IKsin(j[1]))))))*(IKcos(j[2]))*(IKsin(j[4]))))))))+(((0.000609388403979489)*(IKsin(j[0]))))+(((-0.0296775578626246)*(IKcos(j[1])))));
eetrans[2]=((((((((-0.233380733292848)*(IKcos(j[2]))*(IKsin(j[0]))))+(((-0.99310950337382)*(((((-0.0275396682567654)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.233380733292848)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-0.00322737586252209)*(IKsin(j[1]))))+(((-0.027349906265556)*(IKcos(j[1]))))))*(IKsin(j[2]))*(IKsin(j[3]))))+(((0.117190077688363)*r00*(((((((((((((-0.117190077688363)*(IKsin(j[1]))))+(((-0.99310950337382)*(IKcos(j[1]))))))*(IKcos(j[3]))*(IKsin(j[2]))))+(((((((0.117190077688363)*(IKcos(j[1]))))+(((-0.99310950337382)*(IKsin(j[1]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((0.99310950337382)*(IKcos(j[1]))))+(((0.117190077688363)*(IKsin(j[1]))))))*(IKcos(j[2]))*(IKsin(j[4]))))))))+(((-0.0296775578626246)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.99310950337382)*r00*(((((((((IKsin(j[0]))*(IKsin(j[2]))))+(((((((0.117190077688363)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.99310950337382)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((((((((((-0.99310950337382)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.117190077688363)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((((((((((0.99310950337382)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.117190077688363)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((IKcos(j[2]))*(IKsin(j[0]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))))))+(((((((0.00034914773956029)*(IKcos(j[1]))))+(((4.12005429258139e-5)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-4.94406515109767e-5)*(IKsin(j[1]))))+(((-0.000418977287472348)*(IKcos(j[1]))))))*(IKcos(j[3]))*(IKsin(j[2]))))+(((-0.00350204614869418)*(IKcos(j[1]))))+(((((((-0.231772624137478)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.027349906265556)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-0.00516416941754386)*(IKsin(j[0]))))+(((0.117190077688363)*r22*(((((((((0.99310950337382)*(IKcos(j[1]))))+(((0.117190077688363)*(IKsin(j[1]))))))*(IKsin(j[2]))*(IKsin(j[3]))))+(((((((0.117190077688363)*(IKcos(j[1]))))+(((-0.99310950337382)*(IKsin(j[1]))))))*(IKcos(j[3]))))))))+(((((((0.027349906265556)*(IKsin(j[1]))))+(((-0.00322737586252209)*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((((((0.000418977287472348)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.00355055934848902)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((0.117190077688363)*r11*(((((((((((((0.99310950337382)*(IKsin(j[1]))))+(((-0.117190077688363)*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((((((0.99310950337382)*(IKcos(j[1]))))+(((0.117190077688363)*(IKsin(j[1]))))))*(IKcos(j[3]))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((((((0.99310950337382)*(IKcos(j[1]))))+(((0.117190077688363)*(IKsin(j[1]))))))*(IKcos(j[2]))*(IKcos(j[4]))))))))+(((0.0296775578626246)*(IKsin(j[1]))))+(((-0.99310950337382)*r11*(((((((((IKsin(j[0]))*(IKsin(j[2]))))+(((((((0.117190077688363)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.99310950337382)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((((((((((0.117190077688363)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.99310950337382)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((((((-1.0)*(IKcos(j[2]))*(IKsin(j[0]))))+(((-1.0)*(((((0.99310950337382)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.117190077688363)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))))))+(((0.00297932851012146)*(IKcos(j[2]))*(IKsin(j[0]))))+(((-0.99310950337382)*r22*(((((((((((((0.117190077688363)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.99310950337382)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(IKcos(j[2]))*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((((((-0.99310950337382)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.117190077688363)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))))))+(((((((-0.00357519421214575)*(IKcos(j[2]))*(IKsin(j[0]))))+(((-0.99310950337382)*(((((-0.000421884279678108)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.00357519421214575)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-0.00034914773956029)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.00295879945707419)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.251497953851306)*(IKcos(j[0]))*(IKcos(j[1]))))+(((((((-0.000418977287472348)*(IKsin(j[1]))))+(((4.94406515109767e-5)*(IKcos(j[1]))))))*(IKsin(j[3])))));
}

IKFAST_API int GetNumFreeParameters() { return 2; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {3, 4}; return freeparams; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x3600000a; }

class IKSolver {
public:
IkReal j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1;  _ij4[0] = -1; _ij4[1] = -1; _nj4 = 0;  _ij5[0] = -1; _ij5[1] = -1; _nj5 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j4=pfree[0]; cj4=cos(pfree[0]); sj4=sin(pfree[0]);
j5=pfree[1]; cj5=cos(pfree[1]); sj5=sin(pfree[1]);
r00 = eerot[0];
r11 = eerot[4];
r22 = eerot[8];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_px=px;
new_py=((-0.0202504454245492)+(((0.117190077688363)*py))+(((-0.99310950337382)*pz)));
new_pz=((-0.171609322182996)+(((0.117190077688363)*pz))+(((0.99310950337382)*py)));
px = new_px; py = new_py; pz = new_pz;
pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j3eval[2];
IkReal x22=sj4*sj4;
IkReal x23=r11*r11;
IkReal x24=sj5*sj5;
IkReal x25=cj4*cj4;
IkReal x26=cj5*cj5;
IkReal x27=r00*r00;
IkReal x28=(r22*sj4);
IkReal x29=((0.0104)*cj4);
IkReal x30=(cj5*r00);
IkReal x31=(r11*sj5);
IkReal x32=(cj4*sj4);
IkReal x33=((222222.222222222)*cj4);
IkReal x34=((666.666666666667)*cj4);
IkReal x35=((111111.111111111)*x24);
IkReal x36=((111111.111111111)*x26);
IkReal x37=((800.0)*x25);
j3eval[0]=((1.0)+(((188.0)*x32))+((x27*x35))+(((6136.11111111111)*x22))+(((52222.2222222222)*x30*x32))+((x23*x36))+(((-1.0)*x30*x34))+(((111111.111111111)*x22*(r22*r22)))+(((-1.0)*x28*x30*x33))+((x23*x25*x35))+(((-52222.2222222222)*r22*x22))+((x25*x27*x36))+(((-222222.222222222)*x25*x30*x31))+(((666.666666666667)*x28))+(((-2.4)*cj4))+(((-1.0)*x31*x37))+(((-156.666666666667)*sj4))+((x30*x37))+((x28*x31*x33))+(((1.44)*x25))+(((-800.0)*cj4*x28))+(((222222.222222222)*x30*x31))+((x31*x34))+(((-52222.2222222222)*x31*x32)));
j3eval[1]=((IKabs(((((0.0104)*cj5*r11))+(((0.0104)*r00*sj5)))))+(IKabs(((-3.12e-5)+(((-1.0)*x29*x31))+((x29*x30))+(((-0.0104)*x28))+(((0.002444)*sj4))+(((3.744e-5)*cj4))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x38=(r11*sj5);
IkReal x39=((0.51)*sj4);
IkReal x40=(r22*sj4);
IkReal x41=(cj5*r00);
IkReal x42=(cj4*x41);
IkReal x43=((((0.0104)*cj5*r11))+(((0.0104)*r00*sj5)));
IkReal x44=((-3.12e-5)+(((0.0104)*x42))+(((0.002444)*sj4))+(((-0.0104)*cj4*x38))+(((3.744e-5)*cj4))+(((-0.0104)*x40)));
CheckValue<IkReal> x47 = IKatan2WithCheck(IkReal(x44),IkReal(x43),IKFAST_ATAN2_MAGTHRESH);
if(!x47.valid){
continue;
}
IkReal x45=((1.0)*(x47.value));
if((((x43*x43)+(x44*x44))) < -0.00001)
continue;
CheckValue<IkReal> x48=IKPowWithIntegerCheck(IKabs(IKsqrt(((x43*x43)+(x44*x44)))),-1);
if(!x48.valid){
continue;
}
if( (((x48.value)*(((0.120299)+(((-1.0)*(px*px)))+(r22*r22)+(r11*r11)+(((0.006)*x40))+(((-0.003246)*sj4))+((x38*x39))+(((-1.0)*x39*x41))+(((0.006)*cj4*x38))+(((-0.0072)*x38))+(((0.0072)*x41))+(((-0.006)*x42))+(r00*r00)+(((-0.47)*r22))+(((-0.51)*cj4*r22))+(((-1.0)*(pz*pz)))+(((0.1198284)*cj4))+(((-1.0)*(py*py))))))) < -1-IKFAST_SINCOS_THRESH || (((x48.value)*(((0.120299)+(((-1.0)*(px*px)))+(r22*r22)+(r11*r11)+(((0.006)*x40))+(((-0.003246)*sj4))+((x38*x39))+(((-1.0)*x39*x41))+(((0.006)*cj4*x38))+(((-0.0072)*x38))+(((0.0072)*x41))+(((-0.006)*x42))+(r00*r00)+(((-0.47)*r22))+(((-0.51)*cj4*r22))+(((-1.0)*(pz*pz)))+(((0.1198284)*cj4))+(((-1.0)*(py*py))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x46=IKasin(((x48.value)*(((0.120299)+(((-1.0)*(px*px)))+(r22*r22)+(r11*r11)+(((0.006)*x40))+(((-0.003246)*sj4))+((x38*x39))+(((-1.0)*x39*x41))+(((0.006)*cj4*x38))+(((-0.0072)*x38))+(((0.0072)*x41))+(((-0.006)*x42))+(r00*r00)+(((-0.47)*r22))+(((-0.51)*cj4*r22))+(((-1.0)*(pz*pz)))+(((0.1198284)*cj4))+(((-1.0)*(py*py)))))));
j3array[0]=((((-1.0)*x46))+(((-1.0)*x45)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x45))+x46);
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal j1eval[2];
j1eval[0]=((px*px)+(py*py));
j1eval[1]=((IKabs(px))+(IKabs(py)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[4];
IkReal x49=px*px;
IkReal x50=py*py;
j1eval[0]=(((x49*x50))+(x49*x49));
j1eval[1]=0.000106674583092381;
j1eval[2]=px;
j1eval[3]=(x49+x50);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  || IKabs(j1eval[3]) < 0.0000010000000000  )
{
{
IkReal j1eval[4];
IkReal x51=px*px;
IkReal x52=py*py;
j1eval[0]=1.48541690761868e-6;
j1eval[1]=px;
j1eval[2]=(x51+x52);
j1eval[3]=((x51*x51)+((x51*x52)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  || IKabs(j1eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
px=0;
py=0;
pp=pz*pz;
j2eval[0]=pz;
j2eval[1]=IKsign(pz);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
px=0;
py=0;
pp=pz*pz;
IkReal x53=(cj5*r11);
IkReal x54=(pz*sj4);
IkReal x55=(cj4*pz);
IkReal x56=(r00*sj5);
IkReal x57=(cj5*r00);
IkReal x58=(pz*sj3);
IkReal x59=((2353.98556241903)*sj3);
IkReal x60=(r11*sj5);
IkReal x61=((7.87490646429454e+16)*sj3);
IkReal x62=((2353.98556241903)*cj3*pz);
IkReal x63=((7.87490646429454e+16)*cj3*pz);
j2eval[0]=((((-8.47434802470852)*sj3*x55))+(((-277.777777777778)*x54*x57))+(((-553.186607168473)*sj3*x54))+(((-277.777777777778)*r22*x55))+(((70.8333333333333)*pz))+((x55*x59*x60))+((r22*x54*x59))+(((65.2777777777778)*x55))+((x53*x62))+((x56*x62))+(((277.777777777778)*x54*x60))+(((-1.0)*x55*x57*x59))+(((7.0619566872571)*x58))+(((-1.0)*x54)));
j2eval[1]=IKsign(((((-1.85060301910922e+16)*sj3*x54))+(((2.18377037822077e+15)*x55))+(((236247193928836.0)*x58))+(((-9.29263990732243e+15)*r22*x55))+((r22*x54*x61))+(((-33453503666360.8)*x54))+(((-9.29263990732243e+15)*x54*x57))+((x53*x63))+((x56*x63))+(((9.29263990732243e+15)*x54*x60))+(((-283496632714604.0)*sj3*x55))+(((-1.0)*x55*x57*x61))+(((2.36962317636722e+15)*pz))+((x55*x60*x61))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
px=0;
py=0;
pp=pz*pz;
IkReal x64=(pz*r22);
IkReal x65=(sj3*sj4);
IkReal x66=(cj4*sj3);
IkReal x67=((7.87490646429454e+16)*sj4);
IkReal x68=((2824.78267490284)*sj4);
IkReal x69=(cj4*pz);
IkReal x70=(pz*sj4);
IkReal x71=(pz*sj3);
IkReal x72=(pz*r11*sj5);
IkReal x73=(cj5*pz*r00);
IkReal x74=(cj3*cj5*pz*r11);
IkReal x75=(cj3*pz*r00*sj5);
j2eval[0]=((((663.823928602168)*x69))+(((1.2)*pz*x66))+(((333.333333333333)*x66*x73))+(((-333.333333333333)*x66*x72))+((x68*x72))+(((-10.1692176296502)*x70))+(((720.319582100224)*pz))+(((-2824.78267490284)*cj4*x64))+(((-333.333333333333)*x75))+(((-333.333333333333)*x74))+(((78.3333333333333)*pz*x65))+(((-1.0)*x71))+(((-1.0)*x68*x73))+(((-333.333333333333)*x64*x65)));
j2eval[1]=IKsign(((((-9.29263990732243e+15)*x66*x72))+(((1.85060301910922e+16)*x69))+(((2.18377037822077e+15)*pz*x65))+(((33453503666360.8)*pz*x66))+(((-283496632714604.0)*x70))+(((-7.87490646429454e+16)*cj4*x64))+(((9.29263990732243e+15)*x66*x73))+(((-9.29263990732243e+15)*x64*x65))+(((2.00810114839511e+16)*pz))+((x67*x72))+(((-1.0)*x67*x73))+(((-9.29263990732243e+15)*x75))+(((-9.29263990732243e+15)*x74))+(((-27877919721967.3)*x71))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
IkReal x76=(sj3*sj4);
IkReal x77=(cj4*sj3);
IkReal x78=(r11*sj5);
IkReal x79=((1.0)*cj5*r00);
CheckValue<IkReal> x81 = IKatan2WithCheck(IkReal(((((-0.235)*x76))+(((-0.0036)*x77))+(((0.003)*sj3))+((r22*x76))+((cj3*r00*sj5))+(((-1.0)*x77*x79))+((x77*x78))+((cj3*cj5*r11)))),IkReal(((0.255)+(((-0.0036)*sj4))+(((0.235)*cj4))+(((-1.0)*sj4*x79))+(((-1.0)*cj4*r22))+((sj4*x78)))),IKFAST_ATAN2_MAGTHRESH);
if(!x81.valid){
continue;
}
IkReal x80=x81.value;
j2array[0]=((-1.0)*x80);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x80)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
IkReal x82=IKcos(j2);
IkReal x83=IKsin(j2);
IkReal x84=(cj5*r00);
IkReal x85=((1.0)*cj4);
IkReal x86=(r11*sj5);
IkReal x87=(sj3*x83);
IkReal x88=(sj4*x82);
IkReal x89=((1.0)*cj3*x83);
evalcond[0]=((((-1.0)*r00*sj5*x89))+(((-1.0)*r22*sj4*x87))+(((-1.0)*x84*x88))+((x86*x88))+(((0.255)*x82))+(((-1.0)*x85*x86*x87))+(((0.0036)*cj4*x87))+(((-1.0)*r22*x82*x85))+((cj4*x84*x87))+(((-1.0)*cj5*r11*x89))+(((-0.003)*x87))+(((0.235)*sj4*x87))+(((-0.0036)*x88))+(((0.235)*cj4*x82)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
j1array[0]=0;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x90 = IKatan2WithCheck(IkReal(((5.15721428390906e+15)+(((-1.0890051926691e+15)*(pz*pz)))+(((7.92954496713775e+16)*(r11*r11)))+(((-4.04406793324025e+16)*cj4*r22))+(((-570927237633918.0)*cj5*r00*(cj4*cj4)))+(((-4.04406793324025e+16)*cj5*r00*sj4))+(((570927237633918.0)*r11*sj5*(cj4*cj4)))+(((1.58590899342755e+17)*cj4*cj5*r00*r22*sj4))+(((1.58590899342755e+17)*cj5*r00*r11*sj5*(cj4*cj4)))+(((-134167900843971.0)*cj4*sj4))+(((-1.58590899342755e+17)*cj4*r11*r22*sj4*sj5))+(((-7.92954496713775e+16)*(cj4*cj4)*(r11*r11)))+(((-3.72688613455474e+16)*r22*(cj4*cj4)))+(((570927237633918.0)*cj4*r22*sj4))+(((7.92954496713775e+16)*(cj4*cj4)*(cj5*cj5)*(r11*r11)))+(((-570927237633918.0)*r11*sj5))+(((7.92954496713775e+16)*(cj4*cj4)*(r22*r22)))+(((3.72688613455474e+16)*cj4*r11*sj4*sj5))+(((-1.58590899342755e+17)*cj5*r00*r11*sj5))+(((-7.92954496713775e+16)*(cj5*cj5)*(r11*r11)))+(((4.37806353907408e+15)*(cj4*cj4)))+(((9.50355964311459e+15)*cj4))+(((570927237633918.0)*cj5*r00))+(((4.04406793324025e+16)*r11*sj4*sj5))+(((-145586445596649.0)*sj4))+(((7.92954496713775e+16)*(cj5*cj5)*(r00*r00)))+(((-3.72688613455474e+16)*cj4*cj5*r00*sj4))+(((-7.92954496713775e+16)*(cj4*cj4)*(cj5*cj5)*(r00*r00))))),IkReal(((((-1.58590899342755e+17)*cj4*cj5*r00*r11*sj3*sj4*sj5))+(((570927237633918.0)*cj4*cj5*r00*sj3*sj4))+(((-2.02203396662013e+16)*cj4*cj5*r00*sj3))+(((127744969420589.0)*sj3))+(((7.92954496713775e+16)*cj4*sj3*sj4*(cj5*cj5)*(r00*r00)))+(((-7.92954496713775e+16)*cj3*cj4*cj5*r11*r22))+(((-4.37806353907408e+15)*cj4*sj3*sj4))+(((-7.92954496713775e+16)*cj5*r00*r22*sj3))+(((-7.92954496713775e+16)*cj4*sj3*sj4*(cj5*cj5)*(r11*r11)))+(((-237886349014132.0)*cj4*r22*sj3))+(((-285463618816959.0)*r22*sj3))+(((-1.58590899342755e+17)*cj3*r00*r11*sj4*(cj5*cj5)))+(((-7.92954496713775e+16)*cj3*cj5*sj4*sj5*(r00*r00)))+(((3.72688613455474e+16)*cj4*r22*sj3*sj4))+(((237886349014132.0)*r11*sj3*sj4*sj5))+(((-570927237633918.0)*cj4*r11*sj3*sj4*sj5))+(((-7.92954496713775e+16)*cj3*cj4*r00*r22*sj5))+(((7.92954496713775e+16)*cj4*sj3*sj4*(r11*r11)))+(((570927237633918.0)*r22*sj3*(cj4*cj4)))+(((7.92954496713775e+16)*cj3*cj5*sj4*sj5*(r11*r11)))+(((1.86344306727737e+16)*cj3*cj4*cj5*r11))+(((-1.58590899342755e+17)*r11*r22*sj3*sj5*(cj4*cj4)))+(((-1.86344306727737e+16)*r11*sj3*sj5))+(((1.86344306727737e+16)*cj3*cj4*r00*sj5))+(((-134167900843971.0)*sj3*(cj4*cj4)))+(((-16889930780003.4)*cj4*sj3))+(((2.02203396662013e+16)*cj3*r00*sj5))+(((-4.75263621241375e+15)*sj3*sj4))+(((-3.72688613455474e+16)*cj5*r00*sj3*(cj4*cj4)))+(((-237886349014132.0)*cj5*r00*sj3*sj4))+(((-7.92954496713775e+16)*cj4*sj3*sj4*(r22*r22)))+(((7.92954496713775e+16)*r11*r22*sj3*sj5))+(((1.58590899342755e+17)*cj5*r00*r22*sj3*(cj4*cj4)))+(((1.86344306727737e+16)*cj5*r00*sj3))+(((2.02203396662013e+16)*r22*sj3*sj4))+(((3.72688613455474e+16)*r11*sj3*sj5*(cj4*cj4)))+(((2.02203396662013e+16)*cj3*cj5*r11))+(((-9.22860900339272e+15)*(pz*pz)))+(((-285463618816959.0)*cj3*cj5*r11*sj4))+(((2.02203396662013e+16)*cj4*r11*sj3*sj5))+(((7.92954496713775e+16)*cj3*r00*r11*sj4))+(((-285463618816959.0)*cj3*r00*sj4*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x90.valid){
continue;
}
CheckValue<IkReal> x91=IKPowWithIntegerCheck(IKsign(((((-9.29263990732243e+15)*pz*r22*sj3*sj4))+(((1.85060301910922e+16)*cj4*pz))+(((33453503666360.8)*cj4*pz*sj3))+(((-9.29263990732243e+15)*cj3*cj5*pz*r11))+(((-9.29263990732243e+15)*cj3*pz*r00*sj5))+(((2.00810114839511e+16)*pz))+(((-9.29263990732243e+15)*cj4*pz*r11*sj3*sj5))+(((-27877919721967.3)*pz*sj3))+(((2.18377037822077e+15)*pz*sj3*sj4))+(((-283496632714604.0)*pz*sj4))+(((-7.87490646429454e+16)*cj5*pz*r00*sj4))+(((9.29263990732243e+15)*cj4*cj5*pz*r00*sj3))+(((7.87490646429454e+16)*pz*r11*sj4*sj5))+(((-7.87490646429454e+16)*cj4*pz*r22)))),-1);
if(!x91.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x90.value)+(((1.5707963267949)*(x91.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x92=IKsin(j2);
IkReal x93=IKcos(j2);
IkReal x94=((0.006)*cj4);
IkReal x95=(cj5*r00);
IkReal x96=((0.235)*sj3);
IkReal x97=(r11*sj5);
IkReal x98=(r00*sj5);
IkReal x99=(cj5*r11);
IkReal x100=(cj4*sj3);
IkReal x101=(r22*sj4);
IkReal x102=((1.0)*sj3);
IkReal x103=(cj4*r22);
IkReal x104=((0.003)*sj3);
IkReal x105=((1.0)*cj3);
IkReal x106=((0.99310950337382)*pz);
IkReal x107=((0.235)*cj4);
IkReal x108=((0.0036)*sj4);
IkReal x109=(sj4*x92);
IkReal x110=((1.0)*x92);
IkReal x111=(cj3*x93);
IkReal x112=((1.0)*x93);
IkReal x113=(pz*x92);
IkReal x114=(pz*x93);
IkReal x115=(sj4*x93);
IkReal x116=(x105*x92);
evalcond[0]=((0.255)+(((0.117190077688363)*x114))+(((-1.0)*sj4*x95))+(((-1.0)*x108))+x107+((sj4*x97))+(((-1.0)*x106*x92))+(((-1.0)*x103)));
evalcond[1]=(((x100*x95))+(((-1.0)*x101*x102))+(((0.117190077688363)*x113))+(((-1.0)*x104))+(((-1.0)*x100*x97))+(((-1.0)*x105*x98))+(((-1.0)*x105*x99))+((x106*x93))+((sj4*x96))+(((0.0036)*x100)));
evalcond[2]=((-0.00980508)+(((0.006)*x101))+(((-0.0072)*x97))+(((-1.0)*x94*x95))+(r22*r22)+(r11*r11)+(((-0.00141)*sj4))+(((-2.16e-5)*cj4))+(((0.506485846720648)*x113))+(r00*r00)+(((-0.47)*r22))+(((-1.0)*(pz*pz)))+(((-0.0597669396210653)*x114))+(((0.0072)*x95))+((x94*x97)));
evalcond[3]=((((-1.0)*x115*x96))+((x107*x92))+(((-1.0)*x106))+(((0.255)*x92))+((sj3*x101*x93))+(((-1.0)*x109*x95))+((x100*x93*x97))+(((-1.0)*x100*x112*x95))+((x111*x99))+((x111*x98))+((x109*x97))+(((-1.0)*x108*x92))+(((-1.0)*x103*x110))+((x104*x93))+(((-0.0036)*x100*x93)));
evalcond[4]=((((0.117190077688363)*pz))+(((-1.0)*sj4*x112*x95))+((x107*x93))+(((0.255)*x93))+((x100*x92*x95))+(((-1.0)*x101*x102*x92))+(((0.0036)*x100*x92))+(((-1.0)*x116*x99))+(((-1.0)*x116*x98))+((x109*x96))+((x115*x97))+(((-1.0)*x108*x93))+(((-1.0)*x103*x112))+(((-1.0)*x100*x110*x97))+(((-1.0)*x104*x92)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
j1array[0]=0;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x117 = IKatan2WithCheck(IkReal(((((-1.58590899342755e+17)*cj4*cj5*r00*r11*sj3*sj4*sj5))+(((570927237633918.0)*cj4*cj5*r00*sj3*sj4))+(((-2.02203396662013e+16)*cj4*cj5*r00*sj3))+(((9.22860900339272e+15)*(pz*pz)))+(((127744969420589.0)*sj3))+(((7.92954496713775e+16)*cj4*sj3*sj4*(cj5*cj5)*(r00*r00)))+(((-7.92954496713775e+16)*cj3*cj4*cj5*r11*r22))+(((-4.37806353907408e+15)*cj4*sj3*sj4))+(((-7.92954496713775e+16)*cj5*r00*r22*sj3))+(((-7.92954496713775e+16)*cj4*sj3*sj4*(cj5*cj5)*(r11*r11)))+(((-237886349014132.0)*cj4*r22*sj3))+(((-285463618816959.0)*r22*sj3))+(((-1.58590899342755e+17)*cj3*r00*r11*sj4*(cj5*cj5)))+(((-7.92954496713775e+16)*cj3*cj5*sj4*sj5*(r00*r00)))+(((3.72688613455474e+16)*cj4*r22*sj3*sj4))+(((237886349014132.0)*r11*sj3*sj4*sj5))+(((-570927237633918.0)*cj4*r11*sj3*sj4*sj5))+(((-7.92954496713775e+16)*cj3*cj4*r00*r22*sj5))+(((7.92954496713775e+16)*cj4*sj3*sj4*(r11*r11)))+(((570927237633918.0)*r22*sj3*(cj4*cj4)))+(((7.92954496713775e+16)*cj3*cj5*sj4*sj5*(r11*r11)))+(((1.86344306727737e+16)*cj3*cj4*cj5*r11))+(((-1.58590899342755e+17)*r11*r22*sj3*sj5*(cj4*cj4)))+(((-1.86344306727737e+16)*r11*sj3*sj5))+(((1.86344306727737e+16)*cj3*cj4*r00*sj5))+(((-134167900843971.0)*sj3*(cj4*cj4)))+(((-16889930780003.4)*cj4*sj3))+(((2.02203396662013e+16)*cj3*r00*sj5))+(((-4.75263621241375e+15)*sj3*sj4))+(((-3.72688613455474e+16)*cj5*r00*sj3*(cj4*cj4)))+(((-237886349014132.0)*cj5*r00*sj3*sj4))+(((-7.92954496713775e+16)*cj4*sj3*sj4*(r22*r22)))+(((7.92954496713775e+16)*r11*r22*sj3*sj5))+(((1.58590899342755e+17)*cj5*r00*r22*sj3*(cj4*cj4)))+(((1.86344306727737e+16)*cj5*r00*sj3))+(((2.02203396662013e+16)*r22*sj3*sj4))+(((3.72688613455474e+16)*r11*sj3*sj5*(cj4*cj4)))+(((2.02203396662013e+16)*cj3*cj5*r11))+(((-285463618816959.0)*cj3*cj5*r11*sj4))+(((2.02203396662013e+16)*cj4*r11*sj3*sj5))+(((7.92954496713775e+16)*cj3*r00*r11*sj4))+(((-285463618816959.0)*cj3*r00*sj4*sj5)))),IkReal(((-5.15721428390906e+15)+(((7.92954496713775e+16)*(cj5*cj5)*(r11*r11)))+(((-570927237633918.0)*cj5*r00))+(((4.04406793324025e+16)*cj4*r22))+(((-3.72688613455474e+16)*cj4*r11*sj4*sj5))+(((-7.92954496713775e+16)*(cj4*cj4)*(cj5*cj5)*(r11*r11)))+(((3.72688613455474e+16)*r22*(cj4*cj4)))+(((-7.92954496713775e+16)*(cj4*cj4)*(r22*r22)))+(((-4.37806353907408e+15)*(cj4*cj4)))+(((-570927237633918.0)*cj4*r22*sj4))+(((3.72688613455474e+16)*cj4*cj5*r00*sj4))+(((7.92954496713775e+16)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((1.58590899342755e+17)*cj4*r11*r22*sj4*sj5))+(((-7.92954496713775e+16)*(r11*r11)))+(((-1.58590899342755e+17)*cj4*cj5*r00*r22*sj4))+(((1.58590899342755e+17)*cj5*r00*r11*sj5))+(((145586445596649.0)*sj4))+(((570927237633918.0)*r11*sj5))+(((7.92954496713775e+16)*(cj4*cj4)*(r11*r11)))+(((-9.50355964311459e+15)*cj4))+(((-7.92954496713775e+16)*(cj5*cj5)*(r00*r00)))+(((134167900843971.0)*cj4*sj4))+(((-1.58590899342755e+17)*cj5*r00*r11*sj5*(cj4*cj4)))+(((-4.04406793324025e+16)*r11*sj4*sj5))+(((-570927237633918.0)*r11*sj5*(cj4*cj4)))+(((4.04406793324025e+16)*cj5*r00*sj4))+(((570927237633918.0)*cj5*r00*(cj4*cj4)))+(((7.82064444787084e+16)*(pz*pz))))),IKFAST_ATAN2_MAGTHRESH);
if(!x117.valid){
continue;
}
CheckValue<IkReal> x118=IKPowWithIntegerCheck(IKsign(((((-7.87490646429454e+16)*cj4*cj5*pz*r00*sj3))+(((7.87490646429454e+16)*cj3*pz*r00*sj5))+(((7.87490646429454e+16)*pz*r22*sj3*sj4))+(((7.87490646429454e+16)*cj4*pz*r11*sj3*sj5))+(((-283496632714604.0)*cj4*pz*sj3))+(((236247193928836.0)*pz*sj3))+(((2.18377037822077e+15)*cj4*pz))+(((7.87490646429454e+16)*cj3*cj5*pz*r11))+(((-9.29263990732243e+15)*cj5*pz*r00*sj4))+(((-9.29263990732243e+15)*cj4*pz*r22))+(((9.29263990732243e+15)*pz*r11*sj4*sj5))+(((2.36962317636722e+15)*pz))+(((-1.85060301910922e+16)*pz*sj3*sj4))+(((-33453503666360.8)*pz*sj4)))),-1);
if(!x118.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x117.value)+(((1.5707963267949)*(x118.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x119=IKsin(j2);
IkReal x120=IKcos(j2);
IkReal x121=((0.006)*cj4);
IkReal x122=(cj5*r00);
IkReal x123=((0.235)*sj3);
IkReal x124=(r11*sj5);
IkReal x125=(r00*sj5);
IkReal x126=(cj5*r11);
IkReal x127=(cj4*sj3);
IkReal x128=(r22*sj4);
IkReal x129=((1.0)*sj3);
IkReal x130=(cj4*r22);
IkReal x131=((0.003)*sj3);
IkReal x132=((1.0)*cj3);
IkReal x133=((0.99310950337382)*pz);
IkReal x134=((0.235)*cj4);
IkReal x135=((0.0036)*sj4);
IkReal x136=(sj4*x119);
IkReal x137=((1.0)*x119);
IkReal x138=(cj3*x120);
IkReal x139=((1.0)*x120);
IkReal x140=(pz*x119);
IkReal x141=(pz*x120);
IkReal x142=(sj4*x120);
IkReal x143=(x119*x132);
evalcond[0]=((0.255)+x134+(((-1.0)*sj4*x122))+(((0.117190077688363)*x141))+(((-1.0)*x135))+(((-1.0)*x130))+((sj4*x124))+(((-1.0)*x119*x133)));
evalcond[1]=((((-1.0)*x124*x127))+(((-1.0)*x128*x129))+(((-1.0)*x126*x132))+((x122*x127))+(((0.117190077688363)*x140))+(((-1.0)*x131))+(((-1.0)*x125*x132))+((x120*x133))+(((0.0036)*x127))+((sj4*x123)));
evalcond[2]=((-0.00980508)+(((-0.0597669396210653)*x141))+(((0.0072)*x122))+(((-0.0072)*x124))+((x121*x124))+(r22*r22)+(((0.506485846720648)*x140))+(r11*r11)+(((-0.00141)*sj4))+(((-2.16e-5)*cj4))+(r00*r00)+(((-0.47)*r22))+(((-1.0)*x121*x122))+(((-1.0)*(pz*pz)))+(((0.006)*x128)));
evalcond[3]=((((-1.0)*x122*x136))+(((-1.0)*x123*x142))+(((-0.0036)*x120*x127))+(((-1.0)*x122*x127*x139))+(((-1.0)*x133))+((x124*x136))+((x120*x124*x127))+((x125*x138))+((x120*x131))+((x126*x138))+(((0.255)*x119))+((sj3*x120*x128))+(((-1.0)*x130*x137))+((x119*x134))+(((-1.0)*x119*x135)));
evalcond[4]=(((x119*x122*x127))+((x124*x142))+(((0.117190077688363)*pz))+(((-1.0)*x120*x135))+(((-1.0)*sj4*x122*x139))+(((-1.0)*x125*x143))+(((-1.0)*x126*x143))+((x123*x136))+((x120*x134))+(((-1.0)*x124*x127*x137))+(((-1.0)*x119*x128*x129))+(((0.255)*x120))+(((0.0036)*x119*x127))+(((-1.0)*x130*x139))+(((-1.0)*x119*x131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
j1array[0]=0;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x144=((21629991710.9083)*sj5);
IkReal x145=(r11*sj4);
IkReal x146=((183300077529.798)*cj5);
IkReal x147=(cj4*sj3);
IkReal x148=(cj3*r00);
IkReal x149=(cj3*r11);
IkReal x150=((183300077529.798)*sj5);
IkReal x151=(sj3*sj4);
IkReal x152=(r00*sj4);
IkReal x153=((21629991710.9083)*cj5);
IkReal x154=(cj4*r22);
CheckValue<IkReal> x155=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x155.valid){
continue;
}
CheckValue<IkReal> x156 = IKatan2WithCheck(IkReal(((46741519770.0984)+((x149*x153))+(((64889975.1327249)*sj3))+((x144*x148))+(((-183300077529.798)*x154))+((r11*x144*x147))+((x145*x150))+(((21629991710.9083)*r22*x151))+(((-659880279.107271)*sj4))+(((-1.0)*r00*x147*x153))+(((43075518219.5024)*cj4))+(((-5083048052.06345)*x151))+(((-1.0)*x146*x152))+(((-77867970.1592699)*x147)))),IkReal(((-5515647886.28162)+(((-659880279.107271)*x147))+(((21629991710.9083)*x154))+((x152*x153))+(((-1.0)*x144*x145))+(((183300077529.798)*r22*x151))+((r11*x147*x150))+(((-43075518219.5024)*x151))+(((-1.0)*r00*x146*x147))+((x146*x149))+(((77867970.1592699)*sj4))+((x148*x150))+(((549900232.589393)*sj3))+(((-5083048052.06345)*cj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x156.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x155.value)))+(x156.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x157=IKsin(j2);
IkReal x158=IKcos(j2);
IkReal x159=((0.006)*cj4);
IkReal x160=(cj5*r00);
IkReal x161=((0.235)*sj3);
IkReal x162=(r11*sj5);
IkReal x163=(r00*sj5);
IkReal x164=(cj5*r11);
IkReal x165=(cj4*sj3);
IkReal x166=(r22*sj4);
IkReal x167=((1.0)*sj3);
IkReal x168=(cj4*r22);
IkReal x169=((0.003)*sj3);
IkReal x170=((1.0)*cj3);
IkReal x171=((0.99310950337382)*pz);
IkReal x172=((0.235)*cj4);
IkReal x173=((0.0036)*sj4);
IkReal x174=(sj4*x157);
IkReal x175=((1.0)*x157);
IkReal x176=(cj3*x158);
IkReal x177=((1.0)*x158);
IkReal x178=(pz*x157);
IkReal x179=(pz*x158);
IkReal x180=(sj4*x158);
IkReal x181=(x157*x170);
evalcond[0]=((0.255)+(((-1.0)*x173))+(((0.117190077688363)*x179))+x172+(((-1.0)*x168))+((sj4*x162))+(((-1.0)*sj4*x160))+(((-1.0)*x157*x171)));
evalcond[1]=((((-1.0)*x166*x167))+(((-1.0)*x169))+(((-1.0)*x163*x170))+(((0.117190077688363)*x178))+((sj4*x161))+(((-1.0)*x162*x165))+((x158*x171))+(((-1.0)*x164*x170))+((x160*x165))+(((0.0036)*x165)));
evalcond[2]=((-0.00980508)+(((0.506485846720648)*x178))+(((-0.0597669396210653)*x179))+(((-1.0)*x159*x160))+(r22*r22)+(((0.006)*x166))+(r11*r11)+(((-0.00141)*sj4))+(((0.0072)*x160))+(((-2.16e-5)*cj4))+(r00*r00)+(((-0.47)*r22))+(((-1.0)*(pz*pz)))+(((-0.0072)*x162))+((x159*x162)));
evalcond[3]=(((x157*x172))+(((0.255)*x157))+((x162*x174))+(((-1.0)*x161*x180))+(((-1.0)*x171))+((sj3*x158*x166))+((x164*x176))+((x158*x162*x165))+(((-1.0)*x160*x174))+(((-1.0)*x168*x175))+(((-0.0036)*x158*x165))+(((-1.0)*x160*x165*x177))+((x158*x169))+((x163*x176))+(((-1.0)*x157*x173)));
evalcond[4]=((((-1.0)*x157*x169))+(((-1.0)*sj4*x160*x177))+(((0.255)*x158))+(((0.117190077688363)*pz))+((x161*x174))+(((-1.0)*x163*x181))+(((-1.0)*x158*x173))+((x162*x180))+(((-1.0)*x157*x166*x167))+((x157*x160*x165))+(((0.0036)*x157*x165))+(((-1.0)*x162*x165*x175))+(((-1.0)*x168*x177))+(((-1.0)*x164*x181))+((x158*x172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
j1array[0]=0;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
px=0;
py=0;
pp=pz*pz;
j2eval[0]=pz;
j2eval[1]=IKsign(pz);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
px=0;
py=0;
pp=pz*pz;
IkReal x182=(cj5*r11);
IkReal x183=(pz*sj4);
IkReal x184=(cj4*pz);
IkReal x185=(r00*sj5);
IkReal x186=(cj5*r00);
IkReal x187=(pz*sj3);
IkReal x188=((2353.98556241903)*sj3);
IkReal x189=(r11*sj5);
IkReal x190=((7.87490646429454e+16)*sj3);
IkReal x191=((2353.98556241903)*cj3*pz);
IkReal x192=((7.87490646429454e+16)*cj3*pz);
j2eval[0]=((((-1.0)*x184*x186*x188))+(((-8.47434802470852)*sj3*x184))+(((-277.777777777778)*r22*x184))+(((-277.777777777778)*x183*x186))+((x184*x188*x189))+(((-553.186607168473)*sj3*x183))+(((-1.0)*x183))+(((70.8333333333333)*pz))+(((277.777777777778)*x183*x189))+((x185*x191))+(((7.0619566872571)*x187))+((r22*x183*x188))+(((65.2777777777778)*x184))+((x182*x191)));
j2eval[1]=IKsign(((((2.18377037822077e+15)*x184))+(((-1.0)*x184*x186*x190))+((x184*x189*x190))+(((-33453503666360.8)*x183))+(((-1.85060301910922e+16)*sj3*x183))+((r22*x183*x190))+((x185*x192))+(((-9.29263990732243e+15)*r22*x184))+(((-283496632714604.0)*sj3*x184))+(((9.29263990732243e+15)*x183*x189))+(((-9.29263990732243e+15)*x183*x186))+(((236247193928836.0)*x187))+((x182*x192))+(((2.36962317636722e+15)*pz))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
px=0;
py=0;
pp=pz*pz;
IkReal x193=(pz*r22);
IkReal x194=(sj3*sj4);
IkReal x195=(cj4*sj3);
IkReal x196=((7.87490646429454e+16)*sj4);
IkReal x197=((2824.78267490284)*sj4);
IkReal x198=(cj4*pz);
IkReal x199=(pz*sj4);
IkReal x200=(pz*sj3);
IkReal x201=(pz*r11*sj5);
IkReal x202=(cj5*pz*r00);
IkReal x203=(cj3*cj5*pz*r11);
IkReal x204=(cj3*pz*r00*sj5);
j2eval[0]=((((-333.333333333333)*x195*x201))+(((-1.0)*x197*x202))+(((1.2)*pz*x195))+(((333.333333333333)*x195*x202))+(((-333.333333333333)*x203))+(((-333.333333333333)*x204))+((x197*x201))+(((720.319582100224)*pz))+(((663.823928602168)*x198))+(((78.3333333333333)*pz*x194))+(((-10.1692176296502)*x199))+(((-1.0)*x200))+(((-2824.78267490284)*cj4*x193))+(((-333.333333333333)*x193*x194)));
j2eval[1]=IKsign(((((-9.29263990732243e+15)*x204))+(((-9.29263990732243e+15)*x203))+(((-7.87490646429454e+16)*cj4*x193))+(((-27877919721967.3)*x200))+(((2.18377037822077e+15)*pz*x194))+(((33453503666360.8)*pz*x195))+((x196*x201))+(((2.00810114839511e+16)*pz))+(((-9.29263990732243e+15)*x195*x201))+(((-9.29263990732243e+15)*x193*x194))+(((-1.0)*x196*x202))+(((9.29263990732243e+15)*x195*x202))+(((-283496632714604.0)*x199))+(((1.85060301910922e+16)*x198))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
IkReal x205=(sj3*sj4);
IkReal x206=(cj4*sj3);
IkReal x207=(r11*sj5);
IkReal x208=((1.0)*cj5*r00);
CheckValue<IkReal> x210 = IKatan2WithCheck(IkReal((((r22*x205))+(((-0.235)*x205))+(((0.003)*sj3))+(((-1.0)*x206*x208))+((cj3*r00*sj5))+(((-0.0036)*x206))+((cj3*cj5*r11))+((x206*x207)))),IkReal(((0.255)+(((-0.0036)*sj4))+(((0.235)*cj4))+((sj4*x207))+(((-1.0)*cj4*r22))+(((-1.0)*sj4*x208)))),IKFAST_ATAN2_MAGTHRESH);
if(!x210.valid){
continue;
}
IkReal x209=x210.value;
j2array[0]=((-1.0)*x209);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x209)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
IkReal x211=IKcos(j2);
IkReal x212=IKsin(j2);
IkReal x213=(cj5*r00);
IkReal x214=((1.0)*cj4);
IkReal x215=(r11*sj5);
IkReal x216=(sj3*x212);
IkReal x217=(sj4*x211);
IkReal x218=((1.0)*cj3*x212);
evalcond[0]=((((0.235)*sj4*x216))+(((-1.0)*x213*x217))+(((0.235)*cj4*x211))+(((-1.0)*r00*sj5*x218))+(((-1.0)*r22*x211*x214))+(((-0.003)*x216))+((x215*x217))+(((-1.0)*cj5*r11*x218))+(((-0.0036)*x217))+(((0.255)*x211))+(((-1.0)*x214*x215*x216))+(((0.0036)*cj4*x216))+(((-1.0)*r22*sj4*x216))+((cj4*x213*x216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
j1array[0]=0;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x219 = IKatan2WithCheck(IkReal(((5.15721428390906e+15)+(((-1.0890051926691e+15)*(pz*pz)))+(((7.92954496713775e+16)*(r11*r11)))+(((-4.04406793324025e+16)*cj4*r22))+(((-570927237633918.0)*cj5*r00*(cj4*cj4)))+(((-4.04406793324025e+16)*cj5*r00*sj4))+(((570927237633918.0)*r11*sj5*(cj4*cj4)))+(((1.58590899342755e+17)*cj4*cj5*r00*r22*sj4))+(((1.58590899342755e+17)*cj5*r00*r11*sj5*(cj4*cj4)))+(((-134167900843971.0)*cj4*sj4))+(((-1.58590899342755e+17)*cj4*r11*r22*sj4*sj5))+(((-7.92954496713775e+16)*(cj4*cj4)*(r11*r11)))+(((-3.72688613455474e+16)*r22*(cj4*cj4)))+(((570927237633918.0)*cj4*r22*sj4))+(((7.92954496713775e+16)*(cj4*cj4)*(cj5*cj5)*(r11*r11)))+(((-570927237633918.0)*r11*sj5))+(((7.92954496713775e+16)*(cj4*cj4)*(r22*r22)))+(((3.72688613455474e+16)*cj4*r11*sj4*sj5))+(((-1.58590899342755e+17)*cj5*r00*r11*sj5))+(((-7.92954496713775e+16)*(cj5*cj5)*(r11*r11)))+(((4.37806353907408e+15)*(cj4*cj4)))+(((9.50355964311459e+15)*cj4))+(((570927237633918.0)*cj5*r00))+(((4.04406793324025e+16)*r11*sj4*sj5))+(((-145586445596649.0)*sj4))+(((7.92954496713775e+16)*(cj5*cj5)*(r00*r00)))+(((-3.72688613455474e+16)*cj4*cj5*r00*sj4))+(((-7.92954496713775e+16)*(cj4*cj4)*(cj5*cj5)*(r00*r00))))),IkReal(((((-1.58590899342755e+17)*cj4*cj5*r00*r11*sj3*sj4*sj5))+(((570927237633918.0)*cj4*cj5*r00*sj3*sj4))+(((-2.02203396662013e+16)*cj4*cj5*r00*sj3))+(((127744969420589.0)*sj3))+(((7.92954496713775e+16)*cj4*sj3*sj4*(cj5*cj5)*(r00*r00)))+(((-7.92954496713775e+16)*cj3*cj4*cj5*r11*r22))+(((-4.37806353907408e+15)*cj4*sj3*sj4))+(((-7.92954496713775e+16)*cj5*r00*r22*sj3))+(((-7.92954496713775e+16)*cj4*sj3*sj4*(cj5*cj5)*(r11*r11)))+(((-237886349014132.0)*cj4*r22*sj3))+(((-285463618816959.0)*r22*sj3))+(((-1.58590899342755e+17)*cj3*r00*r11*sj4*(cj5*cj5)))+(((-7.92954496713775e+16)*cj3*cj5*sj4*sj5*(r00*r00)))+(((3.72688613455474e+16)*cj4*r22*sj3*sj4))+(((237886349014132.0)*r11*sj3*sj4*sj5))+(((-570927237633918.0)*cj4*r11*sj3*sj4*sj5))+(((-7.92954496713775e+16)*cj3*cj4*r00*r22*sj5))+(((7.92954496713775e+16)*cj4*sj3*sj4*(r11*r11)))+(((570927237633918.0)*r22*sj3*(cj4*cj4)))+(((7.92954496713775e+16)*cj3*cj5*sj4*sj5*(r11*r11)))+(((1.86344306727737e+16)*cj3*cj4*cj5*r11))+(((-1.58590899342755e+17)*r11*r22*sj3*sj5*(cj4*cj4)))+(((-1.86344306727737e+16)*r11*sj3*sj5))+(((1.86344306727737e+16)*cj3*cj4*r00*sj5))+(((-134167900843971.0)*sj3*(cj4*cj4)))+(((-16889930780003.4)*cj4*sj3))+(((2.02203396662013e+16)*cj3*r00*sj5))+(((-4.75263621241375e+15)*sj3*sj4))+(((-3.72688613455474e+16)*cj5*r00*sj3*(cj4*cj4)))+(((-237886349014132.0)*cj5*r00*sj3*sj4))+(((-7.92954496713775e+16)*cj4*sj3*sj4*(r22*r22)))+(((7.92954496713775e+16)*r11*r22*sj3*sj5))+(((1.58590899342755e+17)*cj5*r00*r22*sj3*(cj4*cj4)))+(((1.86344306727737e+16)*cj5*r00*sj3))+(((2.02203396662013e+16)*r22*sj3*sj4))+(((3.72688613455474e+16)*r11*sj3*sj5*(cj4*cj4)))+(((2.02203396662013e+16)*cj3*cj5*r11))+(((-9.22860900339272e+15)*(pz*pz)))+(((-285463618816959.0)*cj3*cj5*r11*sj4))+(((2.02203396662013e+16)*cj4*r11*sj3*sj5))+(((7.92954496713775e+16)*cj3*r00*r11*sj4))+(((-285463618816959.0)*cj3*r00*sj4*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x219.valid){
continue;
}
CheckValue<IkReal> x220=IKPowWithIntegerCheck(IKsign(((((-9.29263990732243e+15)*pz*r22*sj3*sj4))+(((1.85060301910922e+16)*cj4*pz))+(((33453503666360.8)*cj4*pz*sj3))+(((-9.29263990732243e+15)*cj3*cj5*pz*r11))+(((-9.29263990732243e+15)*cj3*pz*r00*sj5))+(((2.00810114839511e+16)*pz))+(((-9.29263990732243e+15)*cj4*pz*r11*sj3*sj5))+(((-27877919721967.3)*pz*sj3))+(((2.18377037822077e+15)*pz*sj3*sj4))+(((-283496632714604.0)*pz*sj4))+(((-7.87490646429454e+16)*cj5*pz*r00*sj4))+(((9.29263990732243e+15)*cj4*cj5*pz*r00*sj3))+(((7.87490646429454e+16)*pz*r11*sj4*sj5))+(((-7.87490646429454e+16)*cj4*pz*r22)))),-1);
if(!x220.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x219.value)+(((1.5707963267949)*(x220.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x221=IKsin(j2);
IkReal x222=IKcos(j2);
IkReal x223=((0.006)*cj4);
IkReal x224=(cj5*r00);
IkReal x225=((0.235)*sj3);
IkReal x226=(r11*sj5);
IkReal x227=(r00*sj5);
IkReal x228=(cj5*r11);
IkReal x229=(cj4*sj3);
IkReal x230=(r22*sj4);
IkReal x231=((1.0)*sj3);
IkReal x232=(cj4*r22);
IkReal x233=((0.003)*sj3);
IkReal x234=((1.0)*cj3);
IkReal x235=((0.99310950337382)*pz);
IkReal x236=((0.235)*cj4);
IkReal x237=((0.0036)*sj4);
IkReal x238=(sj4*x221);
IkReal x239=((1.0)*x221);
IkReal x240=(cj3*x222);
IkReal x241=((1.0)*x222);
IkReal x242=(pz*x221);
IkReal x243=(pz*x222);
IkReal x244=(sj4*x222);
IkReal x245=(x221*x234);
evalcond[0]=((0.255)+((sj4*x226))+(((-1.0)*x221*x235))+(((-1.0)*sj4*x224))+(((-1.0)*x237))+x236+(((0.117190077688363)*x243))+(((-1.0)*x232)));
evalcond[1]=(((x224*x229))+((sj4*x225))+(((-1.0)*x230*x231))+(((-1.0)*x227*x234))+(((-1.0)*x226*x229))+(((-1.0)*x233))+((x222*x235))+(((0.0036)*x229))+(((0.117190077688363)*x242))+(((-1.0)*x228*x234)));
evalcond[2]=((-0.00980508)+(((-0.0597669396210653)*x243))+(((0.0072)*x224))+(r22*r22)+(r11*r11)+(((-0.00141)*sj4))+(((-2.16e-5)*cj4))+((x223*x226))+(r00*r00)+(((-1.0)*x223*x224))+(((-0.47)*r22))+(((0.506485846720648)*x242))+(((-1.0)*(pz*pz)))+(((-0.0072)*x226))+(((0.006)*x230)));
evalcond[3]=((((-0.0036)*x222*x229))+((sj3*x222*x230))+(((0.255)*x221))+(((-1.0)*x225*x244))+((x228*x240))+((x227*x240))+((x226*x238))+(((-1.0)*x221*x237))+(((-1.0)*x235))+((x222*x233))+(((-1.0)*x224*x229*x241))+((x221*x236))+(((-1.0)*x224*x238))+((x222*x226*x229))+(((-1.0)*x232*x239)));
evalcond[4]=(((x226*x244))+(((0.117190077688363)*pz))+(((-1.0)*x228*x245))+(((-1.0)*sj4*x224*x241))+(((0.255)*x222))+(((-1.0)*x226*x229*x239))+(((-1.0)*x221*x233))+(((-1.0)*x232*x241))+((x222*x236))+((x225*x238))+(((-1.0)*x221*x230*x231))+(((0.0036)*x221*x229))+(((-1.0)*x227*x245))+((x221*x224*x229))+(((-1.0)*x222*x237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
j1array[0]=0;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x246 = IKatan2WithCheck(IkReal(((((-1.58590899342755e+17)*cj4*cj5*r00*r11*sj3*sj4*sj5))+(((570927237633918.0)*cj4*cj5*r00*sj3*sj4))+(((-2.02203396662013e+16)*cj4*cj5*r00*sj3))+(((9.22860900339272e+15)*(pz*pz)))+(((127744969420589.0)*sj3))+(((7.92954496713775e+16)*cj4*sj3*sj4*(cj5*cj5)*(r00*r00)))+(((-7.92954496713775e+16)*cj3*cj4*cj5*r11*r22))+(((-4.37806353907408e+15)*cj4*sj3*sj4))+(((-7.92954496713775e+16)*cj5*r00*r22*sj3))+(((-7.92954496713775e+16)*cj4*sj3*sj4*(cj5*cj5)*(r11*r11)))+(((-237886349014132.0)*cj4*r22*sj3))+(((-285463618816959.0)*r22*sj3))+(((-1.58590899342755e+17)*cj3*r00*r11*sj4*(cj5*cj5)))+(((-7.92954496713775e+16)*cj3*cj5*sj4*sj5*(r00*r00)))+(((3.72688613455474e+16)*cj4*r22*sj3*sj4))+(((237886349014132.0)*r11*sj3*sj4*sj5))+(((-570927237633918.0)*cj4*r11*sj3*sj4*sj5))+(((-7.92954496713775e+16)*cj3*cj4*r00*r22*sj5))+(((7.92954496713775e+16)*cj4*sj3*sj4*(r11*r11)))+(((570927237633918.0)*r22*sj3*(cj4*cj4)))+(((7.92954496713775e+16)*cj3*cj5*sj4*sj5*(r11*r11)))+(((1.86344306727737e+16)*cj3*cj4*cj5*r11))+(((-1.58590899342755e+17)*r11*r22*sj3*sj5*(cj4*cj4)))+(((-1.86344306727737e+16)*r11*sj3*sj5))+(((1.86344306727737e+16)*cj3*cj4*r00*sj5))+(((-134167900843971.0)*sj3*(cj4*cj4)))+(((-16889930780003.4)*cj4*sj3))+(((2.02203396662013e+16)*cj3*r00*sj5))+(((-4.75263621241375e+15)*sj3*sj4))+(((-3.72688613455474e+16)*cj5*r00*sj3*(cj4*cj4)))+(((-237886349014132.0)*cj5*r00*sj3*sj4))+(((-7.92954496713775e+16)*cj4*sj3*sj4*(r22*r22)))+(((7.92954496713775e+16)*r11*r22*sj3*sj5))+(((1.58590899342755e+17)*cj5*r00*r22*sj3*(cj4*cj4)))+(((1.86344306727737e+16)*cj5*r00*sj3))+(((2.02203396662013e+16)*r22*sj3*sj4))+(((3.72688613455474e+16)*r11*sj3*sj5*(cj4*cj4)))+(((2.02203396662013e+16)*cj3*cj5*r11))+(((-285463618816959.0)*cj3*cj5*r11*sj4))+(((2.02203396662013e+16)*cj4*r11*sj3*sj5))+(((7.92954496713775e+16)*cj3*r00*r11*sj4))+(((-285463618816959.0)*cj3*r00*sj4*sj5)))),IkReal(((-5.15721428390906e+15)+(((7.92954496713775e+16)*(cj5*cj5)*(r11*r11)))+(((-570927237633918.0)*cj5*r00))+(((4.04406793324025e+16)*cj4*r22))+(((-3.72688613455474e+16)*cj4*r11*sj4*sj5))+(((-7.92954496713775e+16)*(cj4*cj4)*(cj5*cj5)*(r11*r11)))+(((3.72688613455474e+16)*r22*(cj4*cj4)))+(((-7.92954496713775e+16)*(cj4*cj4)*(r22*r22)))+(((-4.37806353907408e+15)*(cj4*cj4)))+(((-570927237633918.0)*cj4*r22*sj4))+(((3.72688613455474e+16)*cj4*cj5*r00*sj4))+(((7.92954496713775e+16)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((1.58590899342755e+17)*cj4*r11*r22*sj4*sj5))+(((-7.92954496713775e+16)*(r11*r11)))+(((-1.58590899342755e+17)*cj4*cj5*r00*r22*sj4))+(((1.58590899342755e+17)*cj5*r00*r11*sj5))+(((145586445596649.0)*sj4))+(((570927237633918.0)*r11*sj5))+(((7.92954496713775e+16)*(cj4*cj4)*(r11*r11)))+(((-9.50355964311459e+15)*cj4))+(((-7.92954496713775e+16)*(cj5*cj5)*(r00*r00)))+(((134167900843971.0)*cj4*sj4))+(((-1.58590899342755e+17)*cj5*r00*r11*sj5*(cj4*cj4)))+(((-4.04406793324025e+16)*r11*sj4*sj5))+(((-570927237633918.0)*r11*sj5*(cj4*cj4)))+(((4.04406793324025e+16)*cj5*r00*sj4))+(((570927237633918.0)*cj5*r00*(cj4*cj4)))+(((7.82064444787084e+16)*(pz*pz))))),IKFAST_ATAN2_MAGTHRESH);
if(!x246.valid){
continue;
}
CheckValue<IkReal> x247=IKPowWithIntegerCheck(IKsign(((((-7.87490646429454e+16)*cj4*cj5*pz*r00*sj3))+(((7.87490646429454e+16)*cj3*pz*r00*sj5))+(((7.87490646429454e+16)*pz*r22*sj3*sj4))+(((7.87490646429454e+16)*cj4*pz*r11*sj3*sj5))+(((-283496632714604.0)*cj4*pz*sj3))+(((236247193928836.0)*pz*sj3))+(((2.18377037822077e+15)*cj4*pz))+(((7.87490646429454e+16)*cj3*cj5*pz*r11))+(((-9.29263990732243e+15)*cj5*pz*r00*sj4))+(((-9.29263990732243e+15)*cj4*pz*r22))+(((9.29263990732243e+15)*pz*r11*sj4*sj5))+(((2.36962317636722e+15)*pz))+(((-1.85060301910922e+16)*pz*sj3*sj4))+(((-33453503666360.8)*pz*sj4)))),-1);
if(!x247.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x246.value)+(((1.5707963267949)*(x247.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x248=IKsin(j2);
IkReal x249=IKcos(j2);
IkReal x250=((0.006)*cj4);
IkReal x251=(cj5*r00);
IkReal x252=((0.235)*sj3);
IkReal x253=(r11*sj5);
IkReal x254=(r00*sj5);
IkReal x255=(cj5*r11);
IkReal x256=(cj4*sj3);
IkReal x257=(r22*sj4);
IkReal x258=((1.0)*sj3);
IkReal x259=(cj4*r22);
IkReal x260=((0.003)*sj3);
IkReal x261=((1.0)*cj3);
IkReal x262=((0.99310950337382)*pz);
IkReal x263=((0.235)*cj4);
IkReal x264=((0.0036)*sj4);
IkReal x265=(sj4*x248);
IkReal x266=((1.0)*x248);
IkReal x267=(cj3*x249);
IkReal x268=((1.0)*x249);
IkReal x269=(pz*x248);
IkReal x270=(pz*x249);
IkReal x271=(sj4*x249);
IkReal x272=(x248*x261);
evalcond[0]=((0.255)+((sj4*x253))+(((-1.0)*sj4*x251))+x263+(((0.117190077688363)*x270))+(((-1.0)*x264))+(((-1.0)*x259))+(((-1.0)*x248*x262)));
evalcond[1]=(((sj4*x252))+(((-1.0)*x255*x261))+(((-1.0)*x253*x256))+((x251*x256))+(((-1.0)*x257*x258))+(((0.0036)*x256))+(((0.117190077688363)*x269))+((x249*x262))+(((-1.0)*x260))+(((-1.0)*x254*x261)));
evalcond[2]=((-0.00980508)+(((-0.0597669396210653)*x270))+(((0.0072)*x251))+(((-1.0)*x250*x251))+(r22*r22)+(r11*r11)+(((-0.00141)*sj4))+(((0.006)*x257))+(((-2.16e-5)*cj4))+((x250*x253))+(r00*r00)+(((-0.47)*r22))+(((0.506485846720648)*x269))+(((-1.0)*(pz*pz)))+(((-0.0072)*x253)));
evalcond[3]=((((0.255)*x248))+((sj3*x249*x257))+((x253*x265))+((x248*x263))+((x249*x253*x256))+(((-1.0)*x259*x266))+(((-0.0036)*x249*x256))+((x254*x267))+((x255*x267))+(((-1.0)*x251*x265))+(((-1.0)*x252*x271))+((x249*x260))+(((-1.0)*x262))+(((-1.0)*x251*x256*x268))+(((-1.0)*x248*x264)));
evalcond[4]=((((0.255)*x249))+(((-1.0)*x255*x272))+(((0.117190077688363)*pz))+((x248*x251*x256))+((x253*x271))+(((-1.0)*x253*x256*x266))+(((-1.0)*x249*x264))+(((-1.0)*x259*x268))+(((-1.0)*sj4*x251*x268))+((x252*x265))+(((0.0036)*x248*x256))+((x249*x263))+(((-1.0)*x254*x272))+(((-1.0)*x248*x257*x258))+(((-1.0)*x248*x260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
j1array[0]=0;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x273=((21629991710.9083)*sj5);
IkReal x274=(r11*sj4);
IkReal x275=((183300077529.798)*cj5);
IkReal x276=(cj4*sj3);
IkReal x277=(cj3*r00);
IkReal x278=(cj3*r11);
IkReal x279=((183300077529.798)*sj5);
IkReal x280=(sj3*sj4);
IkReal x281=(r00*sj4);
IkReal x282=((21629991710.9083)*cj5);
IkReal x283=(cj4*r22);
CheckValue<IkReal> x284 = IKatan2WithCheck(IkReal(((46741519770.0984)+((x273*x277))+((r11*x273*x276))+(((64889975.1327249)*sj3))+((x278*x282))+(((-77867970.1592699)*x276))+(((-1.0)*r00*x276*x282))+((x274*x279))+(((21629991710.9083)*r22*x280))+(((-659880279.107271)*sj4))+(((43075518219.5024)*cj4))+(((-5083048052.06345)*x280))+(((-1.0)*x275*x281))+(((-183300077529.798)*x283)))),IkReal(((-5515647886.28162)+(((-1.0)*x273*x274))+(((21629991710.9083)*x283))+((x275*x278))+(((183300077529.798)*r22*x280))+(((-43075518219.5024)*x280))+((r11*x276*x279))+(((-1.0)*r00*x275*x276))+((x277*x279))+(((77867970.1592699)*sj4))+(((-659880279.107271)*x276))+((x281*x282))+(((549900232.589393)*sj3))+(((-5083048052.06345)*cj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x284.valid){
continue;
}
CheckValue<IkReal> x285=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x285.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x284.value)+(((1.5707963267949)*(x285.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x286=IKsin(j2);
IkReal x287=IKcos(j2);
IkReal x288=((0.006)*cj4);
IkReal x289=(cj5*r00);
IkReal x290=((0.235)*sj3);
IkReal x291=(r11*sj5);
IkReal x292=(r00*sj5);
IkReal x293=(cj5*r11);
IkReal x294=(cj4*sj3);
IkReal x295=(r22*sj4);
IkReal x296=((1.0)*sj3);
IkReal x297=(cj4*r22);
IkReal x298=((0.003)*sj3);
IkReal x299=((1.0)*cj3);
IkReal x300=((0.99310950337382)*pz);
IkReal x301=((0.235)*cj4);
IkReal x302=((0.0036)*sj4);
IkReal x303=(sj4*x286);
IkReal x304=((1.0)*x286);
IkReal x305=(cj3*x287);
IkReal x306=((1.0)*x287);
IkReal x307=(pz*x286);
IkReal x308=(pz*x287);
IkReal x309=(sj4*x287);
IkReal x310=(x286*x299);
evalcond[0]=((0.255)+(((-1.0)*x297))+(((-1.0)*x286*x300))+((sj4*x291))+x301+(((-1.0)*sj4*x289))+(((-1.0)*x302))+(((0.117190077688363)*x308)));
evalcond[1]=(((x289*x294))+((x287*x300))+(((-1.0)*x298))+(((-1.0)*x293*x299))+((sj4*x290))+(((0.0036)*x294))+(((-1.0)*x295*x296))+(((-1.0)*x291*x294))+(((-1.0)*x292*x299))+(((0.117190077688363)*x307)));
evalcond[2]=((-0.00980508)+(((-1.0)*x288*x289))+(((0.506485846720648)*x307))+(r22*r22)+(((-0.0597669396210653)*x308))+(r11*r11)+(((-0.00141)*sj4))+(((-2.16e-5)*cj4))+(r00*r00)+(((0.0072)*x289))+(((-0.47)*r22))+(((-1.0)*(pz*pz)))+(((0.006)*x295))+((x288*x291))+(((-0.0072)*x291)));
evalcond[3]=((((-1.0)*x289*x303))+((x291*x303))+(((-1.0)*x286*x302))+((x286*x301))+(((-1.0)*x297*x304))+((x292*x305))+((x287*x298))+((x293*x305))+(((0.255)*x286))+(((-0.0036)*x287*x294))+(((-1.0)*x289*x294*x306))+(((-1.0)*x300))+((x287*x291*x294))+(((-1.0)*x290*x309))+((sj3*x287*x295)));
evalcond[4]=((((0.117190077688363)*pz))+((x290*x303))+((x291*x309))+(((0.0036)*x286*x294))+(((-1.0)*x286*x298))+((x287*x301))+(((-1.0)*x292*x310))+(((-1.0)*x287*x302))+(((-1.0)*x297*x306))+(((-1.0)*x291*x294*x304))+((x286*x289*x294))+(((0.255)*x287))+(((-1.0)*x293*x310))+(((-1.0)*sj4*x289*x306))+(((-1.0)*x286*x295*x296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
j1array[0]=0;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x311=py*py;
IkReal x312=px*px;
IkReal x313=(px*sj4);
IkReal x314=(cj5*r00);
IkReal x315=(cj4*px);
IkReal x316=(r11*sj5);
IkReal x317=((0.117190077688363)*px);
IkReal x318=((0.000843768559356216)*px);
CheckValue<IkReal> x321 = IKatan2WithCheck(IkReal(((-0.00121877680795898)*x312)),IkReal(((-0.00121877680795898)*px*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x321.valid){
continue;
}
IkReal x319=((1.0)*(x321.value));
if((((((1.48541690761868e-6)*(x312*x312)))+(((1.48541690761868e-6)*x311*x312)))) < -0.00001)
continue;
CheckValue<IkReal> x322=IKPowWithIntegerCheck(IKabs(IKsqrt(((((1.48541690761868e-6)*(x312*x312)))+(((1.48541690761868e-6)*x311*x312))))),-1);
if(!x322.valid){
continue;
}
if( (((x322.value)*(((((0.0597669396210653)*x313*x314))+((x317*(pz*pz)))+(((-1.0)*x317*(r22*r22)))+(((-1.0)*x317*(r00*r00)))+((x317*(px*px)))+(((-0.0140426995052723)*x315))+(((0.0597669396210653)*r22*x315))+(((0.0550793365135308)*px*r22))+((x311*x317))+(((0.00070314046613018)*x314*x315))+(((-1.0)*x314*x318))+(((-0.00070314046613018)*x315*x316))+(((-1.0)*x317*(r11*r11)))+(((-0.0597669396210653)*x313*x316))+(((-0.00070314046613018)*r22*x313))+((x316*x318))+(((0.000380398992176427)*x313))+(((-0.014091511516431)*px)))))) < -1-IKFAST_SINCOS_THRESH || (((x322.value)*(((((0.0597669396210653)*x313*x314))+((x317*(pz*pz)))+(((-1.0)*x317*(r22*r22)))+(((-1.0)*x317*(r00*r00)))+((x317*(px*px)))+(((-0.0140426995052723)*x315))+(((0.0597669396210653)*r22*x315))+(((0.0550793365135308)*px*r22))+((x311*x317))+(((0.00070314046613018)*x314*x315))+(((-1.0)*x314*x318))+(((-0.00070314046613018)*x315*x316))+(((-1.0)*x317*(r11*r11)))+(((-0.0597669396210653)*x313*x316))+(((-0.00070314046613018)*r22*x313))+((x316*x318))+(((0.000380398992176427)*x313))+(((-0.014091511516431)*px)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x320=IKasin(((x322.value)*(((((0.0597669396210653)*x313*x314))+((x317*(pz*pz)))+(((-1.0)*x317*(r22*r22)))+(((-1.0)*x317*(r00*r00)))+((x317*(px*px)))+(((-0.0140426995052723)*x315))+(((0.0597669396210653)*r22*x315))+(((0.0550793365135308)*px*r22))+((x311*x317))+(((0.00070314046613018)*x314*x315))+(((-1.0)*x314*x318))+(((-0.00070314046613018)*x315*x316))+(((-1.0)*x317*(r11*r11)))+(((-0.0597669396210653)*x313*x316))+(((-0.00070314046613018)*r22*x313))+((x316*x318))+(((0.000380398992176427)*x313))+(((-0.014091511516431)*px))))));
j1array[0]=((((-1.0)*x320))+(((-1.0)*x319)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+x320+(((-1.0)*x319)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x323=IKsin(j1);
IkReal x324=IKcos(j1);
IkReal x325=r00*r00;
IkReal x326=r22*r22;
IkReal x327=py*py;
IkReal x328=r11*r11;
IkReal x329=px*px;
IkReal x330=pz*pz;
IkReal x331=py*py*py;
IkReal x332=((0.117190077688363)*py);
IkReal x333=((0.99310950337382)*px);
IkReal x334=(cj3*sj4);
IkReal x335=(py*sj4);
IkReal x336=((0.0103283388350877)*py);
IkReal x337=(cj4*py);
IkReal x338=(cj5*r00);
IkReal x339=((0.0071503884242915)*py);
IkReal x340=((0.466761466585695)*r22);
IkReal x341=(r11*sj5);
IkReal x342=((0.99310950337382)*py);
IkReal x343=((0.0071503884242915)*px);
IkReal x344=(px*sj4);
IkReal x345=(cj3*cj4);
IkReal x346=((0.00595865702024292)*r22);
IkReal x347=(cj4*px);
IkReal x348=((0.506485846720648)*r22);
IkReal x349=((0.000843768559356216)*py);
IkReal x350=(px*x324);
IkReal x351=(x323*x327);
evalcond[0]=((0.0052)+(((0.235)*x334))+(((0.0036)*x345))+(((-1.0)*py*x323))+((cj5*r11*sj3))+(((-1.0)*x341*x345))+(((-1.0)*x350))+((r00*sj3*sj5))+(((-1.0)*r22*x334))+((x338*x345))+(((-0.003)*cj3)));
evalcond[1]=(((x330*x333))+(((-1.0)*x328*x333))+(((-0.0103283388350877)*x324*x329))+(((-0.506485846720648)*x341*x344))+(((-1.0)*px*x323*x336))+(((-1.0)*x344*x346))+(((0.00595865702024292)*x338*x347))+((x327*x333))+((x347*x348))+((x341*x343))+(((0.506485846720648)*x338*x344))+((x333*(px*px)))+(((-0.00595865702024292)*x341*x347))+(((-0.119416372784425)*px))+(((-1.0)*x338*x343))+(((-1.0)*x325*x333))+(((-1.0)*x326*x333))+(((0.00322363344795142)*x344))+(((-0.119002722814079)*x347))+((px*x340)));
evalcond[2]=(((x335*x346))+(((-1.0)*x330*x342))+(((-0.99310950337382)*x331))+((x325*x342))+((x326*x342))+(((0.00595865702024292)*x337*x341))+(((-1.0)*x337*x348))+(((0.506485846720648)*x335*x341))+((x338*x339))+(((-0.00322363344795142)*x335))+((x336*x350))+(((0.119002722814079)*x337))+(((0.119416372784425)*py))+(((-1.0)*x329*x342))+((x328*x342))+(((-1.0)*py*x340))+(((-1.0)*x339*x341))+(((-0.00595865702024292)*x337*x338))+(((-0.506485846720648)*x335*x338))+(((0.0103283388350877)*x351)));
evalcond[3]=((((0.014091511516431)*py))+(((0.0140426995052723)*x337))+(((0.00070314046613018)*r22*x335))+(((0.00121877680795898)*py*x350))+(((-0.0597669396210653)*x335*x338))+(((-1.0)*x329*x332))+(((0.0597669396210653)*x335*x341))+(((0.00070314046613018)*x337*x341))+(((-0.0550793365135308)*py*r22))+(((-1.0)*x330*x332))+((x328*x332))+(((-1.0)*x341*x349))+((x338*x349))+(((-0.117190077688363)*x331))+((x325*x332))+((x326*x332))+(((-0.000380398992176427)*x335))+(((0.00121877680795898)*x351))+(((-0.0597669396210653)*r22*x337))+(((-0.00070314046613018)*x337*x338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
IkReal x352=cj1*cj1;
IkReal x353=px*px;
IkReal x354=((((-1.0)*x352*x353))+x353+(pz*pz)+((x352*(py*py)))+(((-2.0)*cj1*px*py*sj1)));
j2eval[0]=x354;
j2eval[1]=IKsign(x354);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x355=((333.333333333333)*sj4);
IkReal x356=(pz*sj3);
IkReal x357=(cj3*sj5);
IkReal x358=(px*sj1);
IkReal x359=((0.117190077688363)*pz);
IkReal x360=(cj1*py);
IkReal x361=((2824.78267490284)*r11);
IkReal x362=(cj3*cj5);
IkReal x363=((0.117190077688363)*r22);
IkReal x364=(sj3*sj4);
IkReal x365=((2824.78267490284)*r22);
IkReal x366=((0.000421884279678108)*sj4);
IkReal x367=((0.0275396682567654)*cj4);
IkReal x368=((0.99310950337382)*r11);
IkReal x369=((0.99310950337382)*r22);
IkReal x370=(cj4*pz);
IkReal x371=((333.333333333333)*r00);
IkReal x372=(cj4*cj5);
IkReal x373=(cj4*sj3);
IkReal x374=(pz*sj4);
IkReal x375=((0.117190077688363)*sj4);
IkReal x376=((8.47434802470852)*sj3);
IkReal x377=((0.99310950337382)*r00);
IkReal x378=((78.3333333333333)*cj4);
IkReal x379=((333.333333333333)*r11);
IkReal x380=(r11*sj5);
IkReal x381=((0.00297932851012146)*sj3);
IkReal x382=((1.2)*sj4);
IkReal x383=(cj5*r00);
IkReal x384=((2824.78267490284)*sj3);
IkReal x385=(r00*x360);
IkReal x386=(sj5*x373);
IkReal x387=((333.333333333333)*cj4*r22);
j2eval[0]=(((x355*x360*x380))+(((-1.0)*cj4*sj5*x356*x379))+(((-2824.78267490284)*x374*x383))+(((-1.0)*r22*x355*x356))+((x360*x364*x365))+((sj5*x361*x374))+((r00*x358*x372*x384))+(((-10.1692176296502)*x360*x373))+(((-1.0)*x372*x384*x385))+(((78.3333333333333)*sj4*x356))+(((85.0)*x360))+(((-1.0)*x358*x361*x386))+(((-1.0)*pz*x357*x371))+((x360*x361*x362))+(((663.823928602168)*x358*x364))+(((10.1692176296502)*x358*x373))+(((-1.0)*x358*x376))+(((-1.0)*x358*x378))+((x356*x371*x372))+(((-1.0)*x356))+(((720.319582100224)*pz))+(((663.823928602168)*x370))+(((-1.0)*x360*x387))+(((-1.0)*x360*x382))+(((-663.823928602168)*x360*x364))+(((-2824.78267490284)*r00*x357*x358))+(((-1.0)*x358*x364*x365))+(((1.2)*cj4*x356))+((x355*x358*x383))+(((2824.78267490284)*x357*x385))+(((-10.1692176296502)*x374))+((x358*x387))+((x358*x382))+(((-1.0)*x358*x361*x362))+(((-1.0)*x355*x360*x383))+((x360*x361*x386))+(((-1.0)*x355*x358*x380))+((x360*x376))+((x360*x378))+(((-1.0)*pz*x362*x379))+(((-85.0)*x358))+(((-1.0)*x365*x370)));
j2eval[1]=IKsign(((((-1.0)*x358*x381))+(((-1.0)*sj4*x356*x363))+((x360*x368*x386))+(((-1.0)*r00*x357*x359))+(((-1.0)*x357*x358*x377))+((cj4*x358*x363))+((x358*x366))+(((0.00357519421214575)*x358*x373))+((x360*x364*x369))+((x358*x375*x383))+(((-1.0)*x358*x375*x380))+(((-0.0298834698105326)*x358))+(((-1.0)*x360*x366))+(((0.0275396682567654)*sj4*x356))+(((0.253242923360324)*pz))+((x360*x362*x368))+(((0.000421884279678108)*cj4*x356))+(((-1.0)*x358*x367))+((x357*x360*x377))+(((0.233380733292848)*x370))+(((-1.0)*cj5*x374*x377))+((x360*x381))+(((-1.0)*cj4*x360*x363))+(((0.0298834698105326)*x360))+(((-0.117190077688363)*cj4*x356*x380))+(((-1.0)*x360*x375*x383))+(((0.117190077688363)*r00*x356*x372))+(((-1.0)*x358*x362*x368))+(((-1.0)*x358*x364*x369))+(((-1.0)*x358*x368*x386))+((sj3*x358*x372*x377))+((x360*x375*x380))+(((-0.00035157023306509)*x356))+(((-1.0)*x369*x370))+(((0.233380733292848)*x358*x364))+(((-0.233380733292848)*x360*x364))+(((-0.00357519421214575)*x360*x373))+((x360*x367))+(((-1.0)*r11*x359*x362))+((sj5*x368*x374))+(((-1.0)*sj3*x360*x372*x377))+(((-0.00357519421214575)*x374))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x388=(cj4*sj3);
IkReal x389=(cj5*r00);
IkReal x390=(cj1*py);
IkReal x391=(r11*sj5);
IkReal x392=((0.99310950337382)*pz);
IkReal x393=((2824.78267490284)*r22);
IkReal x394=(pz*sj3);
IkReal x395=(px*sj1);
IkReal x396=(cj4*r22);
IkReal x397=((663.823928602168)*cj4);
IkReal x398=((2824.78267490284)*sj4);
IkReal x399=(sj3*sj4);
IkReal x400=((0.117190077688363)*r22);
IkReal x401=((0.00035157023306509)*sj3);
IkReal x402=((0.117190077688363)*pz);
IkReal x403=(cj4*pz);
IkReal x404=((0.233380733292848)*cj4);
IkReal x405=(pz*sj4);
IkReal x406=((2824.78267490284)*pz);
IkReal x407=((333.333333333333)*r22);
IkReal x408=((0.99310950337382)*sj4);
IkReal x409=((0.00357519421214575)*sj4);
IkReal x410=((10.1692176296502)*sj4);
IkReal x411=(cj3*cj5*r11);
IkReal x412=(cj3*r00*sj5);
j2eval[0]=((((-1.2)*x405))+(((-78.3333333333333)*x390*x399))+(((-333.333333333333)*x389*x405))+((x388*x391*x406))+(((-1.0)*x389*x395*x398))+(((-1.0)*cj4*x393*x395))+(((333.333333333333)*x391*x405))+((x390*x399*x407))+((x390*x410))+((x395*x397))+((sj4*x393*x394))+(((-1.0)*sj3*x395))+(((-1.0)*x395*x410))+(((-1.0)*x388*x389*x406))+(((-1.0)*x390*x391*x398))+(((-10.1692176296502)*pz*x388))+(((8.47434802470852)*x394))+(((-663.823928602168)*sj4*x394))+(((-333.333333333333)*x388*x391*x395))+(((78.3333333333333)*x403))+(((1.2)*x388*x395))+(((333.333333333333)*x390*x412))+(((333.333333333333)*x390*x411))+(((85.0)*pz))+((x406*x412))+((x406*x411))+(((720.319582100224)*x395))+((sj3*x390))+(((-1.0)*x395*x399*x407))+(((333.333333333333)*x388*x389*x395))+((cj4*x390*x393))+((x391*x395*x398))+(((-333.333333333333)*pz*x396))+((x389*x390*x398))+(((-1.0)*x390*x397))+(((78.3333333333333)*x395*x399))+(((333.333333333333)*x388*x390*x391))+(((-1.2)*x388*x390))+(((-333.333333333333)*x395*x411))+(((-333.333333333333)*x395*x412))+(((-333.333333333333)*x388*x389*x390))+(((-720.319582100224)*x390)));
j2eval[1]=IKsign(((((0.000421884279678108)*x388*x395))+(((-0.000421884279678108)*x388*x390))+(((-1.0)*x390*x391*x408))+(((0.99310950337382)*x390*x396))+((r22*x392*x399))+(((-0.0275396682567654)*x390*x399))+(((-0.00357519421214575)*pz*x388))+((x390*x409))+((x390*x401))+((x392*x412))+((x392*x411))+((x390*x399*x400))+((x391*x395*x408))+(((0.117190077688363)*x390*x411))+(((0.117190077688363)*x390*x412))+((x389*x390*x408))+((x388*x391*x392))+(((-1.0)*x395*x401))+(((-1.0)*x395*x409))+(((0.117190077688363)*x388*x390*x391))+(((0.0275396682567654)*x395*x399))+(((-1.0)*x388*x389*x392))+(((-1.0)*x389*x395*x408))+(((-0.99310950337382)*x395*x396))+(((-1.0)*x395*x399*x400))+(((-0.000421884279678108)*x405))+(((0.0298834698105326)*pz))+(((0.253242923360324)*x395))+((x395*x404))+(((0.117190077688363)*x388*x389*x395))+(((0.00297932851012146)*x394))+(((-1.0)*x396*x402))+(((0.0275396682567654)*x403))+(((-1.0)*sj4*x389*x402))+(((-0.117190077688363)*x395*x412))+(((-0.117190077688363)*x395*x411))+(((-0.117190077688363)*x388*x389*x390))+(((-0.117190077688363)*x388*x391*x395))+(((-1.0)*x390*x404))+((sj4*x391*x402))+(((-0.233380733292848)*sj4*x394))+(((-0.253242923360324)*x390))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x413 = IKatan2WithCheck(IkReal(((((2.0)*cj5*r00*r22*sj3*(cj4*cj4)))+(((-0.47)*cj5*r00*sj3*(cj4*cj4)))+(((0.255)*cj3*r00*sj5))+(((0.23276515970686)*cj1*px*py*sj1))+(((-0.000213)*cj4*sj3))+(((0.255)*cj4*r11*sj3*sj5))+(((0.47)*r11*sj3*sj5*(cj4*cj4)))+((cj3*cj5*sj4*sj5*(r11*r11)))+(((-1.0)*cj3*cj5*sj4*sj5*(r00*r00)))+(((0.11638257985343)*(cj1*cj1)*(px*px)))+(((-2.0)*r11*r22*sj3*sj5*(cj4*cj4)))+(((-0.0036)*cj3*cj5*r11*sj4))+((cj3*r00*r11*sj4))+(((0.235)*cj3*cj4*cj5*r11))+(((0.255)*cj3*cj5*r11))+(((-0.05521204)*cj4*sj3*sj4))+(((0.001611)*sj3))+(((0.235)*cj3*cj4*r00*sj5))+(((0.255)*r22*sj3*sj4))+(((-0.972532971382791)*cj1*py*pz))+(((-0.003)*cj5*r00*sj3*sj4))+(((-0.0036)*cj3*r00*sj4*sj5))+(((-1.0)*cj3*cj4*cj5*r11*r22))+(((-1.0)*cj4*sj3*sj4*(r22*r22)))+(((0.972532971382791)*px*pz*sj1))+((cj4*sj3*sj4*(cj5*cj5)*(r00*r00)))+(((-0.255)*cj4*cj5*r00*sj3))+(((-1.0)*cj4*sj3*sj4*(cj5*cj5)*(r11*r11)))+(((-0.11638257985343)*(px*px)))+(((0.003)*r11*sj3*sj4*sj5))+(((-0.0599358)*sj3*sj4))+(((0.0072)*r22*sj3*(cj4*cj4)))+(((-0.001692)*sj3*(cj4*cj4)))+(((-1.0)*cj5*r00*r22*sj3))+(((-0.11638257985343)*(cj1*cj1)*(py*py)))+(((-0.0072)*cj4*r11*sj3*sj4*sj5))+(((-2.0)*cj3*r00*r11*sj4*(cj5*cj5)))+(((-2.0)*cj4*cj5*r00*r11*sj3*sj4*sj5))+(((0.47)*cj4*r22*sj3*sj4))+(((0.235)*cj5*r00*sj3))+(((-0.235)*r11*sj3*sj5))+(((-0.0036)*r22*sj3))+(((0.0072)*cj4*cj5*r00*sj3*sj4))+(((-1.0)*cj3*cj4*r00*r22*sj5))+((r11*r22*sj3*sj5))+(((0.11638257985343)*(pz*pz)))+((cj4*sj3*sj4*(r11*r11)))+(((-0.003)*cj4*r22*sj3)))),IkReal(((-0.06503796)+(((0.001692)*cj4*sj4))+(((-0.0072)*cj5*r00))+(((-2.0)*cj4*cj5*r00*r22*sj4))+(((0.0137335143086046)*(cj1*cj1)*(py*py)))+(((cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((cj4*cj4)*(r11*r11)))+(((-0.23276515970686)*px*pz*sj1))+(((0.51)*cj4*r22))+(((2.0)*cj4*r11*r22*sj4*sj5))+(((0.23276515970686)*cj1*py*pz))+(((-0.51)*r11*sj4*sj5))+(((0.0072)*cj5*r00*(cj4*cj4)))+(((0.986266485691395)*(pz*pz)))+(((0.0137335143086046)*(px*px)))+(((-1.0)*(r11*r11)))+(((2.0)*cj5*r00*r11*sj5))+(((-2.0)*cj5*r00*r11*sj5*(cj4*cj4)))+(((-1.0)*(cj5*cj5)*(r00*r00)))+(((-0.47)*cj4*r11*sj4*sj5))+(((-0.11985)*cj4))+(((0.001836)*sj4))+(((0.47)*cj4*cj5*r00*sj4))+(((0.0072)*r11*sj5))+(((-0.0137335143086046)*(cj1*cj1)*(px*px)))+(((-1.0)*(cj4*cj4)*(r22*r22)))+(((-0.0072)*r11*sj5*(cj4*cj4)))+(((-1.0)*(cj4*cj4)*(cj5*cj5)*(r11*r11)))+(((0.47)*r22*(cj4*cj4)))+(((cj5*cj5)*(r11*r11)))+(((-0.0072)*cj4*r22*sj4))+(((0.51)*cj5*r00*sj4))+(((-0.05521204)*(cj4*cj4)))+(((-0.0274670286172093)*cj1*px*py*sj1)))),IKFAST_ATAN2_MAGTHRESH);
if(!x413.valid){
continue;
}
CheckValue<IkReal> x414=IKPowWithIntegerCheck(IKsign(((((-0.99310950337382)*cj5*px*r00*sj1*sj4))+(((0.117190077688363)*cj1*py*r22*sj3*sj4))+(((-0.00357519421214575)*px*sj1*sj4))+(((0.117190077688363)*cj4*cj5*px*r00*sj1*sj3))+(((-0.00357519421214575)*cj4*pz*sj3))+(((-0.117190077688363)*cj5*pz*r00*sj4))+(((-0.99310950337382)*cj4*px*r22*sj1))+(((0.99310950337382)*pz*r22*sj3*sj4))+(((-0.0275396682567654)*cj1*py*sj3*sj4))+(((0.0275396682567654)*px*sj1*sj3*sj4))+(((0.99310950337382)*px*r11*sj1*sj4*sj5))+(((0.00357519421214575)*cj1*py*sj4))+(((-0.233380733292848)*pz*sj3*sj4))+(((-0.233380733292848)*cj1*cj4*py))+(((0.00035157023306509)*cj1*py*sj3))+(((-0.117190077688363)*cj4*pz*r22))+(((0.117190077688363)*cj1*cj3*py*r00*sj5))+(((-0.117190077688363)*cj4*px*r11*sj1*sj3*sj5))+(((-0.000421884279678108)*pz*sj4))+(((0.233380733292848)*cj4*px*sj1))+(((-0.99310950337382)*cj4*cj5*pz*r00*sj3))+(((0.117190077688363)*cj1*cj4*py*r11*sj3*sj5))+(((0.99310950337382)*cj1*cj4*py*r22))+(((0.000421884279678108)*cj4*px*sj1*sj3))+(((0.99310950337382)*cj1*cj5*py*r00*sj4))+(((-0.99310950337382)*cj1*py*r11*sj4*sj5))+(((0.117190077688363)*pz*r11*sj4*sj5))+(((0.00297932851012146)*pz*sj3))+(((0.0298834698105326)*pz))+(((0.117190077688363)*cj1*cj3*cj5*py*r11))+(((-0.00035157023306509)*px*sj1*sj3))+(((-0.117190077688363)*cj3*px*r00*sj1*sj5))+(((-0.000421884279678108)*cj1*cj4*py*sj3))+(((0.99310950337382)*cj3*pz*r00*sj5))+(((0.99310950337382)*cj3*cj5*pz*r11))+(((-0.253242923360324)*cj1*py))+(((-0.117190077688363)*cj1*cj4*cj5*py*r00*sj3))+(((0.253242923360324)*px*sj1))+(((0.0275396682567654)*cj4*pz))+(((-0.117190077688363)*px*r22*sj1*sj3*sj4))+(((0.99310950337382)*cj4*pz*r11*sj3*sj5))+(((-0.117190077688363)*cj3*cj5*px*r11*sj1)))),-1);
if(!x414.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x413.value)+(((1.5707963267949)*(x414.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x415=IKcos(j2);
IkReal x416=IKsin(j2);
IkReal x417=((0.006)*cj4);
IkReal x418=(cj5*r00);
IkReal x419=(r11*sj4);
IkReal x420=((1.0)*cj3);
IkReal x421=(r11*sj5);
IkReal x422=(cj5*r11);
IkReal x423=(cj4*sj3);
IkReal x424=(px*sj1);
IkReal x425=((1.0)*sj4);
IkReal x426=(r22*sj4);
IkReal x427=(r22*sj3);
IkReal x428=((1.0)*r22);
IkReal x429=((0.003)*sj3);
IkReal x430=(cj1*py);
IkReal x431=((0.99310950337382)*pz);
IkReal x432=(r00*sj5);
IkReal x433=((0.0036)*sj4);
IkReal x434=(sj3*sj4);
IkReal x435=(sj5*x416);
IkReal x436=(cj4*x415);
IkReal x437=((0.0597669396210653)*x416);
IkReal x438=(cj3*x415);
IkReal x439=((0.506485846720648)*x415);
IkReal x440=((0.99310950337382)*x416);
IkReal x441=(pz*x416);
IkReal x442=((0.117190077688363)*x416);
IkReal x443=((0.99310950337382)*x415);
IkReal x444=((0.117190077688363)*x415);
IkReal x445=((0.235)*x416);
evalcond[0]=((0.255)+(((-1.0)*x430*x442))+(((-1.0)*x430*x443))+(((-1.0)*x433))+((x424*x442))+((x424*x443))+(((-1.0)*x416*x431))+(((0.235)*cj4))+((sj5*x419))+((pz*x444))+(((-1.0)*cj4*x428))+(((-1.0)*x418*x425)));
evalcond[1]=((((-1.0)*x430*x440))+((x424*x440))+(((-1.0)*x420*x422))+(((0.235)*x434))+((x415*x431))+(((-1.0)*x429))+(((-1.0)*x420*x432))+(((-1.0)*x421*x423))+((x418*x423))+(((0.0036)*x423))+(((-1.0)*x425*x427))+(((-1.0)*x424*x444))+((x430*x444))+(((0.117190077688363)*x441)));
evalcond[2]=((((-1.0)*x431))+(((-1.0)*x416*x433))+((cj4*x445))+((sj3*x415*x426))+(((-1.0)*x416*x418*x425))+((x415*x429))+(((-0.235)*x415*x434))+((x419*x435))+(((-1.0)*cj4*x416*x428))+(((0.255)*x416))+(((-1.0)*x415*x418*x423))+(((0.117190077688363)*x424))+(((-0.0036)*x415*x423))+((x432*x438))+((x415*x421*x423))+(((-0.117190077688363)*x430))+((x422*x438)));
evalcond[3]=(((x434*x445))+(((0.117190077688363)*pz))+(((-1.0)*x416*x429))+(((0.235)*x436))+(((-1.0)*x415*x418*x425))+(((0.99310950337382)*x424))+(((0.0036)*x416*x423))+(((-1.0)*x416*x421*x423))+(((-1.0)*x416*x425*x427))+((sj5*x415*x419))+(((0.255)*x415))+((x416*x418*x423))+(((-1.0)*x415*x433))+(((-1.0)*x416*x420*x422))+(((-1.0)*x428*x436))+(((-0.99310950337382)*x430))+(((-1.0)*x416*x420*x432)));
evalcond[4]=((-0.00980508)+(((-1.0)*x417*x418))+(((-1.0)*(px*px)))+(((0.506485846720648)*x441))+(((0.006)*x426))+(r22*r22)+(r11*r11)+(((-0.00141)*sj4))+(((-0.0072)*x421))+(((-2.16e-5)*cj4))+(r00*r00)+(((0.0072)*x418))+(((-1.0)*x424*x437))+(((-1.0)*x424*x439))+(((-0.47)*r22))+(((-0.0597669396210653)*pz*x415))+(((0.0104)*py*sj1))+((x430*x437))+((x430*x439))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((0.0104)*cj1*px))+((x417*x421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x446 = IKatan2WithCheck(IkReal(((0.06503796)+(((-1.0)*(cj5*cj5)*(r11*r11)))+(((-0.51)*cj5*r00*sj4))+(((-0.001836)*sj4))+(((-2.0)*cj4*r11*r22*sj4*sj5))+(((-0.47)*cj4*cj5*r00*sj4))+(((-1.0)*(cj4*cj4)*(r11*r11)))+(((-0.23276515970686)*px*pz*sj1))+(((cj4*cj4)*(r22*r22)))+(r11*r11)+(((0.11985)*cj4))+(((0.23276515970686)*cj1*py*pz))+(((-1.0)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((1.97253297138279)*cj1*px*py*sj1))+(((0.0072)*r11*sj5*(cj4*cj4)))+(((2.0)*cj5*r00*r11*sj5*(cj4*cj4)))+(((0.0072)*cj5*r00))+(((-0.986266485691395)*(cj1*cj1)*(py*py)))+(((-0.47)*r22*(cj4*cj4)))+(((-0.986266485691395)*(px*px)))+(((-0.0137335143086046)*(pz*pz)))+(((-0.51)*cj4*r22))+(((-2.0)*cj5*r00*r11*sj5))+(((0.05521204)*(cj4*cj4)))+(((-0.001692)*cj4*sj4))+(((2.0)*cj4*cj5*r00*r22*sj4))+(((0.986266485691395)*(cj1*cj1)*(px*px)))+(((0.51)*r11*sj4*sj5))+(((cj5*cj5)*(r00*r00)))+(((0.47)*cj4*r11*sj4*sj5))+(((0.0072)*cj4*r22*sj4))+(((-0.0072)*cj5*r00*(cj4*cj4)))+(((cj4*cj4)*(cj5*cj5)*(r11*r11)))+(((-0.0072)*r11*sj5)))),IkReal(((((2.0)*cj5*r00*r22*sj3*(cj4*cj4)))+(((-0.47)*cj5*r00*sj3*(cj4*cj4)))+(((0.11638257985343)*(cj1*cj1)*(py*py)))+(((0.972532971382791)*cj1*py*pz))+(((0.255)*cj3*r00*sj5))+(((-0.000213)*cj4*sj3))+(((0.255)*cj4*r11*sj3*sj5))+(((0.47)*r11*sj3*sj5*(cj4*cj4)))+((cj3*cj5*sj4*sj5*(r11*r11)))+(((-1.0)*cj3*cj5*sj4*sj5*(r00*r00)))+(((-2.0)*r11*r22*sj3*sj5*(cj4*cj4)))+(((-0.0036)*cj3*cj5*r11*sj4))+((cj3*r00*r11*sj4))+(((0.235)*cj3*cj4*cj5*r11))+(((0.255)*cj3*cj5*r11))+(((-0.05521204)*cj4*sj3*sj4))+(((0.001611)*sj3))+(((0.235)*cj3*cj4*r00*sj5))+(((0.255)*r22*sj3*sj4))+(((-0.003)*cj5*r00*sj3*sj4))+(((-0.0036)*cj3*r00*sj4*sj5))+(((-1.0)*cj3*cj4*cj5*r11*r22))+(((-1.0)*cj4*sj3*sj4*(r22*r22)))+(((-0.11638257985343)*(cj1*cj1)*(px*px)))+(((-0.972532971382791)*px*pz*sj1))+((cj4*sj3*sj4*(cj5*cj5)*(r00*r00)))+(((-0.255)*cj4*cj5*r00*sj3))+(((-1.0)*cj4*sj3*sj4*(cj5*cj5)*(r11*r11)))+(((0.003)*r11*sj3*sj4*sj5))+(((0.11638257985343)*(px*px)))+(((-0.0599358)*sj3*sj4))+(((0.0072)*r22*sj3*(cj4*cj4)))+(((-0.001692)*sj3*(cj4*cj4)))+(((-1.0)*cj5*r00*r22*sj3))+(((-0.23276515970686)*cj1*px*py*sj1))+(((-0.0072)*cj4*r11*sj3*sj4*sj5))+(((-2.0)*cj3*r00*r11*sj4*(cj5*cj5)))+(((-2.0)*cj4*cj5*r00*r11*sj3*sj4*sj5))+(((0.47)*cj4*r22*sj3*sj4))+(((0.235)*cj5*r00*sj3))+(((-0.235)*r11*sj3*sj5))+(((-0.0036)*r22*sj3))+(((-0.11638257985343)*(pz*pz)))+(((0.0072)*cj4*cj5*r00*sj3*sj4))+(((-1.0)*cj3*cj4*r00*r22*sj5))+((r11*r22*sj3*sj5))+((cj4*sj3*sj4*(r11*r11)))+(((-0.003)*cj4*r22*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x446.valid){
continue;
}
CheckValue<IkReal> x447=IKPowWithIntegerCheck(IKsign(((((-0.99310950337382)*cj1*cj4*cj5*py*r00*sj3))+(((0.117190077688363)*cj4*px*r22*sj1))+(((-0.99310950337382)*cj4*pz*r22))+(((-0.117190077688363)*px*r11*sj1*sj4*sj5))+(((-0.99310950337382)*px*r22*sj1*sj3*sj4))+(((-0.117190077688363)*cj3*cj5*pz*r11))+(((-0.99310950337382)*cj4*px*r11*sj1*sj3*sj5))+(((0.0275396682567654)*cj1*cj4*py))+(((0.99310950337382)*cj1*py*r22*sj3*sj4))+(((0.253242923360324)*pz))+(((-0.0275396682567654)*cj4*px*sj1))+(((-0.117190077688363)*cj4*pz*r11*sj3*sj5))+(((-0.99310950337382)*cj5*pz*r00*sj4))+(((-0.117190077688363)*pz*r22*sj3*sj4))+(((0.99310950337382)*cj4*cj5*px*r00*sj1*sj3))+(((0.99310950337382)*cj1*cj4*py*r11*sj3*sj5))+(((-0.00357519421214575)*cj1*cj4*py*sj3))+(((0.117190077688363)*cj1*py*r11*sj4*sj5))+(((0.233380733292848)*cj4*pz))+(((0.000421884279678108)*cj4*pz*sj3))+(((-0.00297932851012146)*px*sj1*sj3))+(((-0.00035157023306509)*pz*sj3))+(((-0.000421884279678108)*cj1*py*sj4))+(((-0.99310950337382)*cj3*px*r00*sj1*sj5))+(((-0.00357519421214575)*pz*sj4))+(((0.99310950337382)*pz*r11*sj4*sj5))+(((0.233380733292848)*px*sj1*sj3*sj4))+(((-0.117190077688363)*cj1*cj4*py*r22))+(((0.0298834698105326)*cj1*py))+(((-0.233380733292848)*cj1*py*sj3*sj4))+(((-0.117190077688363)*cj3*pz*r00*sj5))+(((0.00357519421214575)*cj4*px*sj1*sj3))+(((-0.117190077688363)*cj1*cj5*py*r00*sj4))+(((0.0275396682567654)*pz*sj3*sj4))+(((-0.0298834698105326)*px*sj1))+(((0.000421884279678108)*px*sj1*sj4))+(((-0.99310950337382)*cj3*cj5*px*r11*sj1))+(((0.00297932851012146)*cj1*py*sj3))+(((0.117190077688363)*cj4*cj5*pz*r00*sj3))+(((0.117190077688363)*cj5*px*r00*sj1*sj4))+(((0.99310950337382)*cj1*cj3*py*r00*sj5))+(((0.99310950337382)*cj1*cj3*cj5*py*r11)))),-1);
if(!x447.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x446.value)+(((1.5707963267949)*(x447.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x448=IKcos(j2);
IkReal x449=IKsin(j2);
IkReal x450=((0.006)*cj4);
IkReal x451=(cj5*r00);
IkReal x452=(r11*sj4);
IkReal x453=((1.0)*cj3);
IkReal x454=(r11*sj5);
IkReal x455=(cj5*r11);
IkReal x456=(cj4*sj3);
IkReal x457=(px*sj1);
IkReal x458=((1.0)*sj4);
IkReal x459=(r22*sj4);
IkReal x460=(r22*sj3);
IkReal x461=((1.0)*r22);
IkReal x462=((0.003)*sj3);
IkReal x463=(cj1*py);
IkReal x464=((0.99310950337382)*pz);
IkReal x465=(r00*sj5);
IkReal x466=((0.0036)*sj4);
IkReal x467=(sj3*sj4);
IkReal x468=(sj5*x449);
IkReal x469=(cj4*x448);
IkReal x470=((0.0597669396210653)*x449);
IkReal x471=(cj3*x448);
IkReal x472=((0.506485846720648)*x448);
IkReal x473=((0.99310950337382)*x449);
IkReal x474=(pz*x449);
IkReal x475=((0.117190077688363)*x449);
IkReal x476=((0.99310950337382)*x448);
IkReal x477=((0.117190077688363)*x448);
IkReal x478=((0.235)*x449);
evalcond[0]=((0.255)+(((0.235)*cj4))+(((-1.0)*cj4*x461))+(((-1.0)*x466))+((pz*x477))+(((-1.0)*x451*x458))+(((-1.0)*x449*x464))+((x457*x476))+((x457*x475))+(((-1.0)*x463*x475))+(((-1.0)*x463*x476))+((sj5*x452)));
evalcond[1]=((((0.0036)*x456))+((x463*x477))+(((0.235)*x467))+(((-1.0)*x462))+(((-1.0)*x453*x465))+(((0.117190077688363)*x474))+((x448*x464))+(((-1.0)*x453*x455))+(((-1.0)*x458*x460))+(((-1.0)*x454*x456))+((x451*x456))+((x457*x473))+(((-1.0)*x463*x473))+(((-1.0)*x457*x477)));
evalcond[2]=(((cj4*x478))+(((-0.0036)*x448*x456))+(((-0.117190077688363)*x463))+((x452*x468))+((x455*x471))+(((-1.0)*x448*x451*x456))+((x465*x471))+(((0.255)*x449))+(((-1.0)*x464))+(((-1.0)*x449*x451*x458))+(((0.117190077688363)*x457))+((x448*x454*x456))+((x448*x462))+((sj3*x448*x459))+(((-1.0)*x449*x466))+(((-1.0)*cj4*x449*x461))+(((-0.235)*x448*x467)));
evalcond[3]=((((-1.0)*x448*x466))+(((0.99310950337382)*x457))+(((0.117190077688363)*pz))+(((0.0036)*x449*x456))+((sj5*x448*x452))+(((-1.0)*x449*x453*x465))+(((-1.0)*x448*x451*x458))+(((-0.99310950337382)*x463))+(((-1.0)*x449*x453*x455))+(((0.235)*x469))+(((-1.0)*x449*x454*x456))+(((0.255)*x448))+((x449*x451*x456))+((x467*x478))+(((-1.0)*x461*x469))+(((-1.0)*x449*x462))+(((-1.0)*x449*x458*x460)));
evalcond[4]=((-0.00980508)+(((-1.0)*(px*px)))+(r22*r22)+(((0.0072)*x451))+((x463*x470))+((x463*x472))+(r11*r11)+(((-0.00141)*sj4))+(((0.506485846720648)*x474))+(((-2.16e-5)*cj4))+(r00*r00)+(((-0.47)*r22))+(((-0.0072)*x454))+(((0.0104)*py*sj1))+(((-1.0)*(pz*pz)))+(((-1.0)*x450*x451))+((x450*x454))+(((-1.0)*(py*py)))+(((-0.0597669396210653)*pz*x448))+(((0.0104)*cj1*px))+(((0.006)*x459))+(((-1.0)*x457*x470))+(((-1.0)*x457*x472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x479 = IKatan2WithCheck(IkReal(((((-0.117190077688363)*cj4*cj5*pz*r00*sj3))+(((0.117190077688363)*cj4*px*r22*sj1))+(((-0.99310950337382)*cj4*pz*r22))+(((-0.117190077688363)*px*r11*sj1*sj4*sj5))+(((0.00297932851012146)*px*sj1*sj3))+(((-0.99310950337382)*cj4*cj5*px*r00*sj1*sj3))+(((0.117190077688363)*pz*r22*sj3*sj4))+(((0.0275396682567654)*cj1*cj4*py))+(((0.99310950337382)*cj3*px*r00*sj1*sj5))+(((0.00035157023306509)*pz*sj3))+(((0.253242923360324)*pz))+(((-0.0275396682567654)*cj4*px*sj1))+(((-0.000421884279678108)*cj4*pz*sj3))+(((-0.99310950337382)*cj5*pz*r00*sj4))+(((-0.99310950337382)*cj1*cj4*py*r11*sj3*sj5))+(((0.117190077688363)*cj3*pz*r00*sj5))+(((0.117190077688363)*cj1*py*r11*sj4*sj5))+(((0.233380733292848)*cj1*py*sj3*sj4))+(((-0.99310950337382)*cj1*cj3*cj5*py*r11))+(((0.00357519421214575)*cj1*cj4*py*sj3))+(((0.99310950337382)*cj3*cj5*px*r11*sj1))+(((0.233380733292848)*cj4*pz))+(((0.99310950337382)*px*r22*sj1*sj3*sj4))+(((-0.000421884279678108)*cj1*py*sj4))+(((-0.00357519421214575)*pz*sj4))+(((-0.0275396682567654)*pz*sj3*sj4))+(((0.99310950337382)*pz*r11*sj4*sj5))+(((-0.00297932851012146)*cj1*py*sj3))+(((-0.117190077688363)*cj1*cj4*py*r22))+(((0.0298834698105326)*cj1*py))+(((0.99310950337382)*cj1*cj4*cj5*py*r00*sj3))+(((0.99310950337382)*cj4*px*r11*sj1*sj3*sj5))+(((-0.117190077688363)*cj1*cj5*py*r00*sj4))+(((-0.0298834698105326)*px*sj1))+(((-0.233380733292848)*px*sj1*sj3*sj4))+(((0.000421884279678108)*px*sj1*sj4))+(((-0.99310950337382)*cj1*cj3*py*r00*sj5))+(((0.117190077688363)*cj3*cj5*pz*r11))+(((-0.00357519421214575)*cj4*px*sj1*sj3))+(((0.117190077688363)*cj5*px*r00*sj1*sj4))+(((-0.99310950337382)*cj1*py*r22*sj3*sj4))+(((0.117190077688363)*cj4*pz*r11*sj3*sj5)))),IkReal(((((-0.99310950337382)*cj1*cj5*py*r00*sj4))+(((0.000421884279678108)*pz*sj4))+(((0.117190077688363)*cj1*py*r22*sj3*sj4))+(((0.117190077688363)*cj4*pz*r22))+(((0.117190077688363)*cj4*cj5*px*r00*sj1*sj3))+(((-0.00357519421214575)*cj4*pz*sj3))+(((0.00357519421214575)*px*sj1*sj4))+(((-0.99310950337382)*px*r11*sj1*sj4*sj5))+(((0.99310950337382)*pz*r22*sj3*sj4))+(((-0.0275396682567654)*cj1*py*sj3*sj4))+(((0.0275396682567654)*px*sj1*sj3*sj4))+(((0.233380733292848)*cj1*cj4*py))+(((0.99310950337382)*cj4*px*r22*sj1))+(((-0.00357519421214575)*cj1*py*sj4))+(((-0.233380733292848)*pz*sj3*sj4))+(((-0.117190077688363)*pz*r11*sj4*sj5))+(((0.00035157023306509)*cj1*py*sj3))+(((-0.253242923360324)*px*sj1))+(((0.117190077688363)*cj1*cj3*py*r00*sj5))+(((-0.117190077688363)*cj4*px*r11*sj1*sj3*sj5))+(((-0.0298834698105326)*pz))+(((0.117190077688363)*cj5*pz*r00*sj4))+(((-0.99310950337382)*cj4*cj5*pz*r00*sj3))+(((0.117190077688363)*cj1*cj4*py*r11*sj3*sj5))+(((0.253242923360324)*cj1*py))+(((0.000421884279678108)*cj4*px*sj1*sj3))+(((-0.233380733292848)*cj4*px*sj1))+(((0.00297932851012146)*pz*sj3))+(((0.117190077688363)*cj1*cj3*cj5*py*r11))+(((-0.00035157023306509)*px*sj1*sj3))+(((-0.117190077688363)*cj3*px*r00*sj1*sj5))+(((0.99310950337382)*cj5*px*r00*sj1*sj4))+(((0.99310950337382)*cj1*py*r11*sj4*sj5))+(((-0.000421884279678108)*cj1*cj4*py*sj3))+(((0.99310950337382)*cj3*pz*r00*sj5))+(((0.99310950337382)*cj3*cj5*pz*r11))+(((-0.99310950337382)*cj1*cj4*py*r22))+(((-0.117190077688363)*cj1*cj4*cj5*py*r00*sj3))+(((-0.0275396682567654)*cj4*pz))+(((-0.117190077688363)*px*r22*sj1*sj3*sj4))+(((0.99310950337382)*cj4*pz*r11*sj3*sj5))+(((-0.117190077688363)*cj3*cj5*px*r11*sj1)))),IKFAST_ATAN2_MAGTHRESH);
if(!x479.valid){
continue;
}
CheckValue<IkReal> x480=IKPowWithIntegerCheck(IKsign(((((-1.0)*(cj1*cj1)*(px*px)))+(px*px)+(((cj1*cj1)*(py*py)))+(pz*pz)+(((-2.0)*cj1*px*py*sj1)))),-1);
if(!x480.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x479.value)+(((1.5707963267949)*(x480.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x481=IKcos(j2);
IkReal x482=IKsin(j2);
IkReal x483=((0.006)*cj4);
IkReal x484=(cj5*r00);
IkReal x485=(r11*sj4);
IkReal x486=((1.0)*cj3);
IkReal x487=(r11*sj5);
IkReal x488=(cj5*r11);
IkReal x489=(cj4*sj3);
IkReal x490=(px*sj1);
IkReal x491=((1.0)*sj4);
IkReal x492=(r22*sj4);
IkReal x493=(r22*sj3);
IkReal x494=((1.0)*r22);
IkReal x495=((0.003)*sj3);
IkReal x496=(cj1*py);
IkReal x497=((0.99310950337382)*pz);
IkReal x498=(r00*sj5);
IkReal x499=((0.0036)*sj4);
IkReal x500=(sj3*sj4);
IkReal x501=(sj5*x482);
IkReal x502=(cj4*x481);
IkReal x503=((0.0597669396210653)*x482);
IkReal x504=(cj3*x481);
IkReal x505=((0.506485846720648)*x481);
IkReal x506=((0.99310950337382)*x482);
IkReal x507=(pz*x482);
IkReal x508=((0.117190077688363)*x482);
IkReal x509=((0.99310950337382)*x481);
IkReal x510=((0.117190077688363)*x481);
IkReal x511=((0.235)*x482);
evalcond[0]=((0.255)+(((-1.0)*x482*x497))+(((-1.0)*x499))+(((0.235)*cj4))+((pz*x510))+((x490*x509))+((x490*x508))+(((-1.0)*x496*x509))+(((-1.0)*x496*x508))+((sj5*x485))+(((-1.0)*cj4*x494))+(((-1.0)*x484*x491)));
evalcond[1]=((((-1.0)*x486*x488))+((x484*x489))+(((0.0036)*x489))+((x496*x510))+(((-1.0)*x490*x510))+(((-1.0)*x495))+(((-1.0)*x491*x493))+(((-1.0)*x486*x498))+(((0.117190077688363)*x507))+(((0.235)*x500))+((x490*x506))+(((-1.0)*x496*x506))+(((-1.0)*x487*x489))+((x481*x497)));
evalcond[2]=((((-1.0)*x482*x499))+(((0.117190077688363)*x490))+(((-1.0)*cj4*x482*x494))+((cj4*x511))+(((-1.0)*x497))+(((-1.0)*x481*x484*x489))+((x488*x504))+(((-0.117190077688363)*x496))+(((-0.235)*x481*x500))+((x481*x487*x489))+((x485*x501))+(((0.255)*x482))+((x498*x504))+(((-1.0)*x482*x484*x491))+((x481*x495))+((sj3*x481*x492))+(((-0.0036)*x481*x489)));
evalcond[3]=(((x482*x484*x489))+(((-1.0)*x482*x486*x488))+(((-1.0)*x482*x495))+(((-1.0)*x482*x487*x489))+(((-1.0)*x482*x491*x493))+(((0.117190077688363)*pz))+(((0.0036)*x482*x489))+(((-1.0)*x481*x484*x491))+(((0.235)*x502))+((sj5*x481*x485))+(((-0.99310950337382)*x496))+(((0.99310950337382)*x490))+(((-1.0)*x494*x502))+(((0.255)*x481))+((x500*x511))+(((-1.0)*x481*x499))+(((-1.0)*x482*x486*x498)));
evalcond[4]=((-0.00980508)+(((-1.0)*(px*px)))+(((-1.0)*x483*x484))+(r22*r22)+(((-0.0597669396210653)*pz*x481))+(r11*r11)+(((-0.00141)*sj4))+((x483*x487))+(((-2.16e-5)*cj4))+(r00*r00)+(((0.506485846720648)*x507))+(((-0.47)*r22))+((x496*x503))+((x496*x505))+(((-1.0)*x490*x503))+(((-1.0)*x490*x505))+(((0.0104)*py*sj1))+(((-1.0)*(pz*pz)))+(((0.006)*x492))+(((-1.0)*(py*py)))+(((-0.0072)*x487))+(((0.0104)*cj1*px))+(((0.0072)*x484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x512=px*px;
IkReal x513=py*py;
IkReal x514=((0.99310950337382)*px);
IkReal x515=((0.0071503884242915)*px);
IkReal x516=(cj5*r00);
IkReal x517=(px*sj4);
IkReal x518=(r11*sj5);
IkReal x519=(px*r22);
IkReal x520=(cj4*px);
CheckValue<IkReal> x523 = IKatan2WithCheck(IkReal(((-0.0103283388350877)*x512)),IkReal(((-0.0103283388350877)*px*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x523.valid){
continue;
}
IkReal x521=((1.0)*(x523.value));
if((((((0.000106674583092381)*(x512*x512)))+(((0.000106674583092381)*x512*x513)))) < -0.00001)
continue;
CheckValue<IkReal> x524=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.000106674583092381)*(x512*x512)))+(((0.000106674583092381)*x512*x513))))),-1);
if(!x524.valid){
continue;
}
if( (((x524.value)*(((((0.00595865702024292)*x516*x520))+(((-0.119002722814079)*x520))+(((0.466761466585695)*x519))+(((-0.00595865702024292)*r22*x517))+(((-1.0)*x514*(r22*r22)))+((x513*x514))+(((-1.0)*x514*(r11*r11)))+(((0.00322363344795142)*x517))+((x514*(pz*pz)))+(((-0.506485846720648)*x517*x518))+(((-1.0)*x515*x516))+((x515*x518))+(((0.506485846720648)*x516*x517))+(((0.506485846720648)*cj4*x519))+(((-0.119416372784425)*px))+(((-1.0)*x514*(r00*r00)))+(((-0.00595865702024292)*x518*x520))+((x514*(px*px))))))) < -1-IKFAST_SINCOS_THRESH || (((x524.value)*(((((0.00595865702024292)*x516*x520))+(((-0.119002722814079)*x520))+(((0.466761466585695)*x519))+(((-0.00595865702024292)*r22*x517))+(((-1.0)*x514*(r22*r22)))+((x513*x514))+(((-1.0)*x514*(r11*r11)))+(((0.00322363344795142)*x517))+((x514*(pz*pz)))+(((-0.506485846720648)*x517*x518))+(((-1.0)*x515*x516))+((x515*x518))+(((0.506485846720648)*x516*x517))+(((0.506485846720648)*cj4*x519))+(((-0.119416372784425)*px))+(((-1.0)*x514*(r00*r00)))+(((-0.00595865702024292)*x518*x520))+((x514*(px*px))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x522=IKasin(((x524.value)*(((((0.00595865702024292)*x516*x520))+(((-0.119002722814079)*x520))+(((0.466761466585695)*x519))+(((-0.00595865702024292)*r22*x517))+(((-1.0)*x514*(r22*r22)))+((x513*x514))+(((-1.0)*x514*(r11*r11)))+(((0.00322363344795142)*x517))+((x514*(pz*pz)))+(((-0.506485846720648)*x517*x518))+(((-1.0)*x515*x516))+((x515*x518))+(((0.506485846720648)*x516*x517))+(((0.506485846720648)*cj4*x519))+(((-0.119416372784425)*px))+(((-1.0)*x514*(r00*r00)))+(((-0.00595865702024292)*x518*x520))+((x514*(px*px)))))));
j1array[0]=((((-1.0)*x522))+(((-1.0)*x521)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x521))+x522);
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x525=IKsin(j1);
IkReal x526=IKcos(j1);
IkReal x527=r00*r00;
IkReal x528=r22*r22;
IkReal x529=py*py;
IkReal x530=r11*r11;
IkReal x531=px*px;
IkReal x532=pz*pz;
IkReal x533=py*py*py;
IkReal x534=((0.117190077688363)*py);
IkReal x535=(cj3*sj4);
IkReal x536=(py*sj4);
IkReal x537=((0.00070314046613018)*r22);
IkReal x538=(cj4*py);
IkReal x539=(cj5*r00);
IkReal x540=((0.0071503884242915)*py);
IkReal x541=((0.0597669396210653)*r22);
IkReal x542=(r11*sj5);
IkReal x543=(px*sj4);
IkReal x544=(py*r22);
IkReal x545=((0.99310950337382)*py);
IkReal x546=(cj4*px);
IkReal x547=(cj3*cj4);
IkReal x548=((0.117190077688363)*px);
IkReal x549=((0.000843768559356216)*px);
IkReal x550=((0.000843768559356216)*py);
IkReal x551=((0.00121877680795898)*py);
IkReal x552=(px*x526);
IkReal x553=(x525*x529);
evalcond[0]=((0.0052)+((x539*x547))+(((-1.0)*x552))+((cj5*r11*sj3))+(((-1.0)*x542*x547))+(((-1.0)*py*x525))+((r00*sj3*sj5))+(((0.235)*x535))+(((0.0036)*x547))+(((-0.003)*cj3))+(((-1.0)*r22*x535)));
evalcond[1]=((((-1.0)*x537*x543))+(((-0.0140426995052723)*x546))+((x541*x546))+(((-1.0)*x527*x548))+(((-1.0)*x530*x548))+(((-0.0597669396210653)*x542*x543))+(((-1.0)*x539*x549))+((x542*x549))+(((-1.0)*px*x525*x551))+(((0.00070314046613018)*x539*x546))+(((-0.00070314046613018)*x542*x546))+(((0.0550793365135308)*px*r22))+(((-1.0)*x528*x548))+((x548*(px*px)))+(((0.000380398992176427)*x543))+(((-0.00121877680795898)*x526*x531))+((x529*x548))+(((0.0597669396210653)*x539*x543))+((x532*x548))+(((-0.014091511516431)*px)));
evalcond[2]=(((x539*x540))+(((-1.0)*x532*x545))+(((0.00595865702024292)*x538*x542))+(((-0.506485846720648)*r22*x538))+(((-0.00322363344795142)*x536))+(((-1.0)*x540*x542))+(((-0.00595865702024292)*x538*x539))+(((-0.99310950337382)*x533))+(((0.0103283388350877)*x553))+(((-1.0)*x531*x545))+(((0.00595865702024292)*r22*x536))+(((0.0103283388350877)*py*x552))+(((-0.506485846720648)*x536*x539))+(((0.119416372784425)*py))+(((0.506485846720648)*x536*x542))+(((0.119002722814079)*x538))+(((-0.466761466585695)*x544))+((x528*x545))+((x527*x545))+((x530*x545)));
evalcond[3]=((((-1.0)*x532*x534))+(((0.014091511516431)*py))+(((-0.00070314046613018)*x538*x539))+(((0.0597669396210653)*x536*x542))+(((0.00121877680795898)*x553))+(((-1.0)*x538*x541))+(((-1.0)*x531*x534))+(((-0.0597669396210653)*x536*x539))+(((-0.117190077688363)*x533))+((x536*x537))+(((-0.000380398992176427)*x536))+(((0.00070314046613018)*x538*x542))+(((0.0140426995052723)*x538))+((x551*x552))+((x539*x550))+((x528*x534))+((x530*x534))+((x527*x534))+(((-0.0550793365135308)*x544))+(((-1.0)*x542*x550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
IkReal x554=cj1*cj1;
IkReal x555=px*px;
IkReal x556=(((x554*(py*py)))+(((-1.0)*x554*x555))+(pz*pz)+x555+(((-2.0)*cj1*px*py*sj1)));
j2eval[0]=x556;
j2eval[1]=IKsign(x556);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x557=((333.333333333333)*sj4);
IkReal x558=(pz*sj3);
IkReal x559=(cj3*sj5);
IkReal x560=(px*sj1);
IkReal x561=((0.117190077688363)*pz);
IkReal x562=(cj1*py);
IkReal x563=((2824.78267490284)*r11);
IkReal x564=(cj3*cj5);
IkReal x565=((0.117190077688363)*r22);
IkReal x566=(sj3*sj4);
IkReal x567=((2824.78267490284)*r22);
IkReal x568=((0.000421884279678108)*sj4);
IkReal x569=((0.0275396682567654)*cj4);
IkReal x570=((0.99310950337382)*r11);
IkReal x571=((0.99310950337382)*r22);
IkReal x572=(cj4*pz);
IkReal x573=((333.333333333333)*r00);
IkReal x574=(cj4*cj5);
IkReal x575=(cj4*sj3);
IkReal x576=(pz*sj4);
IkReal x577=((0.117190077688363)*sj4);
IkReal x578=((8.47434802470852)*sj3);
IkReal x579=((0.99310950337382)*r00);
IkReal x580=((78.3333333333333)*cj4);
IkReal x581=((333.333333333333)*r11);
IkReal x582=(r11*sj5);
IkReal x583=((0.00297932851012146)*sj3);
IkReal x584=((1.2)*sj4);
IkReal x585=(cj5*r00);
IkReal x586=((2824.78267490284)*sj3);
IkReal x587=(r00*x562);
IkReal x588=(sj5*x575);
IkReal x589=((333.333333333333)*cj4*r22);
j2eval[0]=(((x562*x580))+((x562*x566*x567))+(((-1.0)*x574*x586*x587))+(((-2824.78267490284)*r00*x559*x560))+(((-1.0)*x558))+(((-85.0)*x560))+(((-1.0)*x560*x563*x588))+(((-1.0)*x560*x580))+(((78.3333333333333)*sj4*x558))+((x557*x560*x585))+((x560*x584))+((x560*x589))+(((663.823928602168)*x572))+(((-10.1692176296502)*x562*x575))+(((2824.78267490284)*x559*x587))+(((-1.0)*x557*x560*x582))+(((-1.0)*x560*x578))+(((85.0)*x562))+(((-663.823928602168)*x562*x566))+((x562*x578))+(((720.319582100224)*pz))+(((1.2)*cj4*x558))+(((10.1692176296502)*x560*x575))+(((-1.0)*pz*x559*x573))+(((-1.0)*x562*x589))+(((-1.0)*x562*x584))+(((-1.0)*x557*x562*x585))+(((663.823928602168)*x560*x566))+(((-2824.78267490284)*x576*x585))+(((-1.0)*x567*x572))+(((-1.0)*x560*x566*x567))+((sj5*x563*x576))+(((-1.0)*x560*x563*x564))+((x562*x563*x588))+((r00*x560*x574*x586))+(((-1.0)*r22*x557*x558))+((x562*x563*x564))+(((-1.0)*cj4*sj5*x558*x581))+(((-10.1692176296502)*x576))+((x558*x573*x574))+((x557*x562*x582))+(((-1.0)*pz*x564*x581)));
j2eval[1]=IKsign((((x562*x583))+((x562*x564*x570))+((sj5*x570*x576))+(((0.117190077688363)*r00*x558*x574))+(((-1.0)*x560*x577*x582))+(((-1.0)*cj4*x562*x565))+(((0.0298834698105326)*x562))+(((-0.00357519421214575)*x576))+(((0.0275396682567654)*sj4*x558))+((x559*x562*x579))+(((-1.0)*r00*x559*x561))+(((0.000421884279678108)*cj4*x558))+(((0.253242923360324)*pz))+(((-1.0)*x560*x583))+(((-1.0)*x559*x560*x579))+(((-1.0)*x560*x566*x571))+((cj4*x560*x565))+(((-1.0)*r11*x561*x564))+((x562*x569))+(((-1.0)*cj5*x576*x579))+((x562*x577*x582))+(((-1.0)*x571*x572))+((x560*x568))+(((-1.0)*x562*x568))+(((-0.0298834698105326)*x560))+(((-0.117190077688363)*cj4*x558*x582))+((x562*x570*x588))+((x562*x566*x571))+((x560*x577*x585))+(((-1.0)*sj4*x558*x565))+(((-1.0)*x560*x569))+(((-1.0)*x562*x577*x585))+(((-0.00357519421214575)*x562*x575))+((sj3*x560*x574*x579))+(((-1.0)*x560*x564*x570))+(((0.00357519421214575)*x560*x575))+(((-0.00035157023306509)*x558))+(((-1.0)*sj3*x562*x574*x579))+(((0.233380733292848)*x572))+(((-1.0)*x560*x570*x588))+(((-0.233380733292848)*x562*x566))+(((0.233380733292848)*x560*x566))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x590=(cj4*sj3);
IkReal x591=(cj5*r00);
IkReal x592=(cj1*py);
IkReal x593=(r11*sj5);
IkReal x594=((0.99310950337382)*pz);
IkReal x595=((2824.78267490284)*r22);
IkReal x596=(pz*sj3);
IkReal x597=(px*sj1);
IkReal x598=(cj4*r22);
IkReal x599=((663.823928602168)*cj4);
IkReal x600=((2824.78267490284)*sj4);
IkReal x601=(sj3*sj4);
IkReal x602=((0.117190077688363)*r22);
IkReal x603=((0.00035157023306509)*sj3);
IkReal x604=((0.117190077688363)*pz);
IkReal x605=(cj4*pz);
IkReal x606=((0.233380733292848)*cj4);
IkReal x607=(pz*sj4);
IkReal x608=((2824.78267490284)*pz);
IkReal x609=((333.333333333333)*r22);
IkReal x610=((0.99310950337382)*sj4);
IkReal x611=((0.00357519421214575)*sj4);
IkReal x612=((10.1692176296502)*sj4);
IkReal x613=(cj3*cj5*r11);
IkReal x614=(cj3*r00*sj5);
j2eval[0]=((((-1.0)*x591*x597*x600))+(((720.319582100224)*x597))+(((-10.1692176296502)*pz*x590))+(((-1.2)*x607))+(((-1.0)*cj4*x595*x597))+(((-333.333333333333)*x591*x607))+(((333.333333333333)*x590*x592*x593))+((x608*x613))+((x608*x614))+(((-663.823928602168)*sj4*x596))+(((78.3333333333333)*x605))+(((1.2)*x590*x597))+(((-1.0)*x597*x612))+((x590*x593*x608))+(((-1.0)*x597*x601*x609))+(((-720.319582100224)*x592))+((x593*x597*x600))+(((85.0)*pz))+((sj4*x595*x596))+(((-1.0)*x592*x599))+(((-1.0)*sj3*x597))+((x592*x612))+(((-333.333333333333)*pz*x598))+((cj4*x592*x595))+(((-333.333333333333)*x597*x614))+(((-333.333333333333)*x597*x613))+(((-333.333333333333)*x590*x591*x592))+((x592*x601*x609))+(((333.333333333333)*x592*x614))+(((333.333333333333)*x592*x613))+(((333.333333333333)*x590*x591*x597))+(((-1.2)*x590*x592))+(((-1.0)*x590*x591*x608))+(((333.333333333333)*x593*x607))+((x591*x592*x600))+(((-333.333333333333)*x590*x593*x597))+(((8.47434802470852)*x596))+((x597*x599))+(((-78.3333333333333)*x592*x601))+(((78.3333333333333)*x597*x601))+((sj3*x592))+(((-1.0)*x592*x593*x600)));
j2eval[1]=IKsign(((((-1.0)*x592*x606))+(((0.253242923360324)*x597))+((sj4*x593*x604))+(((-1.0)*sj4*x591*x604))+(((-1.0)*x591*x597*x610))+(((-0.000421884279678108)*x607))+(((-0.000421884279678108)*x590*x592))+(((-0.117190077688363)*x590*x593*x597))+(((-0.117190077688363)*x590*x591*x592))+(((0.117190077688363)*x590*x592*x593))+(((-1.0)*x597*x611))+(((-0.233380733292848)*sj4*x596))+(((-1.0)*x597*x601*x602))+(((0.99310950337382)*x592*x598))+((x594*x614))+((x594*x613))+(((-1.0)*x597*x603))+(((-0.253242923360324)*x592))+((x592*x603))+((x597*x606))+(((0.000421884279678108)*x590*x597))+((x592*x611))+(((-0.0275396682567654)*x592*x601))+(((-1.0)*x598*x604))+((x592*x601*x602))+((x593*x597*x610))+(((0.0298834698105326)*pz))+(((-0.117190077688363)*x597*x613))+(((-0.117190077688363)*x597*x614))+(((0.00297932851012146)*x596))+(((0.0275396682567654)*x605))+(((0.0275396682567654)*x597*x601))+(((-0.99310950337382)*x597*x598))+(((-0.00357519421214575)*pz*x590))+(((0.117190077688363)*x592*x614))+(((0.117190077688363)*x592*x613))+(((-1.0)*x592*x593*x610))+((x590*x593*x594))+(((-1.0)*x590*x591*x594))+((x591*x592*x610))+((r22*x594*x601))+(((0.117190077688363)*x590*x591*x597))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x615 = IKatan2WithCheck(IkReal(((((2.0)*cj5*r00*r22*sj3*(cj4*cj4)))+(((-0.47)*cj5*r00*sj3*(cj4*cj4)))+(((0.255)*cj3*r00*sj5))+(((0.23276515970686)*cj1*px*py*sj1))+(((-0.000213)*cj4*sj3))+(((0.255)*cj4*r11*sj3*sj5))+(((0.47)*r11*sj3*sj5*(cj4*cj4)))+((cj3*cj5*sj4*sj5*(r11*r11)))+(((-1.0)*cj3*cj5*sj4*sj5*(r00*r00)))+(((0.11638257985343)*(cj1*cj1)*(px*px)))+(((-2.0)*r11*r22*sj3*sj5*(cj4*cj4)))+(((-0.0036)*cj3*cj5*r11*sj4))+((cj3*r00*r11*sj4))+(((0.235)*cj3*cj4*cj5*r11))+(((0.255)*cj3*cj5*r11))+(((-0.05521204)*cj4*sj3*sj4))+(((0.001611)*sj3))+(((0.235)*cj3*cj4*r00*sj5))+(((0.255)*r22*sj3*sj4))+(((-0.972532971382791)*cj1*py*pz))+(((-0.003)*cj5*r00*sj3*sj4))+(((-0.0036)*cj3*r00*sj4*sj5))+(((-1.0)*cj3*cj4*cj5*r11*r22))+(((-1.0)*cj4*sj3*sj4*(r22*r22)))+(((0.972532971382791)*px*pz*sj1))+((cj4*sj3*sj4*(cj5*cj5)*(r00*r00)))+(((-0.255)*cj4*cj5*r00*sj3))+(((-1.0)*cj4*sj3*sj4*(cj5*cj5)*(r11*r11)))+(((-0.11638257985343)*(px*px)))+(((0.003)*r11*sj3*sj4*sj5))+(((-0.0599358)*sj3*sj4))+(((0.0072)*r22*sj3*(cj4*cj4)))+(((-0.001692)*sj3*(cj4*cj4)))+(((-1.0)*cj5*r00*r22*sj3))+(((-0.11638257985343)*(cj1*cj1)*(py*py)))+(((-0.0072)*cj4*r11*sj3*sj4*sj5))+(((-2.0)*cj3*r00*r11*sj4*(cj5*cj5)))+(((-2.0)*cj4*cj5*r00*r11*sj3*sj4*sj5))+(((0.47)*cj4*r22*sj3*sj4))+(((0.235)*cj5*r00*sj3))+(((-0.235)*r11*sj3*sj5))+(((-0.0036)*r22*sj3))+(((0.0072)*cj4*cj5*r00*sj3*sj4))+(((-1.0)*cj3*cj4*r00*r22*sj5))+((r11*r22*sj3*sj5))+(((0.11638257985343)*(pz*pz)))+((cj4*sj3*sj4*(r11*r11)))+(((-0.003)*cj4*r22*sj3)))),IkReal(((-0.06503796)+(((0.001692)*cj4*sj4))+(((-0.0072)*cj5*r00))+(((-2.0)*cj4*cj5*r00*r22*sj4))+(((0.0137335143086046)*(cj1*cj1)*(py*py)))+(((cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((cj4*cj4)*(r11*r11)))+(((-0.23276515970686)*px*pz*sj1))+(((0.51)*cj4*r22))+(((2.0)*cj4*r11*r22*sj4*sj5))+(((0.23276515970686)*cj1*py*pz))+(((-0.51)*r11*sj4*sj5))+(((0.0072)*cj5*r00*(cj4*cj4)))+(((0.986266485691395)*(pz*pz)))+(((0.0137335143086046)*(px*px)))+(((-1.0)*(r11*r11)))+(((2.0)*cj5*r00*r11*sj5))+(((-2.0)*cj5*r00*r11*sj5*(cj4*cj4)))+(((-1.0)*(cj5*cj5)*(r00*r00)))+(((-0.47)*cj4*r11*sj4*sj5))+(((-0.11985)*cj4))+(((0.001836)*sj4))+(((0.47)*cj4*cj5*r00*sj4))+(((0.0072)*r11*sj5))+(((-0.0137335143086046)*(cj1*cj1)*(px*px)))+(((-1.0)*(cj4*cj4)*(r22*r22)))+(((-0.0072)*r11*sj5*(cj4*cj4)))+(((-1.0)*(cj4*cj4)*(cj5*cj5)*(r11*r11)))+(((0.47)*r22*(cj4*cj4)))+(((cj5*cj5)*(r11*r11)))+(((-0.0072)*cj4*r22*sj4))+(((0.51)*cj5*r00*sj4))+(((-0.05521204)*(cj4*cj4)))+(((-0.0274670286172093)*cj1*px*py*sj1)))),IKFAST_ATAN2_MAGTHRESH);
if(!x615.valid){
continue;
}
CheckValue<IkReal> x616=IKPowWithIntegerCheck(IKsign(((((-0.99310950337382)*cj5*px*r00*sj1*sj4))+(((0.117190077688363)*cj1*py*r22*sj3*sj4))+(((-0.00357519421214575)*px*sj1*sj4))+(((0.117190077688363)*cj4*cj5*px*r00*sj1*sj3))+(((-0.00357519421214575)*cj4*pz*sj3))+(((-0.117190077688363)*cj5*pz*r00*sj4))+(((-0.99310950337382)*cj4*px*r22*sj1))+(((0.99310950337382)*pz*r22*sj3*sj4))+(((-0.0275396682567654)*cj1*py*sj3*sj4))+(((0.0275396682567654)*px*sj1*sj3*sj4))+(((0.99310950337382)*px*r11*sj1*sj4*sj5))+(((0.00357519421214575)*cj1*py*sj4))+(((-0.233380733292848)*pz*sj3*sj4))+(((-0.233380733292848)*cj1*cj4*py))+(((0.00035157023306509)*cj1*py*sj3))+(((-0.117190077688363)*cj4*pz*r22))+(((0.117190077688363)*cj1*cj3*py*r00*sj5))+(((-0.117190077688363)*cj4*px*r11*sj1*sj3*sj5))+(((-0.000421884279678108)*pz*sj4))+(((0.233380733292848)*cj4*px*sj1))+(((-0.99310950337382)*cj4*cj5*pz*r00*sj3))+(((0.117190077688363)*cj1*cj4*py*r11*sj3*sj5))+(((0.99310950337382)*cj1*cj4*py*r22))+(((0.000421884279678108)*cj4*px*sj1*sj3))+(((0.99310950337382)*cj1*cj5*py*r00*sj4))+(((-0.99310950337382)*cj1*py*r11*sj4*sj5))+(((0.117190077688363)*pz*r11*sj4*sj5))+(((0.00297932851012146)*pz*sj3))+(((0.0298834698105326)*pz))+(((0.117190077688363)*cj1*cj3*cj5*py*r11))+(((-0.00035157023306509)*px*sj1*sj3))+(((-0.117190077688363)*cj3*px*r00*sj1*sj5))+(((-0.000421884279678108)*cj1*cj4*py*sj3))+(((0.99310950337382)*cj3*pz*r00*sj5))+(((0.99310950337382)*cj3*cj5*pz*r11))+(((-0.253242923360324)*cj1*py))+(((-0.117190077688363)*cj1*cj4*cj5*py*r00*sj3))+(((0.253242923360324)*px*sj1))+(((0.0275396682567654)*cj4*pz))+(((-0.117190077688363)*px*r22*sj1*sj3*sj4))+(((0.99310950337382)*cj4*pz*r11*sj3*sj5))+(((-0.117190077688363)*cj3*cj5*px*r11*sj1)))),-1);
if(!x616.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x615.value)+(((1.5707963267949)*(x616.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x617=IKcos(j2);
IkReal x618=IKsin(j2);
IkReal x619=((0.006)*cj4);
IkReal x620=(cj5*r00);
IkReal x621=(r11*sj4);
IkReal x622=((1.0)*cj3);
IkReal x623=(r11*sj5);
IkReal x624=(cj5*r11);
IkReal x625=(cj4*sj3);
IkReal x626=(px*sj1);
IkReal x627=((1.0)*sj4);
IkReal x628=(r22*sj4);
IkReal x629=(r22*sj3);
IkReal x630=((1.0)*r22);
IkReal x631=((0.003)*sj3);
IkReal x632=(cj1*py);
IkReal x633=((0.99310950337382)*pz);
IkReal x634=(r00*sj5);
IkReal x635=((0.0036)*sj4);
IkReal x636=(sj3*sj4);
IkReal x637=(sj5*x618);
IkReal x638=(cj4*x617);
IkReal x639=((0.0597669396210653)*x618);
IkReal x640=(cj3*x617);
IkReal x641=((0.506485846720648)*x617);
IkReal x642=((0.99310950337382)*x618);
IkReal x643=(pz*x618);
IkReal x644=((0.117190077688363)*x618);
IkReal x645=((0.99310950337382)*x617);
IkReal x646=((0.117190077688363)*x617);
IkReal x647=((0.235)*x618);
evalcond[0]=((0.255)+(((0.235)*cj4))+((sj5*x621))+(((-1.0)*x620*x627))+(((-1.0)*x635))+(((-1.0)*cj4*x630))+((pz*x646))+(((-1.0)*x632*x644))+(((-1.0)*x632*x645))+((x626*x644))+((x626*x645))+(((-1.0)*x618*x633)));
evalcond[1]=(((x617*x633))+(((0.235)*x636))+(((-1.0)*x626*x646))+(((-1.0)*x622*x634))+(((-1.0)*x622*x624))+(((-1.0)*x623*x625))+(((-1.0)*x631))+(((-1.0)*x632*x642))+((x632*x646))+(((0.117190077688363)*x643))+((x626*x642))+(((-1.0)*x627*x629))+((x620*x625))+(((0.0036)*x625)));
evalcond[2]=((((-0.0036)*x617*x625))+(((-0.235)*x617*x636))+((cj4*x647))+((x617*x631))+((sj3*x617*x628))+(((-0.117190077688363)*x632))+(((-1.0)*x633))+(((-1.0)*cj4*x618*x630))+((x634*x640))+(((-1.0)*x617*x620*x625))+(((0.117190077688363)*x626))+(((-1.0)*x618*x635))+(((0.255)*x618))+((x617*x623*x625))+((x621*x637))+((x624*x640))+(((-1.0)*x618*x620*x627)));
evalcond[3]=((((-1.0)*x618*x627*x629))+(((0.117190077688363)*pz))+(((-1.0)*x630*x638))+(((-1.0)*x618*x622*x634))+(((-1.0)*x618*x622*x624))+((sj5*x617*x621))+((x636*x647))+(((0.235)*x638))+(((-1.0)*x618*x623*x625))+(((0.0036)*x618*x625))+(((-1.0)*x617*x620*x627))+((x618*x620*x625))+(((-1.0)*x617*x635))+(((-1.0)*x618*x631))+(((0.99310950337382)*x626))+(((0.255)*x617))+(((-0.99310950337382)*x632)));
evalcond[4]=((-0.00980508)+(((-1.0)*(px*px)))+(((-0.0597669396210653)*pz*x617))+(r22*r22)+(r11*r11)+(((-0.0072)*x623))+(((-0.00141)*sj4))+(((-1.0)*x626*x641))+((x619*x623))+(((-2.16e-5)*cj4))+(((0.506485846720648)*x643))+(r00*r00)+((x632*x641))+(((-0.47)*r22))+(((0.0072)*x620))+(((0.0104)*py*sj1))+(((0.006)*x628))+(((-1.0)*(pz*pz)))+(((-1.0)*x619*x620))+((x632*x639))+(((-1.0)*x626*x639))+(((-1.0)*(py*py)))+(((0.0104)*cj1*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x648 = IKatan2WithCheck(IkReal(((0.06503796)+(((-1.0)*(cj5*cj5)*(r11*r11)))+(((-0.51)*cj5*r00*sj4))+(((-0.001836)*sj4))+(((-2.0)*cj4*r11*r22*sj4*sj5))+(((-0.47)*cj4*cj5*r00*sj4))+(((-1.0)*(cj4*cj4)*(r11*r11)))+(((-0.23276515970686)*px*pz*sj1))+(((cj4*cj4)*(r22*r22)))+(r11*r11)+(((0.11985)*cj4))+(((0.23276515970686)*cj1*py*pz))+(((-1.0)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((1.97253297138279)*cj1*px*py*sj1))+(((0.0072)*r11*sj5*(cj4*cj4)))+(((2.0)*cj5*r00*r11*sj5*(cj4*cj4)))+(((0.0072)*cj5*r00))+(((-0.986266485691395)*(cj1*cj1)*(py*py)))+(((-0.47)*r22*(cj4*cj4)))+(((-0.986266485691395)*(px*px)))+(((-0.0137335143086046)*(pz*pz)))+(((-0.51)*cj4*r22))+(((-2.0)*cj5*r00*r11*sj5))+(((0.05521204)*(cj4*cj4)))+(((-0.001692)*cj4*sj4))+(((2.0)*cj4*cj5*r00*r22*sj4))+(((0.986266485691395)*(cj1*cj1)*(px*px)))+(((0.51)*r11*sj4*sj5))+(((cj5*cj5)*(r00*r00)))+(((0.47)*cj4*r11*sj4*sj5))+(((0.0072)*cj4*r22*sj4))+(((-0.0072)*cj5*r00*(cj4*cj4)))+(((cj4*cj4)*(cj5*cj5)*(r11*r11)))+(((-0.0072)*r11*sj5)))),IkReal(((((2.0)*cj5*r00*r22*sj3*(cj4*cj4)))+(((-0.47)*cj5*r00*sj3*(cj4*cj4)))+(((0.11638257985343)*(cj1*cj1)*(py*py)))+(((0.972532971382791)*cj1*py*pz))+(((0.255)*cj3*r00*sj5))+(((-0.000213)*cj4*sj3))+(((0.255)*cj4*r11*sj3*sj5))+(((0.47)*r11*sj3*sj5*(cj4*cj4)))+((cj3*cj5*sj4*sj5*(r11*r11)))+(((-1.0)*cj3*cj5*sj4*sj5*(r00*r00)))+(((-2.0)*r11*r22*sj3*sj5*(cj4*cj4)))+(((-0.0036)*cj3*cj5*r11*sj4))+((cj3*r00*r11*sj4))+(((0.235)*cj3*cj4*cj5*r11))+(((0.255)*cj3*cj5*r11))+(((-0.05521204)*cj4*sj3*sj4))+(((0.001611)*sj3))+(((0.235)*cj3*cj4*r00*sj5))+(((0.255)*r22*sj3*sj4))+(((-0.003)*cj5*r00*sj3*sj4))+(((-0.0036)*cj3*r00*sj4*sj5))+(((-1.0)*cj3*cj4*cj5*r11*r22))+(((-1.0)*cj4*sj3*sj4*(r22*r22)))+(((-0.11638257985343)*(cj1*cj1)*(px*px)))+(((-0.972532971382791)*px*pz*sj1))+((cj4*sj3*sj4*(cj5*cj5)*(r00*r00)))+(((-0.255)*cj4*cj5*r00*sj3))+(((-1.0)*cj4*sj3*sj4*(cj5*cj5)*(r11*r11)))+(((0.003)*r11*sj3*sj4*sj5))+(((0.11638257985343)*(px*px)))+(((-0.0599358)*sj3*sj4))+(((0.0072)*r22*sj3*(cj4*cj4)))+(((-0.001692)*sj3*(cj4*cj4)))+(((-1.0)*cj5*r00*r22*sj3))+(((-0.23276515970686)*cj1*px*py*sj1))+(((-0.0072)*cj4*r11*sj3*sj4*sj5))+(((-2.0)*cj3*r00*r11*sj4*(cj5*cj5)))+(((-2.0)*cj4*cj5*r00*r11*sj3*sj4*sj5))+(((0.47)*cj4*r22*sj3*sj4))+(((0.235)*cj5*r00*sj3))+(((-0.235)*r11*sj3*sj5))+(((-0.0036)*r22*sj3))+(((-0.11638257985343)*(pz*pz)))+(((0.0072)*cj4*cj5*r00*sj3*sj4))+(((-1.0)*cj3*cj4*r00*r22*sj5))+((r11*r22*sj3*sj5))+((cj4*sj3*sj4*(r11*r11)))+(((-0.003)*cj4*r22*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x648.valid){
continue;
}
CheckValue<IkReal> x649=IKPowWithIntegerCheck(IKsign(((((-0.99310950337382)*cj1*cj4*cj5*py*r00*sj3))+(((0.117190077688363)*cj4*px*r22*sj1))+(((-0.99310950337382)*cj4*pz*r22))+(((-0.117190077688363)*px*r11*sj1*sj4*sj5))+(((-0.99310950337382)*px*r22*sj1*sj3*sj4))+(((-0.117190077688363)*cj3*cj5*pz*r11))+(((-0.99310950337382)*cj4*px*r11*sj1*sj3*sj5))+(((0.0275396682567654)*cj1*cj4*py))+(((0.99310950337382)*cj1*py*r22*sj3*sj4))+(((0.253242923360324)*pz))+(((-0.0275396682567654)*cj4*px*sj1))+(((-0.117190077688363)*cj4*pz*r11*sj3*sj5))+(((-0.99310950337382)*cj5*pz*r00*sj4))+(((-0.117190077688363)*pz*r22*sj3*sj4))+(((0.99310950337382)*cj4*cj5*px*r00*sj1*sj3))+(((0.99310950337382)*cj1*cj4*py*r11*sj3*sj5))+(((-0.00357519421214575)*cj1*cj4*py*sj3))+(((0.117190077688363)*cj1*py*r11*sj4*sj5))+(((0.233380733292848)*cj4*pz))+(((0.000421884279678108)*cj4*pz*sj3))+(((-0.00297932851012146)*px*sj1*sj3))+(((-0.00035157023306509)*pz*sj3))+(((-0.000421884279678108)*cj1*py*sj4))+(((-0.99310950337382)*cj3*px*r00*sj1*sj5))+(((-0.00357519421214575)*pz*sj4))+(((0.99310950337382)*pz*r11*sj4*sj5))+(((0.233380733292848)*px*sj1*sj3*sj4))+(((-0.117190077688363)*cj1*cj4*py*r22))+(((0.0298834698105326)*cj1*py))+(((-0.233380733292848)*cj1*py*sj3*sj4))+(((-0.117190077688363)*cj3*pz*r00*sj5))+(((0.00357519421214575)*cj4*px*sj1*sj3))+(((-0.117190077688363)*cj1*cj5*py*r00*sj4))+(((0.0275396682567654)*pz*sj3*sj4))+(((-0.0298834698105326)*px*sj1))+(((0.000421884279678108)*px*sj1*sj4))+(((-0.99310950337382)*cj3*cj5*px*r11*sj1))+(((0.00297932851012146)*cj1*py*sj3))+(((0.117190077688363)*cj4*cj5*pz*r00*sj3))+(((0.117190077688363)*cj5*px*r00*sj1*sj4))+(((0.99310950337382)*cj1*cj3*py*r00*sj5))+(((0.99310950337382)*cj1*cj3*cj5*py*r11)))),-1);
if(!x649.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x648.value)+(((1.5707963267949)*(x649.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x650=IKcos(j2);
IkReal x651=IKsin(j2);
IkReal x652=((0.006)*cj4);
IkReal x653=(cj5*r00);
IkReal x654=(r11*sj4);
IkReal x655=((1.0)*cj3);
IkReal x656=(r11*sj5);
IkReal x657=(cj5*r11);
IkReal x658=(cj4*sj3);
IkReal x659=(px*sj1);
IkReal x660=((1.0)*sj4);
IkReal x661=(r22*sj4);
IkReal x662=(r22*sj3);
IkReal x663=((1.0)*r22);
IkReal x664=((0.003)*sj3);
IkReal x665=(cj1*py);
IkReal x666=((0.99310950337382)*pz);
IkReal x667=(r00*sj5);
IkReal x668=((0.0036)*sj4);
IkReal x669=(sj3*sj4);
IkReal x670=(sj5*x651);
IkReal x671=(cj4*x650);
IkReal x672=((0.0597669396210653)*x651);
IkReal x673=(cj3*x650);
IkReal x674=((0.506485846720648)*x650);
IkReal x675=((0.99310950337382)*x651);
IkReal x676=(pz*x651);
IkReal x677=((0.117190077688363)*x651);
IkReal x678=((0.99310950337382)*x650);
IkReal x679=((0.117190077688363)*x650);
IkReal x680=((0.235)*x651);
evalcond[0]=((0.255)+((pz*x679))+(((0.235)*cj4))+((x659*x678))+((x659*x677))+(((-1.0)*cj4*x663))+(((-1.0)*x665*x678))+(((-1.0)*x665*x677))+(((-1.0)*x668))+((sj5*x654))+(((-1.0)*x653*x660))+(((-1.0)*x651*x666)));
evalcond[1]=((((0.117190077688363)*x676))+((x665*x679))+(((-1.0)*x659*x679))+((x659*x675))+(((-1.0)*x660*x662))+(((-1.0)*x655*x657))+((x653*x658))+(((-1.0)*x665*x675))+(((-1.0)*x664))+(((0.0036)*x658))+(((-1.0)*x655*x667))+((x650*x666))+(((-1.0)*x656*x658))+(((0.235)*x669)));
evalcond[2]=((((-0.117190077688363)*x665))+(((0.255)*x651))+(((-0.235)*x650*x669))+((x650*x656*x658))+((cj4*x680))+(((-0.0036)*x650*x658))+(((-1.0)*cj4*x651*x663))+((x667*x673))+(((-1.0)*x650*x653*x658))+(((-1.0)*x666))+(((0.117190077688363)*x659))+((x650*x664))+((x654*x670))+((x657*x673))+((sj3*x650*x661))+(((-1.0)*x651*x668))+(((-1.0)*x651*x653*x660)));
evalcond[3]=((((0.235)*x671))+((x669*x680))+(((0.255)*x650))+(((0.117190077688363)*pz))+(((-1.0)*x651*x656*x658))+(((0.0036)*x651*x658))+(((-1.0)*x663*x671))+(((-0.99310950337382)*x665))+(((0.99310950337382)*x659))+(((-1.0)*x651*x655*x667))+(((-1.0)*x650*x653*x660))+(((-1.0)*x651*x655*x657))+((x651*x653*x658))+(((-1.0)*x650*x668))+((sj5*x650*x654))+(((-1.0)*x651*x660*x662))+(((-1.0)*x651*x664)));
evalcond[4]=((-0.00980508)+(((-1.0)*(px*px)))+((x665*x672))+((x665*x674))+(r22*r22)+(r11*r11)+(((-0.00141)*sj4))+(((-1.0)*x659*x674))+(((-1.0)*x659*x672))+((x652*x656))+(((0.006)*x661))+(((-2.16e-5)*cj4))+(r00*r00)+(((-0.47)*r22))+(((0.0104)*py*sj1))+(((-1.0)*(pz*pz)))+(((-0.0072)*x656))+(((-0.0597669396210653)*pz*x650))+(((-1.0)*(py*py)))+(((0.0104)*cj1*px))+(((-1.0)*x652*x653))+(((0.0072)*x653))+(((0.506485846720648)*x676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x681 = IKatan2WithCheck(IkReal(((((-0.117190077688363)*cj4*cj5*pz*r00*sj3))+(((0.117190077688363)*cj4*px*r22*sj1))+(((-0.99310950337382)*cj4*pz*r22))+(((-0.117190077688363)*px*r11*sj1*sj4*sj5))+(((0.00297932851012146)*px*sj1*sj3))+(((-0.99310950337382)*cj4*cj5*px*r00*sj1*sj3))+(((0.117190077688363)*pz*r22*sj3*sj4))+(((0.0275396682567654)*cj1*cj4*py))+(((0.99310950337382)*cj3*px*r00*sj1*sj5))+(((0.00035157023306509)*pz*sj3))+(((0.253242923360324)*pz))+(((-0.0275396682567654)*cj4*px*sj1))+(((-0.000421884279678108)*cj4*pz*sj3))+(((-0.99310950337382)*cj5*pz*r00*sj4))+(((-0.99310950337382)*cj1*cj4*py*r11*sj3*sj5))+(((0.117190077688363)*cj3*pz*r00*sj5))+(((0.117190077688363)*cj1*py*r11*sj4*sj5))+(((0.233380733292848)*cj1*py*sj3*sj4))+(((-0.99310950337382)*cj1*cj3*cj5*py*r11))+(((0.00357519421214575)*cj1*cj4*py*sj3))+(((0.99310950337382)*cj3*cj5*px*r11*sj1))+(((0.233380733292848)*cj4*pz))+(((0.99310950337382)*px*r22*sj1*sj3*sj4))+(((-0.000421884279678108)*cj1*py*sj4))+(((-0.00357519421214575)*pz*sj4))+(((-0.0275396682567654)*pz*sj3*sj4))+(((0.99310950337382)*pz*r11*sj4*sj5))+(((-0.00297932851012146)*cj1*py*sj3))+(((-0.117190077688363)*cj1*cj4*py*r22))+(((0.0298834698105326)*cj1*py))+(((0.99310950337382)*cj1*cj4*cj5*py*r00*sj3))+(((0.99310950337382)*cj4*px*r11*sj1*sj3*sj5))+(((-0.117190077688363)*cj1*cj5*py*r00*sj4))+(((-0.0298834698105326)*px*sj1))+(((-0.233380733292848)*px*sj1*sj3*sj4))+(((0.000421884279678108)*px*sj1*sj4))+(((-0.99310950337382)*cj1*cj3*py*r00*sj5))+(((0.117190077688363)*cj3*cj5*pz*r11))+(((-0.00357519421214575)*cj4*px*sj1*sj3))+(((0.117190077688363)*cj5*px*r00*sj1*sj4))+(((-0.99310950337382)*cj1*py*r22*sj3*sj4))+(((0.117190077688363)*cj4*pz*r11*sj3*sj5)))),IkReal(((((-0.99310950337382)*cj1*cj5*py*r00*sj4))+(((0.000421884279678108)*pz*sj4))+(((0.117190077688363)*cj1*py*r22*sj3*sj4))+(((0.117190077688363)*cj4*pz*r22))+(((0.117190077688363)*cj4*cj5*px*r00*sj1*sj3))+(((-0.00357519421214575)*cj4*pz*sj3))+(((0.00357519421214575)*px*sj1*sj4))+(((-0.99310950337382)*px*r11*sj1*sj4*sj5))+(((0.99310950337382)*pz*r22*sj3*sj4))+(((-0.0275396682567654)*cj1*py*sj3*sj4))+(((0.0275396682567654)*px*sj1*sj3*sj4))+(((0.233380733292848)*cj1*cj4*py))+(((0.99310950337382)*cj4*px*r22*sj1))+(((-0.00357519421214575)*cj1*py*sj4))+(((-0.233380733292848)*pz*sj3*sj4))+(((-0.117190077688363)*pz*r11*sj4*sj5))+(((0.00035157023306509)*cj1*py*sj3))+(((-0.253242923360324)*px*sj1))+(((0.117190077688363)*cj1*cj3*py*r00*sj5))+(((-0.117190077688363)*cj4*px*r11*sj1*sj3*sj5))+(((-0.0298834698105326)*pz))+(((0.117190077688363)*cj5*pz*r00*sj4))+(((-0.99310950337382)*cj4*cj5*pz*r00*sj3))+(((0.117190077688363)*cj1*cj4*py*r11*sj3*sj5))+(((0.253242923360324)*cj1*py))+(((0.000421884279678108)*cj4*px*sj1*sj3))+(((-0.233380733292848)*cj4*px*sj1))+(((0.00297932851012146)*pz*sj3))+(((0.117190077688363)*cj1*cj3*cj5*py*r11))+(((-0.00035157023306509)*px*sj1*sj3))+(((-0.117190077688363)*cj3*px*r00*sj1*sj5))+(((0.99310950337382)*cj5*px*r00*sj1*sj4))+(((0.99310950337382)*cj1*py*r11*sj4*sj5))+(((-0.000421884279678108)*cj1*cj4*py*sj3))+(((0.99310950337382)*cj3*pz*r00*sj5))+(((0.99310950337382)*cj3*cj5*pz*r11))+(((-0.99310950337382)*cj1*cj4*py*r22))+(((-0.117190077688363)*cj1*cj4*cj5*py*r00*sj3))+(((-0.0275396682567654)*cj4*pz))+(((-0.117190077688363)*px*r22*sj1*sj3*sj4))+(((0.99310950337382)*cj4*pz*r11*sj3*sj5))+(((-0.117190077688363)*cj3*cj5*px*r11*sj1)))),IKFAST_ATAN2_MAGTHRESH);
if(!x681.valid){
continue;
}
CheckValue<IkReal> x682=IKPowWithIntegerCheck(IKsign(((((-1.0)*(cj1*cj1)*(px*px)))+(px*px)+(((cj1*cj1)*(py*py)))+(pz*pz)+(((-2.0)*cj1*px*py*sj1)))),-1);
if(!x682.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x681.value)+(((1.5707963267949)*(x682.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x683=IKcos(j2);
IkReal x684=IKsin(j2);
IkReal x685=((0.006)*cj4);
IkReal x686=(cj5*r00);
IkReal x687=(r11*sj4);
IkReal x688=((1.0)*cj3);
IkReal x689=(r11*sj5);
IkReal x690=(cj5*r11);
IkReal x691=(cj4*sj3);
IkReal x692=(px*sj1);
IkReal x693=((1.0)*sj4);
IkReal x694=(r22*sj4);
IkReal x695=(r22*sj3);
IkReal x696=((1.0)*r22);
IkReal x697=((0.003)*sj3);
IkReal x698=(cj1*py);
IkReal x699=((0.99310950337382)*pz);
IkReal x700=(r00*sj5);
IkReal x701=((0.0036)*sj4);
IkReal x702=(sj3*sj4);
IkReal x703=(sj5*x684);
IkReal x704=(cj4*x683);
IkReal x705=((0.0597669396210653)*x684);
IkReal x706=(cj3*x683);
IkReal x707=((0.506485846720648)*x683);
IkReal x708=((0.99310950337382)*x684);
IkReal x709=(pz*x684);
IkReal x710=((0.117190077688363)*x684);
IkReal x711=((0.99310950337382)*x683);
IkReal x712=((0.117190077688363)*x683);
IkReal x713=((0.235)*x684);
evalcond[0]=((0.255)+(((-1.0)*x684*x699))+(((0.235)*cj4))+(((-1.0)*cj4*x696))+((x692*x711))+((x692*x710))+((sj5*x687))+(((-1.0)*x701))+(((-1.0)*x686*x693))+(((-1.0)*x698*x710))+(((-1.0)*x698*x711))+((pz*x712)));
evalcond[1]=(((x686*x691))+(((-1.0)*x693*x695))+((x692*x708))+(((-1.0)*x692*x712))+(((-1.0)*x688*x690))+(((-1.0)*x688*x700))+(((0.235)*x702))+(((0.0036)*x691))+(((-1.0)*x697))+((x698*x712))+(((-1.0)*x698*x708))+(((-1.0)*x689*x691))+((x683*x699))+(((0.117190077688363)*x709)));
evalcond[2]=((((-0.235)*x683*x702))+(((-1.0)*cj4*x684*x696))+((x700*x706))+((cj4*x713))+(((0.255)*x684))+((x690*x706))+(((0.117190077688363)*x692))+(((-1.0)*x684*x686*x693))+((sj3*x683*x694))+(((-0.117190077688363)*x698))+(((-1.0)*x699))+(((-1.0)*x684*x701))+(((-1.0)*x683*x686*x691))+((x687*x703))+(((-0.0036)*x683*x691))+((x683*x697))+((x683*x689*x691)));
evalcond[3]=((((-1.0)*x684*x693*x695))+(((-1.0)*x684*x697))+(((0.117190077688363)*pz))+(((-0.99310950337382)*x698))+((x702*x713))+(((-1.0)*x684*x688*x690))+(((0.255)*x683))+(((-1.0)*x684*x689*x691))+(((-1.0)*x684*x688*x700))+(((-1.0)*x683*x701))+((sj5*x683*x687))+(((0.99310950337382)*x692))+(((-1.0)*x696*x704))+(((0.235)*x704))+(((0.0036)*x684*x691))+((x684*x686*x691))+(((-1.0)*x683*x686*x693)));
evalcond[4]=((-0.00980508)+(((-1.0)*x685*x686))+(((-1.0)*(px*px)))+(r22*r22)+(r11*r11)+(((-0.00141)*sj4))+((x685*x689))+(((-0.0072)*x689))+(((-2.16e-5)*cj4))+(((0.006)*x694))+(((0.0072)*x686))+(((-0.0597669396210653)*pz*x683))+(r00*r00)+(((-1.0)*x692*x707))+(((-1.0)*x692*x705))+(((-0.47)*r22))+(((0.0104)*py*sj1))+(((-1.0)*(pz*pz)))+((x698*x705))+((x698*x707))+(((-1.0)*(py*py)))+(((0.0104)*cj1*px))+(((0.506485846720648)*x709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x714=(cj3*sj4);
IkReal x715=(cj3*cj4);
CheckValue<IkReal> x718 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x718.valid){
continue;
}
IkReal x716=((1.0)*(x718.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x719=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x719.valid){
continue;
}
if( (((x719.value)*(((0.0052)+(((-1.0)*r22*x714))+((cj5*r11*sj3))+(((0.235)*x714))+((r00*sj3*sj5))+(((-0.003)*cj3))+(((-1.0)*r11*sj5*x715))+((cj5*r00*x715))+(((0.0036)*x715)))))) < -1-IKFAST_SINCOS_THRESH || (((x719.value)*(((0.0052)+(((-1.0)*r22*x714))+((cj5*r11*sj3))+(((0.235)*x714))+((r00*sj3*sj5))+(((-0.003)*cj3))+(((-1.0)*r11*sj5*x715))+((cj5*r00*x715))+(((0.0036)*x715)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x717=IKasin(((x719.value)*(((0.0052)+(((-1.0)*r22*x714))+((cj5*r11*sj3))+(((0.235)*x714))+((r00*sj3*sj5))+(((-0.003)*cj3))+(((-1.0)*r11*sj5*x715))+((cj5*r00*x715))+(((0.0036)*x715))))));
j1array[0]=((((-1.0)*x717))+(((-1.0)*x716)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x716))+x717);
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j2eval[2];
IkReal x720=cj1*cj1;
IkReal x721=px*px;
IkReal x722=(((x720*(py*py)))+(((-1.0)*x720*x721))+(pz*pz)+(((-2.0)*cj1*px*py*sj1))+x721);
j2eval[0]=x722;
j2eval[1]=IKsign(x722);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x723=((333.333333333333)*sj4);
IkReal x724=(pz*sj3);
IkReal x725=(cj3*sj5);
IkReal x726=(px*sj1);
IkReal x727=((0.117190077688363)*pz);
IkReal x728=(cj1*py);
IkReal x729=((2824.78267490284)*r11);
IkReal x730=(cj3*cj5);
IkReal x731=((0.117190077688363)*r22);
IkReal x732=(sj3*sj4);
IkReal x733=((2824.78267490284)*r22);
IkReal x734=((0.000421884279678108)*sj4);
IkReal x735=((0.0275396682567654)*cj4);
IkReal x736=((0.99310950337382)*r11);
IkReal x737=((0.99310950337382)*r22);
IkReal x738=(cj4*pz);
IkReal x739=((333.333333333333)*r00);
IkReal x740=(cj4*cj5);
IkReal x741=(cj4*sj3);
IkReal x742=(pz*sj4);
IkReal x743=((0.117190077688363)*sj4);
IkReal x744=((8.47434802470852)*sj3);
IkReal x745=((0.99310950337382)*r00);
IkReal x746=((78.3333333333333)*cj4);
IkReal x747=((333.333333333333)*r11);
IkReal x748=(r11*sj5);
IkReal x749=((0.00297932851012146)*sj3);
IkReal x750=((1.2)*sj4);
IkReal x751=(cj5*r00);
IkReal x752=((2824.78267490284)*sj3);
IkReal x753=(r00*x728);
IkReal x754=(sj5*x741);
IkReal x755=((333.333333333333)*cj4*r22);
j2eval[0]=((((10.1692176296502)*x726*x741))+(((-2824.78267490284)*r00*x725*x726))+((x728*x732*x733))+(((-1.0)*x723*x728*x751))+(((-1.0)*x726*x732*x733))+(((-1.0)*x740*x752*x753))+(((1.2)*cj4*x724))+((x728*x729*x730))+(((663.823928602168)*x738))+(((-1.0)*cj4*sj5*x724*x747))+(((-1.0)*x728*x755))+(((-1.0)*x728*x750))+(((-1.0)*x733*x738))+(((-10.1692176296502)*x728*x741))+(((-1.0)*x724))+((x728*x729*x754))+((x723*x728*x748))+(((-1.0)*x726*x744))+(((-1.0)*x726*x746))+(((720.319582100224)*pz))+(((85.0)*x728))+(((663.823928602168)*x726*x732))+(((-1.0)*x726*x729*x730))+(((2824.78267490284)*x725*x753))+((sj5*x729*x742))+((x724*x739*x740))+(((-1.0)*r22*x723*x724))+(((-10.1692176296502)*x742))+(((-1.0)*pz*x725*x739))+(((-2824.78267490284)*x742*x751))+(((-1.0)*x726*x729*x754))+(((-663.823928602168)*x728*x732))+((x726*x755))+((x726*x750))+(((-1.0)*pz*x730*x747))+(((-85.0)*x726))+((x723*x726*x751))+(((78.3333333333333)*sj4*x724))+((x728*x744))+((x728*x746))+((r00*x726*x740*x752))+(((-1.0)*x723*x726*x748)));
j2eval[1]=IKsign((((x728*x730*x736))+(((0.233380733292848)*x726*x732))+((x728*x732*x737))+(((-1.0)*x726*x730*x736))+(((-1.0)*x726*x732*x737))+(((-0.00357519421214575)*x728*x741))+(((0.233380733292848)*x738))+((x725*x728*x745))+((cj4*x726*x731))+(((-0.233380733292848)*x728*x732))+(((-0.00357519421214575)*x742))+((x728*x735))+(((-1.0)*x726*x736*x754))+(((0.000421884279678108)*cj4*x724))+(((0.253242923360324)*pz))+((sj3*x726*x740*x745))+(((-1.0)*r00*x725*x727))+((x726*x743*x751))+((x728*x736*x754))+(((-1.0)*x726*x743*x748))+((x726*x734))+(((-0.00035157023306509)*x724))+(((-1.0)*sj4*x724*x731))+(((-1.0)*cj5*x742*x745))+(((-1.0)*x737*x738))+(((-1.0)*x726*x749))+(((-0.0298834698105326)*x726))+(((-1.0)*x728*x743*x751))+(((0.117190077688363)*r00*x724*x740))+(((-1.0)*r11*x727*x730))+(((-0.117190077688363)*cj4*x724*x748))+(((0.00357519421214575)*x726*x741))+(((-1.0)*x725*x726*x745))+(((0.0275396682567654)*sj4*x724))+(((-1.0)*sj3*x728*x740*x745))+(((-1.0)*cj4*x728*x731))+(((-1.0)*x726*x735))+((sj5*x736*x742))+(((-1.0)*x728*x734))+((x728*x749))+(((0.0298834698105326)*x728))+((x728*x743*x748))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x756=(cj4*sj3);
IkReal x757=(cj5*r00);
IkReal x758=(cj1*py);
IkReal x759=(r11*sj5);
IkReal x760=((0.99310950337382)*pz);
IkReal x761=((2824.78267490284)*r22);
IkReal x762=(pz*sj3);
IkReal x763=(px*sj1);
IkReal x764=(cj4*r22);
IkReal x765=((663.823928602168)*cj4);
IkReal x766=((2824.78267490284)*sj4);
IkReal x767=(sj3*sj4);
IkReal x768=((0.117190077688363)*r22);
IkReal x769=((0.00035157023306509)*sj3);
IkReal x770=((0.117190077688363)*pz);
IkReal x771=(cj4*pz);
IkReal x772=((0.233380733292848)*cj4);
IkReal x773=(pz*sj4);
IkReal x774=((2824.78267490284)*pz);
IkReal x775=((333.333333333333)*r22);
IkReal x776=((0.99310950337382)*sj4);
IkReal x777=((0.00357519421214575)*sj4);
IkReal x778=((10.1692176296502)*sj4);
IkReal x779=(cj3*cj5*r11);
IkReal x780=(cj3*r00*sj5);
j2eval[0]=(((sj4*x761*x762))+((x774*x779))+(((-1.0)*x758*x765))+(((78.3333333333333)*x763*x767))+((cj4*x758*x761))+(((-333.333333333333)*x763*x779))+(((-1.0)*x758*x759*x766))+((x759*x763*x766))+(((-1.0)*x756*x757*x774))+(((-1.0)*cj4*x761*x763))+(((-1.0)*sj3*x763))+((x774*x780))+(((-333.333333333333)*x763*x780))+(((333.333333333333)*x758*x780))+(((-78.3333333333333)*x758*x767))+((x756*x759*x774))+(((-1.0)*x763*x767*x775))+((x758*x778))+(((-333.333333333333)*x756*x757*x758))+(((8.47434802470852)*x762))+(((85.0)*pz))+(((1.2)*x756*x763))+((x763*x765))+((x758*x767*x775))+(((-1.0)*x757*x763*x766))+(((-333.333333333333)*pz*x764))+(((333.333333333333)*x756*x757*x763))+(((720.319582100224)*x763))+(((-1.2)*x773))+(((-333.333333333333)*x756*x759*x763))+(((78.3333333333333)*x771))+(((-720.319582100224)*x758))+(((333.333333333333)*x756*x758*x759))+(((-1.0)*x763*x778))+(((333.333333333333)*x758*x779))+((sj3*x758))+(((-1.2)*x756*x758))+(((333.333333333333)*x759*x773))+(((-333.333333333333)*x757*x773))+(((-663.823928602168)*sj4*x762))+((x757*x758*x766))+(((-10.1692176296502)*pz*x756)));
j2eval[1]=IKsign(((((-0.0275396682567654)*x758*x767))+(((0.000421884279678108)*x756*x763))+(((0.117190077688363)*x758*x779))+(((-1.0)*x756*x757*x760))+(((-1.0)*x763*x769))+(((-0.117190077688363)*x763*x779))+((x757*x758*x776))+(((-0.00357519421214575)*pz*x756))+((x760*x780))+((x756*x759*x760))+(((-0.253242923360324)*x758))+(((-1.0)*x763*x767*x768))+(((0.117190077688363)*x756*x757*x763))+(((-1.0)*x757*x763*x776))+((x758*x777))+(((-0.000421884279678108)*x773))+(((0.0275396682567654)*x771))+(((-1.0)*x764*x770))+(((0.117190077688363)*x756*x758*x759))+((x758*x769))+((x758*x767*x768))+(((0.253242923360324)*x763))+(((0.00297932851012146)*x762))+(((-1.0)*sj4*x757*x770))+(((-0.000421884279678108)*x756*x758))+((sj4*x759*x770))+(((-1.0)*x758*x772))+(((0.0298834698105326)*pz))+(((-0.117190077688363)*x756*x759*x763))+(((-1.0)*x758*x759*x776))+((x759*x763*x776))+((x763*x772))+((r22*x760*x767))+(((-0.117190077688363)*x756*x757*x758))+(((-0.117190077688363)*x763*x780))+(((-1.0)*x763*x777))+(((0.0275396682567654)*x763*x767))+(((0.117190077688363)*x758*x780))+(((0.99310950337382)*x758*x764))+(((-0.99310950337382)*x763*x764))+((x760*x779))+(((-0.233380733292848)*sj4*x762))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x781 = IKatan2WithCheck(IkReal(((((2.0)*cj5*r00*r22*sj3*(cj4*cj4)))+(((-0.47)*cj5*r00*sj3*(cj4*cj4)))+(((0.255)*cj3*r00*sj5))+(((0.23276515970686)*cj1*px*py*sj1))+(((-0.000213)*cj4*sj3))+(((0.255)*cj4*r11*sj3*sj5))+(((0.47)*r11*sj3*sj5*(cj4*cj4)))+((cj3*cj5*sj4*sj5*(r11*r11)))+(((-1.0)*cj3*cj5*sj4*sj5*(r00*r00)))+(((0.11638257985343)*(cj1*cj1)*(px*px)))+(((-2.0)*r11*r22*sj3*sj5*(cj4*cj4)))+(((-0.0036)*cj3*cj5*r11*sj4))+((cj3*r00*r11*sj4))+(((0.235)*cj3*cj4*cj5*r11))+(((0.255)*cj3*cj5*r11))+(((-0.05521204)*cj4*sj3*sj4))+(((0.001611)*sj3))+(((0.235)*cj3*cj4*r00*sj5))+(((0.255)*r22*sj3*sj4))+(((-0.972532971382791)*cj1*py*pz))+(((-0.003)*cj5*r00*sj3*sj4))+(((-0.0036)*cj3*r00*sj4*sj5))+(((-1.0)*cj3*cj4*cj5*r11*r22))+(((-1.0)*cj4*sj3*sj4*(r22*r22)))+(((0.972532971382791)*px*pz*sj1))+((cj4*sj3*sj4*(cj5*cj5)*(r00*r00)))+(((-0.255)*cj4*cj5*r00*sj3))+(((-1.0)*cj4*sj3*sj4*(cj5*cj5)*(r11*r11)))+(((-0.11638257985343)*(px*px)))+(((0.003)*r11*sj3*sj4*sj5))+(((-0.0599358)*sj3*sj4))+(((0.0072)*r22*sj3*(cj4*cj4)))+(((-0.001692)*sj3*(cj4*cj4)))+(((-1.0)*cj5*r00*r22*sj3))+(((-0.11638257985343)*(cj1*cj1)*(py*py)))+(((-0.0072)*cj4*r11*sj3*sj4*sj5))+(((-2.0)*cj3*r00*r11*sj4*(cj5*cj5)))+(((-2.0)*cj4*cj5*r00*r11*sj3*sj4*sj5))+(((0.47)*cj4*r22*sj3*sj4))+(((0.235)*cj5*r00*sj3))+(((-0.235)*r11*sj3*sj5))+(((-0.0036)*r22*sj3))+(((0.0072)*cj4*cj5*r00*sj3*sj4))+(((-1.0)*cj3*cj4*r00*r22*sj5))+((r11*r22*sj3*sj5))+(((0.11638257985343)*(pz*pz)))+((cj4*sj3*sj4*(r11*r11)))+(((-0.003)*cj4*r22*sj3)))),IkReal(((-0.06503796)+(((0.001692)*cj4*sj4))+(((-0.0072)*cj5*r00))+(((-2.0)*cj4*cj5*r00*r22*sj4))+(((0.0137335143086046)*(cj1*cj1)*(py*py)))+(((cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((cj4*cj4)*(r11*r11)))+(((-0.23276515970686)*px*pz*sj1))+(((0.51)*cj4*r22))+(((2.0)*cj4*r11*r22*sj4*sj5))+(((0.23276515970686)*cj1*py*pz))+(((-0.51)*r11*sj4*sj5))+(((0.0072)*cj5*r00*(cj4*cj4)))+(((0.986266485691395)*(pz*pz)))+(((0.0137335143086046)*(px*px)))+(((-1.0)*(r11*r11)))+(((2.0)*cj5*r00*r11*sj5))+(((-2.0)*cj5*r00*r11*sj5*(cj4*cj4)))+(((-1.0)*(cj5*cj5)*(r00*r00)))+(((-0.47)*cj4*r11*sj4*sj5))+(((-0.11985)*cj4))+(((0.001836)*sj4))+(((0.47)*cj4*cj5*r00*sj4))+(((0.0072)*r11*sj5))+(((-0.0137335143086046)*(cj1*cj1)*(px*px)))+(((-1.0)*(cj4*cj4)*(r22*r22)))+(((-0.0072)*r11*sj5*(cj4*cj4)))+(((-1.0)*(cj4*cj4)*(cj5*cj5)*(r11*r11)))+(((0.47)*r22*(cj4*cj4)))+(((cj5*cj5)*(r11*r11)))+(((-0.0072)*cj4*r22*sj4))+(((0.51)*cj5*r00*sj4))+(((-0.05521204)*(cj4*cj4)))+(((-0.0274670286172093)*cj1*px*py*sj1)))),IKFAST_ATAN2_MAGTHRESH);
if(!x781.valid){
continue;
}
CheckValue<IkReal> x782=IKPowWithIntegerCheck(IKsign(((((-0.99310950337382)*cj5*px*r00*sj1*sj4))+(((0.117190077688363)*cj1*py*r22*sj3*sj4))+(((-0.00357519421214575)*px*sj1*sj4))+(((0.117190077688363)*cj4*cj5*px*r00*sj1*sj3))+(((-0.00357519421214575)*cj4*pz*sj3))+(((-0.117190077688363)*cj5*pz*r00*sj4))+(((-0.99310950337382)*cj4*px*r22*sj1))+(((0.99310950337382)*pz*r22*sj3*sj4))+(((-0.0275396682567654)*cj1*py*sj3*sj4))+(((0.0275396682567654)*px*sj1*sj3*sj4))+(((0.99310950337382)*px*r11*sj1*sj4*sj5))+(((0.00357519421214575)*cj1*py*sj4))+(((-0.233380733292848)*pz*sj3*sj4))+(((-0.233380733292848)*cj1*cj4*py))+(((0.00035157023306509)*cj1*py*sj3))+(((-0.117190077688363)*cj4*pz*r22))+(((0.117190077688363)*cj1*cj3*py*r00*sj5))+(((-0.117190077688363)*cj4*px*r11*sj1*sj3*sj5))+(((-0.000421884279678108)*pz*sj4))+(((0.233380733292848)*cj4*px*sj1))+(((-0.99310950337382)*cj4*cj5*pz*r00*sj3))+(((0.117190077688363)*cj1*cj4*py*r11*sj3*sj5))+(((0.99310950337382)*cj1*cj4*py*r22))+(((0.000421884279678108)*cj4*px*sj1*sj3))+(((0.99310950337382)*cj1*cj5*py*r00*sj4))+(((-0.99310950337382)*cj1*py*r11*sj4*sj5))+(((0.117190077688363)*pz*r11*sj4*sj5))+(((0.00297932851012146)*pz*sj3))+(((0.0298834698105326)*pz))+(((0.117190077688363)*cj1*cj3*cj5*py*r11))+(((-0.00035157023306509)*px*sj1*sj3))+(((-0.117190077688363)*cj3*px*r00*sj1*sj5))+(((-0.000421884279678108)*cj1*cj4*py*sj3))+(((0.99310950337382)*cj3*pz*r00*sj5))+(((0.99310950337382)*cj3*cj5*pz*r11))+(((-0.253242923360324)*cj1*py))+(((-0.117190077688363)*cj1*cj4*cj5*py*r00*sj3))+(((0.253242923360324)*px*sj1))+(((0.0275396682567654)*cj4*pz))+(((-0.117190077688363)*px*r22*sj1*sj3*sj4))+(((0.99310950337382)*cj4*pz*r11*sj3*sj5))+(((-0.117190077688363)*cj3*cj5*px*r11*sj1)))),-1);
if(!x782.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x781.value)+(((1.5707963267949)*(x782.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x783=IKcos(j2);
IkReal x784=IKsin(j2);
IkReal x785=((0.006)*cj4);
IkReal x786=(cj5*r00);
IkReal x787=(r11*sj4);
IkReal x788=((1.0)*cj3);
IkReal x789=(r11*sj5);
IkReal x790=(cj5*r11);
IkReal x791=(cj4*sj3);
IkReal x792=(px*sj1);
IkReal x793=((1.0)*sj4);
IkReal x794=(r22*sj4);
IkReal x795=(r22*sj3);
IkReal x796=((1.0)*r22);
IkReal x797=((0.003)*sj3);
IkReal x798=(cj1*py);
IkReal x799=((0.99310950337382)*pz);
IkReal x800=(r00*sj5);
IkReal x801=((0.0036)*sj4);
IkReal x802=(sj3*sj4);
IkReal x803=(sj5*x784);
IkReal x804=(cj4*x783);
IkReal x805=((0.0597669396210653)*x784);
IkReal x806=(cj3*x783);
IkReal x807=((0.506485846720648)*x783);
IkReal x808=((0.99310950337382)*x784);
IkReal x809=(pz*x784);
IkReal x810=((0.117190077688363)*x784);
IkReal x811=((0.99310950337382)*x783);
IkReal x812=((0.117190077688363)*x783);
IkReal x813=((0.235)*x784);
evalcond[0]=((0.255)+((sj5*x787))+((x792*x811))+((x792*x810))+(((0.235)*cj4))+((pz*x812))+(((-1.0)*x798*x811))+(((-1.0)*x798*x810))+(((-1.0)*x784*x799))+(((-1.0)*x786*x793))+(((-1.0)*x801))+(((-1.0)*cj4*x796)));
evalcond[1]=((((-1.0)*x792*x812))+((x786*x791))+(((0.235)*x802))+(((-1.0)*x797))+(((0.117190077688363)*x809))+(((-1.0)*x798*x808))+(((-1.0)*x788*x790))+(((-1.0)*x789*x791))+((x783*x799))+(((-1.0)*x793*x795))+(((-1.0)*x788*x800))+(((0.0036)*x791))+((x792*x808))+((x798*x812)));
evalcond[2]=((((0.255)*x784))+((x790*x806))+(((-1.0)*x784*x786*x793))+(((-1.0)*x799))+(((-1.0)*x784*x801))+((x800*x806))+((x783*x797))+(((-1.0)*x783*x786*x791))+((cj4*x813))+(((-0.235)*x783*x802))+((sj3*x783*x794))+(((-0.0036)*x783*x791))+(((-1.0)*cj4*x784*x796))+((x783*x789*x791))+(((-0.117190077688363)*x798))+((x787*x803))+(((0.117190077688363)*x792)));
evalcond[3]=((((-1.0)*x796*x804))+(((0.255)*x783))+(((0.117190077688363)*pz))+(((0.235)*x804))+((x784*x786*x791))+(((-0.99310950337382)*x798))+(((-1.0)*x783*x786*x793))+((x802*x813))+(((-1.0)*x784*x788*x800))+(((-1.0)*x784*x789*x791))+(((-1.0)*x784*x797))+(((0.99310950337382)*x792))+(((-1.0)*x784*x788*x790))+(((0.0036)*x784*x791))+(((-1.0)*x784*x793*x795))+(((-1.0)*x783*x801))+((sj5*x783*x787)));
evalcond[4]=((-0.00980508)+(((-1.0)*(px*px)))+(((-0.0072)*x789))+(((-0.0597669396210653)*pz*x783))+(r22*r22)+((x785*x789))+(r11*r11)+(((-0.00141)*sj4))+(((0.506485846720648)*x809))+(((-2.16e-5)*cj4))+(((0.006)*x794))+(r00*r00)+((x798*x805))+((x798*x807))+(((-0.47)*r22))+(((-1.0)*x792*x807))+(((-1.0)*x792*x805))+(((0.0104)*py*sj1))+(((-1.0)*(pz*pz)))+(((0.0072)*x786))+(((-1.0)*x785*x786))+(((-1.0)*(py*py)))+(((0.0104)*cj1*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x814 = IKatan2WithCheck(IkReal(((0.06503796)+(((-1.0)*(cj5*cj5)*(r11*r11)))+(((-0.51)*cj5*r00*sj4))+(((-0.001836)*sj4))+(((-2.0)*cj4*r11*r22*sj4*sj5))+(((-0.47)*cj4*cj5*r00*sj4))+(((-1.0)*(cj4*cj4)*(r11*r11)))+(((-0.23276515970686)*px*pz*sj1))+(((cj4*cj4)*(r22*r22)))+(r11*r11)+(((0.11985)*cj4))+(((0.23276515970686)*cj1*py*pz))+(((-1.0)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((1.97253297138279)*cj1*px*py*sj1))+(((0.0072)*r11*sj5*(cj4*cj4)))+(((2.0)*cj5*r00*r11*sj5*(cj4*cj4)))+(((0.0072)*cj5*r00))+(((-0.986266485691395)*(cj1*cj1)*(py*py)))+(((-0.47)*r22*(cj4*cj4)))+(((-0.986266485691395)*(px*px)))+(((-0.0137335143086046)*(pz*pz)))+(((-0.51)*cj4*r22))+(((-2.0)*cj5*r00*r11*sj5))+(((0.05521204)*(cj4*cj4)))+(((-0.001692)*cj4*sj4))+(((2.0)*cj4*cj5*r00*r22*sj4))+(((0.986266485691395)*(cj1*cj1)*(px*px)))+(((0.51)*r11*sj4*sj5))+(((cj5*cj5)*(r00*r00)))+(((0.47)*cj4*r11*sj4*sj5))+(((0.0072)*cj4*r22*sj4))+(((-0.0072)*cj5*r00*(cj4*cj4)))+(((cj4*cj4)*(cj5*cj5)*(r11*r11)))+(((-0.0072)*r11*sj5)))),IkReal(((((2.0)*cj5*r00*r22*sj3*(cj4*cj4)))+(((-0.47)*cj5*r00*sj3*(cj4*cj4)))+(((0.11638257985343)*(cj1*cj1)*(py*py)))+(((0.972532971382791)*cj1*py*pz))+(((0.255)*cj3*r00*sj5))+(((-0.000213)*cj4*sj3))+(((0.255)*cj4*r11*sj3*sj5))+(((0.47)*r11*sj3*sj5*(cj4*cj4)))+((cj3*cj5*sj4*sj5*(r11*r11)))+(((-1.0)*cj3*cj5*sj4*sj5*(r00*r00)))+(((-2.0)*r11*r22*sj3*sj5*(cj4*cj4)))+(((-0.0036)*cj3*cj5*r11*sj4))+((cj3*r00*r11*sj4))+(((0.235)*cj3*cj4*cj5*r11))+(((0.255)*cj3*cj5*r11))+(((-0.05521204)*cj4*sj3*sj4))+(((0.001611)*sj3))+(((0.235)*cj3*cj4*r00*sj5))+(((0.255)*r22*sj3*sj4))+(((-0.003)*cj5*r00*sj3*sj4))+(((-0.0036)*cj3*r00*sj4*sj5))+(((-1.0)*cj3*cj4*cj5*r11*r22))+(((-1.0)*cj4*sj3*sj4*(r22*r22)))+(((-0.11638257985343)*(cj1*cj1)*(px*px)))+(((-0.972532971382791)*px*pz*sj1))+((cj4*sj3*sj4*(cj5*cj5)*(r00*r00)))+(((-0.255)*cj4*cj5*r00*sj3))+(((-1.0)*cj4*sj3*sj4*(cj5*cj5)*(r11*r11)))+(((0.003)*r11*sj3*sj4*sj5))+(((0.11638257985343)*(px*px)))+(((-0.0599358)*sj3*sj4))+(((0.0072)*r22*sj3*(cj4*cj4)))+(((-0.001692)*sj3*(cj4*cj4)))+(((-1.0)*cj5*r00*r22*sj3))+(((-0.23276515970686)*cj1*px*py*sj1))+(((-0.0072)*cj4*r11*sj3*sj4*sj5))+(((-2.0)*cj3*r00*r11*sj4*(cj5*cj5)))+(((-2.0)*cj4*cj5*r00*r11*sj3*sj4*sj5))+(((0.47)*cj4*r22*sj3*sj4))+(((0.235)*cj5*r00*sj3))+(((-0.235)*r11*sj3*sj5))+(((-0.0036)*r22*sj3))+(((-0.11638257985343)*(pz*pz)))+(((0.0072)*cj4*cj5*r00*sj3*sj4))+(((-1.0)*cj3*cj4*r00*r22*sj5))+((r11*r22*sj3*sj5))+((cj4*sj3*sj4*(r11*r11)))+(((-0.003)*cj4*r22*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x814.valid){
continue;
}
CheckValue<IkReal> x815=IKPowWithIntegerCheck(IKsign(((((-0.99310950337382)*cj1*cj4*cj5*py*r00*sj3))+(((0.117190077688363)*cj4*px*r22*sj1))+(((-0.99310950337382)*cj4*pz*r22))+(((-0.117190077688363)*px*r11*sj1*sj4*sj5))+(((-0.99310950337382)*px*r22*sj1*sj3*sj4))+(((-0.117190077688363)*cj3*cj5*pz*r11))+(((-0.99310950337382)*cj4*px*r11*sj1*sj3*sj5))+(((0.0275396682567654)*cj1*cj4*py))+(((0.99310950337382)*cj1*py*r22*sj3*sj4))+(((0.253242923360324)*pz))+(((-0.0275396682567654)*cj4*px*sj1))+(((-0.117190077688363)*cj4*pz*r11*sj3*sj5))+(((-0.99310950337382)*cj5*pz*r00*sj4))+(((-0.117190077688363)*pz*r22*sj3*sj4))+(((0.99310950337382)*cj4*cj5*px*r00*sj1*sj3))+(((0.99310950337382)*cj1*cj4*py*r11*sj3*sj5))+(((-0.00357519421214575)*cj1*cj4*py*sj3))+(((0.117190077688363)*cj1*py*r11*sj4*sj5))+(((0.233380733292848)*cj4*pz))+(((0.000421884279678108)*cj4*pz*sj3))+(((-0.00297932851012146)*px*sj1*sj3))+(((-0.00035157023306509)*pz*sj3))+(((-0.000421884279678108)*cj1*py*sj4))+(((-0.99310950337382)*cj3*px*r00*sj1*sj5))+(((-0.00357519421214575)*pz*sj4))+(((0.99310950337382)*pz*r11*sj4*sj5))+(((0.233380733292848)*px*sj1*sj3*sj4))+(((-0.117190077688363)*cj1*cj4*py*r22))+(((0.0298834698105326)*cj1*py))+(((-0.233380733292848)*cj1*py*sj3*sj4))+(((-0.117190077688363)*cj3*pz*r00*sj5))+(((0.00357519421214575)*cj4*px*sj1*sj3))+(((-0.117190077688363)*cj1*cj5*py*r00*sj4))+(((0.0275396682567654)*pz*sj3*sj4))+(((-0.0298834698105326)*px*sj1))+(((0.000421884279678108)*px*sj1*sj4))+(((-0.99310950337382)*cj3*cj5*px*r11*sj1))+(((0.00297932851012146)*cj1*py*sj3))+(((0.117190077688363)*cj4*cj5*pz*r00*sj3))+(((0.117190077688363)*cj5*px*r00*sj1*sj4))+(((0.99310950337382)*cj1*cj3*py*r00*sj5))+(((0.99310950337382)*cj1*cj3*cj5*py*r11)))),-1);
if(!x815.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x814.value)+(((1.5707963267949)*(x815.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x816=IKcos(j2);
IkReal x817=IKsin(j2);
IkReal x818=((0.006)*cj4);
IkReal x819=(cj5*r00);
IkReal x820=(r11*sj4);
IkReal x821=((1.0)*cj3);
IkReal x822=(r11*sj5);
IkReal x823=(cj5*r11);
IkReal x824=(cj4*sj3);
IkReal x825=(px*sj1);
IkReal x826=((1.0)*sj4);
IkReal x827=(r22*sj4);
IkReal x828=(r22*sj3);
IkReal x829=((1.0)*r22);
IkReal x830=((0.003)*sj3);
IkReal x831=(cj1*py);
IkReal x832=((0.99310950337382)*pz);
IkReal x833=(r00*sj5);
IkReal x834=((0.0036)*sj4);
IkReal x835=(sj3*sj4);
IkReal x836=(sj5*x817);
IkReal x837=(cj4*x816);
IkReal x838=((0.0597669396210653)*x817);
IkReal x839=(cj3*x816);
IkReal x840=((0.506485846720648)*x816);
IkReal x841=((0.99310950337382)*x817);
IkReal x842=(pz*x817);
IkReal x843=((0.117190077688363)*x817);
IkReal x844=((0.99310950337382)*x816);
IkReal x845=((0.117190077688363)*x816);
IkReal x846=((0.235)*x817);
evalcond[0]=((0.255)+(((-1.0)*x831*x844))+(((-1.0)*x831*x843))+(((0.235)*cj4))+(((-1.0)*x819*x826))+((pz*x845))+(((-1.0)*cj4*x829))+((sj5*x820))+(((-1.0)*x817*x832))+(((-1.0)*x834))+((x825*x844))+((x825*x843)));
evalcond[1]=((((-1.0)*x821*x833))+(((-1.0)*x831*x841))+((x816*x832))+(((-1.0)*x822*x824))+((x819*x824))+(((0.117190077688363)*x842))+(((-1.0)*x826*x828))+(((0.0036)*x824))+(((-1.0)*x830))+(((-1.0)*x821*x823))+(((-1.0)*x825*x845))+(((0.235)*x835))+((x825*x841))+((x831*x845)));
evalcond[2]=((((-0.0036)*x816*x824))+(((-1.0)*x816*x819*x824))+(((-0.117190077688363)*x831))+(((-0.235)*x816*x835))+((x816*x822*x824))+((sj3*x816*x827))+((x816*x830))+((x820*x836))+(((-1.0)*cj4*x817*x829))+((x833*x839))+(((-1.0)*x817*x819*x826))+((cj4*x846))+(((-1.0)*x817*x834))+(((-1.0)*x832))+((x823*x839))+(((0.255)*x817))+(((0.117190077688363)*x825)));
evalcond[3]=((((-1.0)*x817*x821*x833))+(((0.117190077688363)*pz))+(((0.99310950337382)*x825))+(((-1.0)*x816*x819*x826))+((x835*x846))+(((-1.0)*x817*x822*x824))+((sj5*x816*x820))+(((-1.0)*x816*x834))+(((-0.99310950337382)*x831))+(((-1.0)*x817*x830))+((x817*x819*x824))+(((0.255)*x816))+(((0.235)*x837))+(((0.0036)*x817*x824))+(((-1.0)*x829*x837))+(((-1.0)*x817*x826*x828))+(((-1.0)*x817*x821*x823)));
evalcond[4]=((-0.00980508)+(((0.506485846720648)*x842))+(((0.006)*x827))+(((-1.0)*(px*px)))+((x831*x838))+(((0.0072)*x819))+(((-1.0)*x818*x819))+(r22*r22)+(r11*r11)+(((-0.00141)*sj4))+(((-0.0072)*x822))+(((-2.16e-5)*cj4))+(r00*r00)+(((-0.47)*r22))+(((0.0104)*py*sj1))+(((-0.0597669396210653)*pz*x816))+(((-1.0)*(pz*pz)))+((x818*x822))+(((-1.0)*x825*x840))+(((-1.0)*x825*x838))+(((-1.0)*(py*py)))+(((0.0104)*cj1*px))+((x831*x840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x847 = IKatan2WithCheck(IkReal(((((-0.117190077688363)*cj4*cj5*pz*r00*sj3))+(((0.117190077688363)*cj4*px*r22*sj1))+(((-0.99310950337382)*cj4*pz*r22))+(((-0.117190077688363)*px*r11*sj1*sj4*sj5))+(((0.00297932851012146)*px*sj1*sj3))+(((-0.99310950337382)*cj4*cj5*px*r00*sj1*sj3))+(((0.117190077688363)*pz*r22*sj3*sj4))+(((0.0275396682567654)*cj1*cj4*py))+(((0.99310950337382)*cj3*px*r00*sj1*sj5))+(((0.00035157023306509)*pz*sj3))+(((0.253242923360324)*pz))+(((-0.0275396682567654)*cj4*px*sj1))+(((-0.000421884279678108)*cj4*pz*sj3))+(((-0.99310950337382)*cj5*pz*r00*sj4))+(((-0.99310950337382)*cj1*cj4*py*r11*sj3*sj5))+(((0.117190077688363)*cj3*pz*r00*sj5))+(((0.117190077688363)*cj1*py*r11*sj4*sj5))+(((0.233380733292848)*cj1*py*sj3*sj4))+(((-0.99310950337382)*cj1*cj3*cj5*py*r11))+(((0.00357519421214575)*cj1*cj4*py*sj3))+(((0.99310950337382)*cj3*cj5*px*r11*sj1))+(((0.233380733292848)*cj4*pz))+(((0.99310950337382)*px*r22*sj1*sj3*sj4))+(((-0.000421884279678108)*cj1*py*sj4))+(((-0.00357519421214575)*pz*sj4))+(((-0.0275396682567654)*pz*sj3*sj4))+(((0.99310950337382)*pz*r11*sj4*sj5))+(((-0.00297932851012146)*cj1*py*sj3))+(((-0.117190077688363)*cj1*cj4*py*r22))+(((0.0298834698105326)*cj1*py))+(((0.99310950337382)*cj1*cj4*cj5*py*r00*sj3))+(((0.99310950337382)*cj4*px*r11*sj1*sj3*sj5))+(((-0.117190077688363)*cj1*cj5*py*r00*sj4))+(((-0.0298834698105326)*px*sj1))+(((-0.233380733292848)*px*sj1*sj3*sj4))+(((0.000421884279678108)*px*sj1*sj4))+(((-0.99310950337382)*cj1*cj3*py*r00*sj5))+(((0.117190077688363)*cj3*cj5*pz*r11))+(((-0.00357519421214575)*cj4*px*sj1*sj3))+(((0.117190077688363)*cj5*px*r00*sj1*sj4))+(((-0.99310950337382)*cj1*py*r22*sj3*sj4))+(((0.117190077688363)*cj4*pz*r11*sj3*sj5)))),IkReal(((((-0.99310950337382)*cj1*cj5*py*r00*sj4))+(((0.000421884279678108)*pz*sj4))+(((0.117190077688363)*cj1*py*r22*sj3*sj4))+(((0.117190077688363)*cj4*pz*r22))+(((0.117190077688363)*cj4*cj5*px*r00*sj1*sj3))+(((-0.00357519421214575)*cj4*pz*sj3))+(((0.00357519421214575)*px*sj1*sj4))+(((-0.99310950337382)*px*r11*sj1*sj4*sj5))+(((0.99310950337382)*pz*r22*sj3*sj4))+(((-0.0275396682567654)*cj1*py*sj3*sj4))+(((0.0275396682567654)*px*sj1*sj3*sj4))+(((0.233380733292848)*cj1*cj4*py))+(((0.99310950337382)*cj4*px*r22*sj1))+(((-0.00357519421214575)*cj1*py*sj4))+(((-0.233380733292848)*pz*sj3*sj4))+(((-0.117190077688363)*pz*r11*sj4*sj5))+(((0.00035157023306509)*cj1*py*sj3))+(((-0.253242923360324)*px*sj1))+(((0.117190077688363)*cj1*cj3*py*r00*sj5))+(((-0.117190077688363)*cj4*px*r11*sj1*sj3*sj5))+(((-0.0298834698105326)*pz))+(((0.117190077688363)*cj5*pz*r00*sj4))+(((-0.99310950337382)*cj4*cj5*pz*r00*sj3))+(((0.117190077688363)*cj1*cj4*py*r11*sj3*sj5))+(((0.253242923360324)*cj1*py))+(((0.000421884279678108)*cj4*px*sj1*sj3))+(((-0.233380733292848)*cj4*px*sj1))+(((0.00297932851012146)*pz*sj3))+(((0.117190077688363)*cj1*cj3*cj5*py*r11))+(((-0.00035157023306509)*px*sj1*sj3))+(((-0.117190077688363)*cj3*px*r00*sj1*sj5))+(((0.99310950337382)*cj5*px*r00*sj1*sj4))+(((0.99310950337382)*cj1*py*r11*sj4*sj5))+(((-0.000421884279678108)*cj1*cj4*py*sj3))+(((0.99310950337382)*cj3*pz*r00*sj5))+(((0.99310950337382)*cj3*cj5*pz*r11))+(((-0.99310950337382)*cj1*cj4*py*r22))+(((-0.117190077688363)*cj1*cj4*cj5*py*r00*sj3))+(((-0.0275396682567654)*cj4*pz))+(((-0.117190077688363)*px*r22*sj1*sj3*sj4))+(((0.99310950337382)*cj4*pz*r11*sj3*sj5))+(((-0.117190077688363)*cj3*cj5*px*r11*sj1)))),IKFAST_ATAN2_MAGTHRESH);
if(!x847.valid){
continue;
}
CheckValue<IkReal> x848=IKPowWithIntegerCheck(IKsign(((((-1.0)*(cj1*cj1)*(px*px)))+(px*px)+(((cj1*cj1)*(py*py)))+(pz*pz)+(((-2.0)*cj1*px*py*sj1)))),-1);
if(!x848.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x847.value)+(((1.5707963267949)*(x848.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x849=IKcos(j2);
IkReal x850=IKsin(j2);
IkReal x851=((0.006)*cj4);
IkReal x852=(cj5*r00);
IkReal x853=(r11*sj4);
IkReal x854=((1.0)*cj3);
IkReal x855=(r11*sj5);
IkReal x856=(cj5*r11);
IkReal x857=(cj4*sj3);
IkReal x858=(px*sj1);
IkReal x859=((1.0)*sj4);
IkReal x860=(r22*sj4);
IkReal x861=(r22*sj3);
IkReal x862=((1.0)*r22);
IkReal x863=((0.003)*sj3);
IkReal x864=(cj1*py);
IkReal x865=((0.99310950337382)*pz);
IkReal x866=(r00*sj5);
IkReal x867=((0.0036)*sj4);
IkReal x868=(sj3*sj4);
IkReal x869=(sj5*x850);
IkReal x870=(cj4*x849);
IkReal x871=((0.0597669396210653)*x850);
IkReal x872=(cj3*x849);
IkReal x873=((0.506485846720648)*x849);
IkReal x874=((0.99310950337382)*x850);
IkReal x875=(pz*x850);
IkReal x876=((0.117190077688363)*x850);
IkReal x877=((0.99310950337382)*x849);
IkReal x878=((0.117190077688363)*x849);
IkReal x879=((0.235)*x850);
evalcond[0]=((0.255)+(((-1.0)*x867))+((sj5*x853))+(((-1.0)*x850*x865))+(((0.235)*cj4))+(((-1.0)*x852*x859))+(((-1.0)*x864*x877))+(((-1.0)*x864*x876))+((x858*x876))+((x858*x877))+((pz*x878))+(((-1.0)*cj4*x862)));
evalcond[1]=((((-1.0)*x863))+(((-1.0)*x854*x866))+(((0.117190077688363)*x875))+(((-1.0)*x864*x874))+(((0.235)*x868))+((x858*x874))+((x852*x857))+(((-1.0)*x859*x861))+(((-1.0)*x858*x878))+((x864*x878))+((x849*x865))+(((0.0036)*x857))+(((-1.0)*x855*x857))+(((-1.0)*x854*x856)));
evalcond[2]=((((-1.0)*x865))+((sj3*x849*x860))+(((-0.0036)*x849*x857))+(((-1.0)*x850*x867))+(((-1.0)*x849*x852*x857))+((x856*x872))+((x866*x872))+(((-0.117190077688363)*x864))+((x853*x869))+((cj4*x879))+(((-1.0)*cj4*x850*x862))+(((-1.0)*x850*x852*x859))+((x849*x863))+((x849*x855*x857))+(((0.255)*x850))+(((0.117190077688363)*x858))+(((-0.235)*x849*x868)));
evalcond[3]=((((-0.99310950337382)*x864))+(((-1.0)*x850*x854*x866))+(((0.0036)*x850*x857))+(((0.117190077688363)*pz))+((x868*x879))+(((-1.0)*x850*x855*x857))+(((-1.0)*x850*x863))+(((-1.0)*x850*x859*x861))+(((-1.0)*x849*x852*x859))+(((0.255)*x849))+((x850*x852*x857))+((sj5*x849*x853))+(((0.99310950337382)*x858))+(((-1.0)*x862*x870))+(((-1.0)*x849*x867))+(((0.235)*x870))+(((-1.0)*x850*x854*x856)));
evalcond[4]=((-0.00980508)+(((-1.0)*(px*px)))+(r22*r22)+(r11*r11)+(((-0.00141)*sj4))+(((0.006)*x860))+(((0.0072)*x852))+(((-2.16e-5)*cj4))+(r00*r00)+(((-0.47)*r22))+(((0.506485846720648)*x875))+((x851*x855))+(((0.0104)*py*sj1))+(((-1.0)*(pz*pz)))+(((-1.0)*x858*x873))+(((-1.0)*x858*x871))+((x864*x871))+((x864*x873))+(((-1.0)*x851*x852))+(((-1.0)*(py*py)))+(((-0.0072)*x855))+(((0.0104)*cj1*px))+(((-0.0597669396210653)*pz*x849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "3791d85483a7406188a89fe1b10c49a0"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
